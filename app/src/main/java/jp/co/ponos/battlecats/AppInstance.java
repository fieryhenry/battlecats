package jp.co.ponos.battlecats;


import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
//import jp.co.ponos.library.ads.aAd;
//import jp.co.ponos.library.facebook.aFacebook;
import jp.co.ponos.library.game.DataStreams.aResourceFileStream;
import jp.co.ponos.library.game.SoundType;
import jp.co.ponos.library.game.aBrowserOption;
import jp.co.ponos.library.game.aMath;
import jp.co.ponos.library.game.aModel;
import jp.co.ponos.library.game.aModelAnimation;
import jp.co.ponos.library.game.aSound;
import jp.co.ponos.library.game.aString;
import jp.co.ponos.library.game.aStringBuffer;
import jp.co.ponos.library.game.aTexture;
import jp.co.ponos.library.game.aTextureRenderer;
import jp.co.ponos.library.score.MyUtility;
import jp.co.ponos.library.score.aScoreUploader;
import jp.co.ponos.library.twitter.aTwitter;

/* renamed from: jp.co.ponos.battlecats.d */
/* loaded from: classes.dex */
public class AppInstance extends Game {
    /* JADX INFO: Access modifiers changed from: package-private */
    public AppInstance() {
        this.scene2 = -1;
        this.scene = -1;
        this.W = -1;
        this.V = -1;
    }

    void stampLoad() {
        loadTextures2();
        for (int i = 6; i < getLength(this.uiTextures) - 6; i++) {
            if (this.uiTextures[i].isLoaded()) {
                this.uiTextures[i].reset();
            }
        }
        for (int i2 = 0; i2 < getLength(this.fR); i2++) {
            this.fR[i2] = 0;
        }
        for (int i3 = 0; i3 < getLength(this.blinkFrame); i3++) {
            this.blinkFrame[i3] = 0;
        }
        for (int i4 = 0; i4 < getLength(this.gameStats1); i4++) {
            this.gameStats1[0] = 0;
        }
        for (int i5 = 0; i5 < getLength(this.eE); i5++) {
            this.eE[i5] = false;
        }
        for (int i6 = 0; i6 < getLength(this.gp); i6++) {
            this.gp[i6] = false;
        }
        this.textTextures[0].drawText(this.stampMessageText[0], "FONT_SYSTEM_BOLD", 46, 0);
        this.textTextures[1].drawText(this.stampMessageText[1], "FONT_SYSTEM_BOLD", 24, 0);
        if (this.regionState == 0) {
            this.textTextures[2].drawText(this.stampMessageText[2], "FONT_SYSTEM_BOLD", 24, 0);
            this.textTextures[3].drawText(String.format("%s%d%s", this.stampMessageText[3], 30 - (this.bl + 1), this.stampMessageText[4]), "FONT_SYSTEM_BOLD", 24, 0);
        } else if (this.regionState == 1) {
            this.textTextures[2].drawText(String.format("%s %d %s", this.stampMessageText[2], 30 - (this.bl + 1), this.stampMessageText[18]), "FONT_SYSTEM_BOLD", 24, 0);
            this.textTextures[3].drawText(String.format("%s", this.stampMessageText[3]), "FONT_SYSTEM_BOLD", 24, 0);
        }
        this.textTextures[4].drawText(this.stampMessageText[16], "FONT_SYSTEM_BOLD", 22, 1);
        this.textTextures[5].drawText(this.stampMessageText[17], "FONT_SYSTEM_BOLD", 22, 1);
        this.buttonCoordinates1[0][0] = (this.excessWidth / 2) + 225;
        this.buttonCoordinates1[0][1] = 485;
        this.buttonCoordinates1[0][2] = 381;
        this.buttonCoordinates1[0][3] = 88;
        this.boxScale = 230;
        this.gameStats1[0] = -(this.boxScale * this.bl);
        this.bm[this.bl] = 1;
        if (this.stampTextures[0].isLoaded()) {
            this.stampTextures[0].reset();
        }
        if (!this.stampTextures[0].isLoaded()) {
            this.stampTextures[0].load(MyUtility.getString(String.format("i%03d_stamp_f.png", 0)), MyUtility.getString(String.format("%03d_stamp_f.imgcut", 0)));
        }
        this.stampModels[0].load(MyUtility.getString(String.format("%03d_stamp_f.mamodel", 0)));
        this.stampAnims[0].load(MyUtility.getString(String.format("%03d_stamp_f00.maanim", 0)));
        this.stampModels[0].setTextures(this.stampTextures);
        this.stampModels[0].setAction();
        if (this.stampTextures[1].isLoaded()) {
            this.stampTextures[1].reset();
        }
        if (!this.stampTextures[1].isLoaded()) {
            this.stampTextures[1].load(MyUtility.getString(String.format("i%03d_img044.png", 1)), MyUtility.getString(String.format("i%03d_img044.imgcut", 1)));
        }
        this.stampModels[1].load(MyUtility.getString(String.format("%03d_img044.mamodel", 1)));
        this.stampAnims[1].load(MyUtility.getString(String.format("stamp.maanim", new Object[0])));
        this.stampModels[1].setTextures(this.stampTextures);
        this.stampModels[1].setAction();
        if (this.uiTextures[10].isLoaded()) {
            this.uiTextures[10].reset();
        }
        if (!this.uiTextures[10].isLoaded()) {
            this.uiTextures[10].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
        }
        if (this.bl >= 29) {
            this.eE[0] = true;
        } else {
            this.eE[0] = false;
        }
        this.gameStats1[2] = getWidth() / 2;
        this.isScrolling = false;
    }

    boolean stampProcess() {
        int[] iArr = this.blinkFrame;
        iArr[4] = iArr[4] + 1;
        if (!this.eb) {
            int[] iArr2 = this.blinkFrame;
            iArr2[0] = iArr2[0] + 1;
            int[] iArr3 = this.blinkFrame;
            iArr3[1] = iArr3[1] + 1;
            if (this.blinkFrame[1] == 60) {
                aSound.getInstance().play(SoundType.STAMP);
            }
            if (this.blinkFrame[1] >= this.stampAnims[1].a() && this.bl <= 29 && this.bm[this.bl] == 1) {
                screenTransition();
                this.gu = true;
                this.gw = 9999;
                this.bm[this.bl] = 2;
                return false;
            } else if (this.blinkFrame[1] >= this.stampAnims[1].a()) {
                this.blinkFrame[1] = this.stampAnims[1].a();
                this.gameStats1[2] = (int) (this.gameStats1[2] * 0.8d);
                int[] iArr4 = this.gameStats1;
                iArr4[0] = iArr4[0] + this.scrollAmount[0];
                int[] iArr5 = this.gameStats1;
                iArr5[1] = iArr5[1] - this.scrollAmount[0];
                this.scrollAmount[0] = (int) (this.scrollAmount[0] * 0.9d);
                if (this.gameStats1[0] >= (this.boxScale / 2) - 20) {
                    this.gameStats1[0] = (this.boxScale / 2) - 20;
                    this.gameStats1[1] = this.boxScale * 100;
                    this.scrollAmount[0] = 0;
                } else if (this.gameStats1[0] < (-((this.boxScale * 30) - 20)) + (this.boxScale / 2)) {
                    this.gameStats1[0] = (-((this.boxScale * 30) - 20)) + (this.boxScale / 2);
                    this.scrollAmount[0] = 0;
                    this.gameStats1[1] = this.boxScale * 100;
                }
                if (!isPointerDown() || this.eb) {
                    this.isScrolling = false;
                    if ((this.scrollAmount[0] >= 0 && this.scrollAmount[0] < 8) || (this.scrollAmount[0] > -8 && this.scrollAmount[0] <= 0)) {
                        this.scrollAmount[0] = 0;
                        if (this.gameStats1[0] % this.boxScale != 0) {
                            if ((-this.gameStats1[0]) >= 0) {
                                if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
                                    this.gameStats1[0] = this.gameStats1[0] - ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4);
                                    if ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4 == 0) {
                                        this.gameStats1[0] = ((this.gameStats1[0] / this.boxScale) - 1) * this.boxScale;
                                    }
                                } else {
                                    this.gameStats1[0] = this.gameStats1[0] - (((this.gameStats1[0] % this.boxScale) - 4) / 4);
                                    if (((this.gameStats1[0] % this.boxScale) - 4) / 4 == 0) {
                                        this.gameStats1[0] = (this.gameStats1[0] / this.boxScale) * this.boxScale;
                                    }
                                }
                            } else if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
                                this.gameStats1[0] = this.gameStats1[0] - ((((this.gameStats1[0] % this.boxScale) + this.boxScale) - 4) / 4);
                                if ((((this.gameStats1[0] % this.boxScale) + this.boxScale) - 4) / 4 == 0) {
                                    this.gameStats1[0] = ((this.gameStats1[0] / this.boxScale) - 1) * this.boxScale;
                                }
                            } else {
                                this.gameStats1[0] = this.gameStats1[0] - (((this.gameStats1[0] % this.boxScale) + 4) / 4);
                                if (((this.gameStats1[0] % this.boxScale) + 4) / 4 == 0) {
                                    this.gameStats1[0] = (this.gameStats1[0] / this.boxScale) * this.boxScale;
                                }
                            }
                        }
                        if (!isPointerUp()) {
                            this.eE[9] = false;
                        }
                    }
                } else {
                    if (getCurrentXTouch() - getPreviousXTouch() <= -10 || getCurrentXTouch() - getPreviousXTouch() >= 10 || this.isScrolling) {
                        this.isScrolling = true;
                    } else {
                        this.scrollAmount[0] = 0;
                    }
                    if (this.isScrolling) {
                        this.scrollAmount[0] = getCurrentXTouch() - getPreviousXTouch();
                        if (this.scrollAmount[0] != 0 && !this.eE[9]) {
                            this.eE[9] = true;
                        }
                    }
                }
                if (this.scrollAmount[0] < 0) {
                    if (this.hq[0] != (-(this.gameStats1[0] / this.boxScale))) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    }
                    this.gp[3] = false;
                } else if (this.scrollAmount[0] > 0) {
                    if (this.hq[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    }
                    this.gp[3] = false;
                } else if (this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.gp[3]) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    this.gp[3] = true;
                }
                if (this.hq[0] != (-(this.gameStats1[0] / this.boxScale))) {
                    this.hq[0] = -(this.gameStats1[0] / this.boxScale);
                }
                if (this.hq[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
                    this.hq[1] = ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale;
                }
                if ((-(this.gameStats1[0] - (this.boxScale / 2))) / this.boxScale != this.hq[2]) {
                    this.hq[2] = (-(this.gameStats1[0] - (this.boxScale / 2))) / this.boxScale;
                }
                if (!this.eE[9]) {
                    if (this.fx[0] >= 1) {
                        int[] iArr6 = this.fx;
                        iArr6[0] = iArr6[0] + 1;
                        if (this.fx[0] > getLength(dv) - 1) {
                            this.fx[0] = 0;
                            screenTransition();
                            this.eb = true;
                            this.ed = 1;
                            return false;
                        }
                    } else {
                        if (!isPointerDown() || !isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                            this.gp[0] = false;
                        } else if (!this.gp[0]) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gp[0] = true;
                        }
                        if (isPointerUp() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr7 = this.fx;
                            iArr7[0] = iArr7[0] + 1;
                        }
                    }
                }
            }
        }
        return true;
    }

    void titleLoad() {
        this.gI = false;
        aSound.getInstance().stop(-1);
        aSound.getInstance().play(SoundType.TITLE);
        for (int i = 0; i < getLength(this.eM); i++) {
            this.eM[i] = false;
        }
        for (int i2 = 0; i2 < getLength(this.gp); i2++) {
            this.gp[i2] = false;
        }
        this.gp[6] = true;
        //aAd.b().d();
        for (int i3 = 0; i3 < getLength(this.textTextures); i3++) {
            if (this.textTextures[i3].isLoaded()) {
                this.textTextures[i3].reset();
            }
        }
        for (int i4 = 0; i4 < getLength(this.buttonCoordinates1); i4++) {
            for (int i5 = 0; i5 < getLength(this.buttonCoordinates1[i4]); i5++) {
                this.buttonCoordinates1[i4][i5] = 0;
            }
        }
        for (int i6 = 0; i6 < getLength(this.fB); i6++) {
            for (int i7 = 0; i7 < getLength(this.fB[i6]); i7++) {
                this.fB[i6][i7] = 0;
            }
        }
        for (int i8 = 0; i8 < getLength(this.fC); i8++) {
            this.fC[i8] = 0;
        }
        this.textTextures[0].drawText(this.optionText[0], "FONT_SYSTEM_BOLD", 30, 1);
        loadTextures2();
        for (int i9 = 0; i9 < getLength(this.uiTextures); i9++) {
            if (this.uiTextures[i9].isLoaded()) {
                this.uiTextures[i9].reset();
            }
        }
        if (this.settingsMenuTexture[1].isLoaded()) {
            this.settingsMenuTexture[1].reset();
        }
        if (!this.settingsMenuTexture[1].isLoaded()) {
            this.settingsMenuTexture[1].load(MyUtility.getString(String.format("img%03d.png", 100)), MyUtility.getString(String.format("img%03d.imgcut", 100)));
        }
        if (!this.uiTextures[0].isLoaded()) {
            this.uiTextures[0].load(MyUtility.getString(String.format("img%03d.png", 12)), MyUtility.getString(String.format("img%03d.imgcut", 12)));
        }
        if (!this.uiTextures[1].isLoaded()) {
            this.uiTextures[1].load(MyUtility.getString(String.format("img%03d.png", 11)), MyUtility.getString(String.format("img%03d.imgcut", 11)));
        }
        if (!this.uiTextures[2].isLoaded()) {
            this.uiTextures[2].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
        }
        if (!this.uiTextures[3].isLoaded()) {
            this.uiTextures[3].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
        }
        if (!this.uiTextures[4].isLoaded()) {
            this.uiTextures[4].load(MyUtility.getString(String.format("img%03d.png", 7)), MyUtility.getString(String.format("img%03d.imgcut", 7)));
        }
        if (!this.uiTextures[5].isLoaded()) {
            this.uiTextures[5].load(MyUtility.getString(String.format("img%03d.png", 33)), MyUtility.getString(String.format("img%03d.imgcut", 33)));
        }
        if (!this.uiTextures[6].isLoaded()) {
            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 1)), MyUtility.getString(String.format("img%03d.imgcut", 1)));
        }
        if (!this.uiTextures[7].isLoaded()) {
            this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 2)), MyUtility.getString(String.format("img%03d.imgcut", 2)));
        }
        if (!this.uiTextures[8].isLoaded()) {
            this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 19)), MyUtility.getString(String.format("img%03d.imgcut", 19)));
        }
        if (!this.uiTextures[9].isLoaded()) {
            this.uiTextures[9].load(MyUtility.getString(String.format("img%03d.png", 31)), MyUtility.getString(String.format("img%03d.imgcut", 31)));
        }
        for (int i10 = 0; i10 < getLength(this.eE); i10++) {
            this.eE[i10] = false;
        }
        for (int i11 = 0; i11 < getLength(this.blinkFrame); i11++) {
            this.blinkFrame[i11] = 0;
        }
        for (int i12 = 0; i12 < getLength(this.gameStats1); i12++) {
            this.gameStats1[i12] = 0;
        }
        for (int i13 = 0; i13 < getLength(this.fx); i13++) {
            this.fx[i13] = 0;
        }
        for (int i14 = 0; i14 < getLength(this.eK); i14++) {
            this.eK[i14] = 0;
        }
        for (int i15 = 0; i15 < getLength(this.hk); i15++) {
            this.hk[i15] = 0;
        }
        for (int i16 = 0; i16 < getLength(this.fC); i16++) {
            this.fC[i16] = 0;
        }
        for (int i17 = 0; i17 < getLength(this.fy); i17++) {
            this.fy[i17] = 0;
        }
        for (int i18 = 0; i18 < getLength(this.fz); i18++) {
            this.fz[i18] = 0;
        }
        for (int i19 = 0; i19 < getLength(this.gZ); i19++) {
            this.gZ[i19] = 0;
        }
        for (int i20 = 0; i20 < getLength(this.scrollAmount); i20++) {
            this.scrollAmount[i20] = 0;
        }
        for (int i21 = 0; i21 < getLength(this.fR); i21++) {
            this.fR[i21] = 0;
        }
        this.buttonCoordinates1[0][0] = (this.excessWidth / 2) + 289;
        this.buttonCoordinates1[0][1] = 341;
        this.buttonCoordinates1[0][2] = 381;
        this.buttonCoordinates1[0][3] = 88;
        this.buttonCoordinates1[1][0] = (this.excessWidth / 2) + 289;
        this.buttonCoordinates1[1][1] = 433;
        this.buttonCoordinates1[1][2] = 381;
        this.buttonCoordinates1[1][3] = 88;
        this.buttonCoordinates1[2][0] = (this.excessWidth / 2) + 660;
        this.buttonCoordinates1[2][1] = 30;
        this.buttonCoordinates1[2][2] = 150;
        this.buttonCoordinates1[2][3] = 150;
        this.buttonCoordinates1[5][0] = this.excessWidth + 861;
        this.buttonCoordinates1[5][1] = 194;
        this.buttonCoordinates1[5][2] = 95;
        this.buttonCoordinates1[5][3] = 95;
        this.buttonCoordinates1[6][0] = this.excessWidth + 677;
        this.buttonCoordinates1[6][1] = 476;
        this.buttonCoordinates1[6][2] = 287;
        this.buttonCoordinates1[6][3] = 173;
        if (!this.gL) {
            this.gameStats1[0] = getWidth() + 500;
            this.eE[0] = true;
            for (int i22 = 0; i22 < getLength(this.boxSize); i22++) {
                for (int i23 = 0; i23 < getLength(this.boxSize[i22]); i23++) {
                    if (i23 == 0) {
                        this.boxSize[i22][i23] = 229;
                    } else if (i23 == 1) {
                        this.boxSize[i22][i23] = 184;
                    }
                }
            }
            for (int i24 = 0; i24 < getLength(this.boxCounts); i24++) {
                this.boxCounts[i24] = 0;
            }
            this.boxCounts[0] = this.aX + 1;
            if (this.bq[0] >= 48) {
                this.boxCounts[1] = this.aX + 1;
                this.gB[0] = this.aX + 0;
            } else {
                this.boxCounts[1] = 1;
            }
            this.boxSize[0][0] = 328;
            this.boxSize[0][1] = 263;
            this.boxScale = 200;
            this.gameStats1[2] = -(this.boxScale * this.boxCounts[0]);
            this.gameStats1[3] = this.boxScale * 100;
            this.fG[0] = 0;
            this.fG[1] = this.boxCounts[0];
            this.fG[2] = (this.boxScale * 100) + (this.gameStats1[0] / this.boxScale);
            this.fG[3] = 0;
        }
        if (this.gL) {
            this.blinkFrame[0] = getLength(ds) - 1;
            this.gameStats1[2] = -((this.boxScale * this.boxCounts[0]) + (this.boxScale * this.fG[3]));
            this.gameStats1[3] = this.boxScale * 100;
        }
        this.gL = false;
        if (this.eg == 0) {
            this.ee = false;
            this.ef = false;
        } else {
            this.blinkFrame[0] = getLength(ds) - 1;
            this.eg = 0;
            this.gameStats1[0] = 0;
            this.eE[0] = false;
            this.blinkFrame[1] = 89;
            this.fG[0] = 0;
        }
        this.fB[0][0] = (this.excessWidth / 2) + 280;
        this.fB[0][1] = 80;
        this.fB[0][2] = 88;
        this.fB[0][3] = 88;
        this.fB[1][0] = 0;
        this.fB[1][1] = 0;
        this.fB[1][2] = 0;
        this.fB[1][3] = 0;
        this.fB[2][0] = (this.excessWidth / 2) + 535;
        this.fB[2][1] = 276;
        this.fB[2][2] = 106;
        this.fB[2][3] = 88;
        this.fB[3][0] = (((this.excessWidth / 2) + 248) + 252) - 2;
        this.fB[3][1] = 371;
        this.fB[3][2] = 88;
        this.fB[3][3] = 88;
        this.fB[4][0] = (((this.excessWidth / 2) + 248) + 356) - 2;
        this.fB[4][1] = 371;
        this.fB[4][2] = 88;
        this.fB[4][3] = 88;
        this.fB[5][0] = (this.excessWidth / 2) + 248 + 404;
        this.fB[5][1] = 48;
        this.fB[5][2] = 95;
        this.fB[5][3] = 95;
        this.fB[6][0] = (this.excessWidth / 2) + 248 + 40;
        this.fB[6][1] = 456;
        this.fB[6][2] = 381;
        this.fB[6][3] = 88;
        this.fB[7][0] = (this.excessWidth / 2) + 248 + 40;
        this.fB[7][1] = 205;
        this.fB[7][2] = 168;
        this.fB[7][3] = 88;
        this.fB[8][0] = (this.excessWidth / 2) + 288;
        this.fB[8][1] = 276;
        this.fB[8][2] = 170;
        this.fB[8][3] = 88;
        this.fB[9][0] = (this.excessWidth / 2) + 288;
        this.fB[9][1] = 363;
        this.fB[9][2] = 168;
        this.fB[9][3] = 88;
        this.fB[10][0] = (this.excessWidth / 2) + 251;
        this.fB[10][1] = 374;
        this.fB[10][2] = 168;
        this.fB[10][3] = 88;
        this.fB[11][0] = (this.excessWidth / 2) + 541;
        this.fB[11][1] = 374;
        this.fB[11][2] = 168;
        this.fB[11][3] = 88;
        this.fB[12][0] = (this.excessWidth / 2) + 500;
        this.fB[12][1] = 191;
        this.fB[12][2] = 172;
        this.fB[12][3] = 88;
        for (int i25 = 0; i25 < 2; i25++) {
            if (this.bq[i25] >= 48) {
                this.aX = i25 + 1;
                this.bj = 1;
            }
        }
        if (this.aX >= 2) {
            this.aX = 2;
        }
        if (this.aX >= 2) {
            this.bi = ((this.aX - 1) * 10) + 10;
        } else {
            this.bi = 10;
        }
        this.isScrolling = false;
    }

    boolean titleProcess() {
        if (!this.ee) {
            if (!this.eE[0] && !this.eE[1] && !this.eE[2] && !this.eE[3] && !this.eE[4] && !this.eb) {
                if (this.fG[0] == 0) {
                    if (this.fx[0] >= 1) {
                        int[] iArr = this.fx;
                        iArr[0] = iArr[0] + 1;
                        if (this.fx[0] > getLength(dv) - 1) {
                            this.eQ = 0;
                            this.fx[0] = 0;
                            if (this.bq[0] >= 48) {
                                this.eE[1] = true;
                                this.blinkFrame[9] = 0;
                            } else {
                                this.dH = this.bp[this.eQ];
                                this.eb = true;
                                this.ed = 0;
                                this.bg = this.eQ;
                            }
                        }
                    } else if (this.fx[1] >= 1) {
                        int[] iArr2 = this.fx;
                        iArr2[1] = iArr2[1] + 1;
                        if (this.fx[1] > getLength(dv) - 1) {
                            this.fx[1] = 0;
                            this.ee = true;
                            aSound.getInstance().setVolume(50);
                        }
                    } else if (this.fx[6] >= 1) {
                        int[] iArr3 = this.fx;
                        iArr3[6] = iArr3[6] + 1;
                        if (this.fx[6] > getLength(dv) - 1) {
                            this.fx[6] = 0;
                            screenTransition();
                            this.menuType = 1;
                            this.j = true;
                            return false;
                        }
                    } else {
                        if (!isPointerDown() || !isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                            this.gp[0] = false;
                        } else if (!this.gp[0]) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gp[0] = true;
                        }
                        if (!isPointerDown() || !isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3])) {
                            this.gp[1] = false;
                        } else if (!this.gp[1]) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gp[1] = true;
                        }
                        if (this.bq[0] >= 7) {
                            if (!isPointerDown() || !isTouching(this.buttonCoordinates1[6][0], this.buttonCoordinates1[6][1], this.buttonCoordinates1[6][2], this.buttonCoordinates1[6][3])) {
                                this.gp[6] = false;
                            } else if (!this.gp[6]) {
                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                this.gp[6] = true;
                            }
                        }
                        if (isPointerUp() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                            int[] iArr4 = this.fx;
                            iArr4[0] = iArr4[0] + 1;
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        } else if (isPointerUp() && isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3])) {
                            int[] iArr5 = this.fx;
                            iArr5[1] = iArr5[1] + 1;
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        } else if (isPointerUp() && isTouching(this.buttonCoordinates1[6][0], this.buttonCoordinates1[6][1], this.buttonCoordinates1[6][2], this.buttonCoordinates1[6][3]) && this.bq[0] >= 7) {
                            int[] iArr6 = this.fx;
                            iArr6[6] = iArr6[6] + 1;
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        }
                    }
                } else if (this.fG[0] == 1) {
                    int[] iArr7 = this.gameStats1;
                    iArr7[2] = iArr7[2] + this.scrollAmount[0];
                    this.scrollAmount[0] = (int) (this.scrollAmount[0] * 0.9d);
                    if (this.gameStats1[2] > ((this.boxScale / 2) - (this.boxScale * this.boxCounts[0])) - 20) {
                        this.gameStats1[2] = ((this.boxScale / 2) - (this.boxScale * this.boxCounts[0])) - 20;
                        this.gameStats1[3] = this.boxScale * 100;
                        this.scrollAmount[0] = 0;
                    } else if (this.gameStats1[2] < (-((((this.boxScale * (this.boxCounts[0] - 1)) + (this.boxScale * this.boxCounts[1])) + (this.boxScale / 2)) - 20))) {
                        this.gameStats1[2] = -((((this.boxScale * (this.boxCounts[0] - 1)) + (this.boxScale * this.boxCounts[1])) + (this.boxScale / 2)) - 20);
                        this.scrollAmount[0] = 0;
                        this.gameStats1[3] = this.boxScale * 100;
                    }
                    if (this.fx[3] == 0 && this.fx[5] == 0 && isPointerDown()) {
                        if (getCurrentXTouch() - getPreviousXTouch() <= -10 || getCurrentXTouch() - getPreviousXTouch() >= 10 || this.isScrolling) {
                            this.isScrolling = true;
                        } else {
                            this.scrollAmount[0] = 0;
                        }
                        if (this.isScrolling) {
                            this.scrollAmount[0] = getCurrentXTouch() - getPreviousXTouch();
                            if (this.scrollAmount[0] != 0 && !this.eE[9]) {
                                this.eE[9] = true;
                            }
                        }
                    } else {
                        this.isScrolling = false;
                        if ((this.scrollAmount[0] >= 0 && this.scrollAmount[0] < 8) || (this.scrollAmount[0] > -8 && this.scrollAmount[0] <= 0)) {
                            this.scrollAmount[0] = 0;
                            if (this.gameStats1[2] % this.boxScale != 0) {
                                if ((-this.gameStats1[2]) % this.boxScale >= this.boxScale / 2) {
                                    this.gameStats1[2] = this.gameStats1[2] - ((((this.gameStats1[2] % this.boxScale) + this.boxScale) + 4) / 4);
                                    if ((((this.gameStats1[2] % this.boxScale) + this.boxScale) + 4) / 4 == 0) {
                                        this.gameStats1[2] = ((this.gameStats1[2] / this.boxScale) - 1) * this.boxScale;
                                    }
                                } else {
                                    this.gameStats1[2] = this.gameStats1[2] - (((this.gameStats1[2] % this.boxScale) - 4) / 4);
                                    if (((this.gameStats1[2] % this.boxScale) - 4) / 4 == 0) {
                                        this.gameStats1[2] = (this.gameStats1[2] / this.boxScale) * this.boxScale;
                                    }
                                }
                            }
                        }
                        if (!isPointerUp()) {
                            this.eE[9] = false;
                        }
                    }
                    if (this.scrollAmount[0] < 0) {
                        if (this.fG[1] != (-(this.gameStats1[2] / this.boxScale))) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        }
                        this.gp[6] = false;
                    } else if (this.scrollAmount[0] > 0) {
                        if (this.fG[2] != ((this.boxScale * 100) + this.gameStats1[2]) / this.boxScale) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        }
                        this.gp[6] = false;
                    } else if (this.gameStats1[2] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.gp[6]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[6] = true;
                    }
                    if (this.fG[1] != (-(this.gameStats1[2] / this.boxScale))) {
                        this.fG[1] = -(this.gameStats1[2] / this.boxScale);
                    }
                    if (this.fG[2] != ((this.boxScale * 100) + this.gameStats1[2]) / this.boxScale) {
                        this.fG[2] = ((this.boxScale * 100) + this.gameStats1[2]) / this.boxScale;
                    }
                    if ((-this.gameStats1[2]) % this.boxScale >= this.boxScale / 2) {
                        if ((this.fG[1] + 1) - this.boxCounts[0] != this.fG[3]) {
                            this.fG[3] = (this.fG[1] + 1) - this.boxCounts[0];
                        }
                    } else if (this.fG[1] - this.boxCounts[0] != this.fG[3]) {
                        this.fG[3] = this.fG[1] - this.boxCounts[0];
                    }
                    if (!this.eE[9]) {
                        if (this.fx[3] >= 1) {
                            int[] iArr8 = this.fx;
                            iArr8[3] = iArr8[3] + 1;
                            if (this.fx[3] > getLength(dv) - 1) {
                                this.fx[3] = 0;
                                if (this.fG[3] <= this.gB[0]) {
                                    this.eb = true;
                                    this.eQ = this.fG[3];
                                    this.dH = this.bp[this.eQ];
                                    if (this.eQ == 0) {
                                        this.ed = 0;
                                    } else if (this.bq[this.eQ] >= 48) {
                                        this.ed = 0;
                                    } else {
                                        this.ed = 1;
                                        this.hr = true;
                                    }
                                } else if (this.fG[3] - this.gB[0] >= 1) {
                                    aSound.getInstance().stop(-1);
                                    aSound.getInstance().play(SoundType.BATTLE_START);
                                    this.eE[3] = true;
                                }
                            }
                        } else if (this.fx[5] >= 1) {
                            int[] iArr9 = this.fx;
                            iArr9[5] = iArr9[5] + 1;
                            if (this.fx[5] > getLength(dv) - 1) {
                                this.fx[5] = 0;
                                this.ed = 0;
                                this.eE[1] = true;
                                this.blinkFrame[9] = 1;
                            }
                        } else if (this.fx[4] >= 1) {
                            int[] iArr10 = this.fx;
                            iArr10[4] = iArr10[4] + 1;
                            if (this.fx[4] > getLength(dv) - 1) {
                                this.fx[4] = 0;
                                if (!MyUtility.isConnected()) {
                                    MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                                } else if (this.aW != 0) {
                                    aScoreUploader.getInstance().configureLeaderboard("battlecats_score", this.aW);
                                } else {
                                    aScoreUploader.getInstance().viewLeaderboard("battlecats_score");
                                }
                            }
                        } else {
                            if (this.gameStats1[2] % this.boxScale != 0 || this.scrollAmount[0] != 0 || !isPointerUp() || !isTouching((getWidth() / 2) - 164, 257, 328, 263)) {
                                this.gp[3] = false;
                            } else if (!this.gp[3]) {
                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                this.gp[3] = true;
                            }
                            if (!isPointerDown() || !isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                                this.gp[5] = false;
                            } else if (!this.gp[5]) {
                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                this.gp[5] = true;
                            }
                            if (this.fG[3] - this.gB[0] >= 1 && this.gameStats1[2] % this.boxScale == 0 && this.scrollAmount[0] == 0 && isPointerUp() && isTouching((((getWidth() / 2) - 164) + 271) - 40, 428, 68, 68)) {
                                int[] iArr11 = this.fx;
                                iArr11[4] = iArr11[4] + 1;
                            }
                            if (this.fx[4] == 0) {
                                if (this.gameStats1[2] % this.boxScale == 0 && this.scrollAmount[0] == 0 && isPointerUp() && isTouching((getWidth() / 2) - 164, 257, 328, 263)) {
                                    int[] iArr12 = this.fx;
                                    iArr12[3] = iArr12[3] + 1;
                                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                                    int[] iArr13 = this.fx;
                                    iArr13[5] = iArr13[5] + 1;
                                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                } else if (isBackPressed()) {
                                    this.fx[5] = 0;
                                    this.ed = 0;
                                    this.eE[1] = true;
                                    this.blinkFrame[9] = 1;
                                }
                            }
                        }
                    }
                }
            }
            if (this.eE[1]) {
                this.blinkFrame[1] -= 8;
                if (this.blinkFrame[9] == 0) {
                    if (this.blinkFrame[1] <= 0) {
                        this.blinkFrame[1] = 0;
                    }
                    int[] iArr14 = this.blinkFrame;
                    iArr14[4] = iArr14[4] + 1;
                    if (this.blinkFrame[4] == 1) {
                        this.gameStats1[0] = 10;
                    } else if (this.blinkFrame[4] == 2) {
                        this.gameStats1[0] = 25;
                    } else if (this.blinkFrame[4] == 3) {
                        this.gameStats1[0] = 30;
                    } else if (this.blinkFrame[4] >= 1) {
                        int[] iArr15 = this.gameStats1;
                        iArr15[0] = iArr15[0] - this.gameStats1[1];
                        int[] iArr16 = this.gameStats1;
                        iArr16[1] = iArr16[1] + this.gameStats1[1] + 1;
                        if (this.gameStats1[1] >= getWidth() + getWidth() + 200) {
                            this.gameStats1[0] = getWidth() + getWidth() + 200;
                            this.gameStats1[1] = 0;
                            if (this.fG[0] == 0) {
                                this.fG[0] = 1;
                            } else if (this.fG[0] == 1) {
                                this.fG[0] = 0;
                            }
                            this.blinkFrame[4] = 0;
                            this.eE[2] = true;
                            this.eE[1] = false;
                            this.blinkFrame[1] = 0;
                            for (int i = 0; i < getLength(this.boxSize); i++) {
                                for (int i2 = 0; i2 < getLength(this.boxSize[i]); i2++) {
                                    if (i2 == 0) {
                                        this.boxSize[i][i2] = 229;
                                    } else if (i2 == 1) {
                                        this.boxSize[i][i2] = 184;
                                    }
                                }
                            }
                            for (int i3 = 0; i3 < getLength(this.boxCounts); i3++) {
                                this.boxCounts[i3] = 0;
                            }
                            this.boxCounts[0] = 2;
                            if (this.bq[0] >= 48) {
                                this.boxCounts[1] = this.aX + 2;
                                this.gB[0] = this.aX + 0;
                            } else {
                                this.boxCounts[1] = 1;
                            }
                            this.boxSize[0][0] = 328;
                            this.boxSize[0][1] = 263;
                            this.boxScale = 200;
                            this.gameStats1[2] = -((this.boxScale * this.boxCounts[0]) + (this.boxScale * this.bg));
                            this.gameStats1[3] = this.boxScale * 100;
                            this.fG[1] = this.boxCounts[0] + this.bg;
                            this.fG[2] = (this.boxScale * 100) + (this.gameStats1[0] / this.boxScale);
                            this.fG[3] = 0;
                            this.gp[6] = true;
                        }
                    }
                } else if (this.blinkFrame[9] == 1) {
                    if (this.blinkFrame[1] <= 0) {
                        this.blinkFrame[1] = 0;
                    }
                    int[] iArr17 = this.blinkFrame;
                    iArr17[4] = iArr17[4] + 1;
                    if (this.blinkFrame[4] == 1) {
                        this.gameStats1[0] = -10;
                    } else if (this.blinkFrame[4] == 2) {
                        this.gameStats1[0] = -25;
                    } else if (this.blinkFrame[4] == 3) {
                        this.gameStats1[0] = -30;
                    } else if (this.blinkFrame[4] >= 1) {
                        int[] iArr18 = this.gameStats1;
                        iArr18[0] = iArr18[0] + this.gameStats1[1];
                        int[] iArr19 = this.gameStats1;
                        iArr19[1] = iArr19[1] + this.gameStats1[1] + 1;
                        if (this.gameStats1[1] >= getWidth() + getWidth() + 200) {
                            this.gameStats1[0] = (-getWidth()) - 200;
                            this.gameStats1[1] = 0;
                            if (this.fG[0] == 0) {
                                this.fG[0] = 1;
                            } else if (this.fG[0] == 1) {
                                this.fG[0] = 0;
                            }
                            this.blinkFrame[4] = 0;
                            this.eE[2] = true;
                            this.eE[1] = false;
                            this.blinkFrame[1] = 0;
                            for (int i4 = 0; i4 < getLength(this.boxSize); i4++) {
                                for (int i5 = 0; i5 < getLength(this.boxSize[i4]); i5++) {
                                    if (i5 == 0) {
                                        this.boxSize[i4][i5] = 229;
                                    } else if (i5 == 1) {
                                        this.boxSize[i4][i5] = 184;
                                    }
                                }
                            }
                            for (int i6 = 0; i6 < getLength(this.boxCounts); i6++) {
                                this.boxCounts[i6] = 0;
                            }
                            this.boxCounts[0] = 2;
                            if (this.bq[0] >= 48) {
                                this.boxCounts[1] = this.aX + 2;
                                this.gB[0] = this.aX + 0;
                            } else {
                                this.boxCounts[1] = 1;
                            }
                            this.boxSize[0][0] = 328;
                            this.boxSize[0][1] = 263;
                            this.boxScale = 200;
                            this.gameStats1[2] = -((this.boxScale * this.boxCounts[0]) + (this.boxScale * this.bg));
                            this.gameStats1[3] = this.boxScale * 100;
                            this.fG[1] = this.boxCounts[0] + this.bg;
                            this.fG[2] = (this.boxScale * 100) + (this.gameStats1[0] / this.boxScale);
                            this.fG[3] = 0;
                            this.gp[6] = true;
                        }
                    }
                }
            }
            if (this.eE[2]) {
                this.gameStats1[0] = (int) (this.gameStats1[0] * 0.6d);
                if (this.gameStats1[0] == 0) {
                    this.eE[2] = false;
                }
            }
            if (this.eE[3]) {
                if (!this.eE[4] && this.fR[0] == 0) {
                    int[] iArr20 = this.blinkFrame;
                    iArr20[7] = iArr20[7] + 1;
                    if (this.blinkFrame[7] >= getLength(cu)) {
                        this.fR[0] = 1;
                        this.blinkFrame[7] = 0;
                        this.eE[4] = true;
                    }
                }
                this.gameStats1[4] = (this.gameStats1[4] * 2) + 1;
                if (this.gameStats1[4] >= getWidth()) {
                    this.gameStats1[4] = getWidth();
                }
            }
            if (this.eE[4]) {
                int[] iArr21 = this.blinkFrame;
                iArr21[8] = iArr21[8] + 1;
                if (this.blinkFrame[8] >= 10) {
                    int[] iArr22 = this.blinkFrame;
                    iArr22[7] = iArr22[7] + 1;
                    if (this.blinkFrame[7] >= getLength(cv)) {
                        this.fR[0] = 2;
                    }
                    if (this.blinkFrame[7] >= 60) {
                        this.eQ = 0;
                        this.eb = true;
                        this.ed = 1;
                    }
                }
            }
            if (!this.eb && this.eE[0]) {
                int[] iArr23 = this.blinkFrame;
                iArr23[0] = iArr23[0] + 1;
                if (this.blinkFrame[0] > getLength(ds) - 1) {
                    this.blinkFrame[0] = getLength(ds) - 1;
                    this.gameStats1[0] = (this.gameStats1[0] * 100) / 150;
                    if (this.gameStats1[0] <= 0) {
                        this.eE[0] = false;
                    }
                }
            }
            if (!this.eE[0] && !this.eE[1] && !this.eE[2]) {
                int[] iArr24 = this.blinkFrame;
                iArr24[1] = iArr24[1] + 4;
                if (this.blinkFrame[1] >= 89) {
                    this.blinkFrame[1] = 89;
                }
            }
            for (int i7 = 0; i7 < getLength(this.boxSize); i7++) {
                for (int i8 = 0; i8 < getLength(this.boxSize[i7]); i8++) {
                    if (i8 == 0) {
                        if (i7 == this.fG[1]) {
                            this.boxSize[i7][i8] = (((((this.gameStats1[2] % this.boxScale) * 100) / this.boxScale) * 99) / 100) + 328;
                            if (this.gameStats1[2] > 0) {
                                this.boxSize[i7][i8] = 328 - (((((this.gameStats1[2] % this.boxScale) * 100) / this.boxScale) * 99) / 100);
                            }
                        } else if (i7 == this.fG[1] + 1) {
                            this.boxSize[i7][i8] = 229 - (((((this.gameStats1[2] % this.boxScale) * 100) / this.boxScale) * 99) / 100);
                        } else {
                            this.boxSize[i7][i8] = 229;
                        }
                        if (this.boxSize[i7][i8] >= 328) {
                            this.boxSize[i7][i8] = 328;
                        } else if (this.boxSize[i7][i8] <= 229) {
                            this.boxSize[i7][i8] = 229;
                        }
                    } else if (i8 == 1) {
                        if (i7 == this.fG[1]) {
                            this.boxSize[i7][i8] = (((((this.gameStats1[2] % this.boxScale) * 100) / this.boxScale) * 79) / 100) + 263;
                            if (this.gameStats1[2] > 0) {
                                this.boxSize[i7][i8] = 263 - (((((this.gameStats1[2] % this.boxScale) * 100) / this.boxScale) * 79) / 100);
                            }
                        } else if (i7 == this.fG[1] + 1) {
                            this.boxSize[i7][i8] = 184 - (((((this.gameStats1[2] % this.boxScale) * 100) / this.boxScale) * 79) / 100);
                        } else {
                            this.boxSize[i7][i8] = 184;
                        }
                        if (this.boxSize[i7][i8] >= 263) {
                            this.boxSize[i7][i8] = 263;
                        } else if (this.boxSize[i7][i8] <= 184) {
                            this.boxSize[i7][i8] = 184;
                        }
                    }
                }
            }
            int[] iArr25 = this.blinkFrame;
            iArr25[6] = iArr25[6] + 1;
        } else if (this.ee && !this.eb) {
            if (this.fC[1] >= 1) {
                int[] iArr26 = this.fC;
                iArr26[1] = iArr26[1] + 1;
                if (this.fC[1] > getLength(dv) - 1) {
                    this.fC[1] = 0;
                    if (MyUtility.isConnected()) {
                        this.t = true;
                        MyUtility.getInstance().addProgressDialog(MyUtility.getString("connecting"));
                        MyUtility.getInstance().addAlertAppliPage("facebook", this.r);
                    } else {
                        MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                    }
                }
            } else if (this.fC[2] >= 1) {
                int[] iArr27 = this.fC;
                iArr27[2] = iArr27[2] + 1;
                if (this.fC[2] > getLength(dv) - 1) {
                    this.fC[2] = 0;
                    //if (aFacebook.getInstance().e()) {
                    //    aFacebook.getInstance().d();
                   // } else {
                        //aFacebook.getInstance().c();
                    //}
                }
            } else if (this.fC[3] >= 1) {
                int[] iArr28 = this.fC;
                iArr28[3] = iArr28[3] + 1;
                if (this.fC[3] > getLength(dv) - 1) {
                    this.fC[3] = 0;
                    if (aSound.getInstance().isMutedBGM()) {
                        aSound.getInstance().muteBGM(false);
                        aSound.getInstance().reloadSounds();
                    } else {
                        aSound.getInstance().muteBGM(true);
                    }
                }
            } else if (this.fC[4] >= 1) {
                int[] iArr29 = this.fC;
                iArr29[4] = iArr29[4] + 1;
                if (this.fC[4] > getLength(dv) - 1) {
                    this.fC[4] = 0;
                    if (aSound.getInstance().isMutedSE()) {
                        aSound.getInstance().muteSE(false);
                    } else {
                        aSound.getInstance().muteSE(true);
                    }
                }
            } else if (this.fC[5] >= 1) {
                int[] iArr30 = this.fC;
                iArr30[5] = iArr30[5] + 1;
                if (this.fC[5] > getLength(dv) - 1) {
                    this.fC[5] = 0;
                    this.ee = false;
                    this.ef = false;
                    aSound.getInstance().setVolume(100);
                }
            } else if (this.fC[6] >= 1) {
                int[] iArr31 = this.fC;
                iArr31[6] = iArr31[6] + 1;
                if (this.fC[6] > getLength(dv) - 1) {
                    this.fC[6] = 0;
                    screenTransition();
                    this.j = true;
                    this.menuType = 3;
                    return false;
                }
            } else if (this.fC[7] >= 1) {
                int[] iArr32 = this.fC;
                iArr32[7] = iArr32[7] + 1;
                if (this.fC[7] > getLength(dv) - 1) {
                    this.fC[7] = 0;
                    screenTransition();
                    this.j = true;
                    this.menuType = 2;
                    return false;
                }
            } else if (this.fC[8] >= 1) {
                int[] iArr33 = this.fC;
                iArr33[8] = iArr33[8] + 1;
                if (this.fC[8] > getLength(dv) - 1) {
                    this.fC[8] = 0;
                    this.eg = 1;
                    this.eb = true;
                    this.ed = 0;
                }
            } else if (this.fC[9] >= 1) {
                int[] iArr34 = this.fC;
                iArr34[9] = iArr34[9] + 1;
                if (this.fC[9] > getLength(dv) - 1) {
                    this.fC[9] = 0;
                    if (this.bj != 0) {
                        this.eg = 2;
                        this.eb = true;
                        this.ed = 0;
                    }
                }
            } else if (this.fC[12] >= 1) {
                int[] iArr35 = this.fC;
                iArr35[12] = iArr35[12] + 1;
                if (this.fC[12] > getLength(dv) - 1) {
                    this.fC[12] = 0;
                    if (MyUtility.isConnected()) {
                        this.t = true;
                        this.o = true;
                        MyUtility.getInstance().addProgressDialog(MyUtility.getString("connecting"));
                        MyUtility.getInstance().addAlertAppliPage("facebook", this.r);
                    } else {
                        MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                    }
                }
            } else {
                if (this.ef) {
                    if (!isPointerDown() || !isTouching(this.fB[10][0], this.fB[10][1], this.fB[10][2], this.fB[10][3])) {
                        this.gp[10] = false;
                    } else if (!this.gp[10]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[10] = true;
                    }
                    if (!isPointerDown() || !isTouching(this.fB[11][0], this.fB[11][1], this.fB[11][2], this.fB[11][3])) {
                        this.gp[11] = false;
                    } else if (!this.gp[11]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[11] = true;
                    }
                } else {
                    for (int i9 = 0; i9 < getLength(this.fB); i9++) {
                        if (i9 != 0 && i9 != 1 && ((i9 != 2) && i9 != 5 && ((i9 != 9 || this.bj != 0) && i9 != 10 && i9 != 11))) {
                            if (!isPointerDown() || !isTouching(this.fB[i9][0], this.fB[i9][1], this.fB[i9][2], this.fB[i9][3])) {
                                this.gp[i9] = false;
                            } else if (!this.gp[i9]) {
                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                this.gp[i9] = true;
                            }
                        }
                    }
                }
                if (!isPointerDown() || !isTouching(this.fB[5][0], this.fB[5][1], this.fB[5][2], this.fB[5][3])) {
                    this.gp[5] = false;
                } else if (!this.gp[5]) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    this.gp[5] = true;
                }
                if (this.ef) {
                    if (isPointerUp() && isTouching(this.fB[10][0], this.fB[10][1], this.fB[10][2], this.fB[10][3])) {
                        int[] iArr36 = this.fC;
                        iArr36[10] = iArr36[10] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isPointerUp() && isTouching(this.fB[11][0], this.fB[11][1], this.fB[11][2], this.fB[11][3])) {
                        int[] iArr37 = this.fC;
                        iArr37[11] = iArr37[11] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isPointerUp() && isTouching(this.fB[5][0], this.fB[5][1], this.fB[5][2], this.fB[5][3])) {
                        int[] iArr38 = this.fC;
                        iArr38[5] = iArr38[5] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isBackPressed()) {
                        if (this.ef) {
                            this.fC[11] = 0;
                            this.ef = false;
                        } else {
                            this.ee = false;
                            this.ef = false;
                            aSound.getInstance().setVolume(100);
                        }
                    }
                } else if ((!isPointerUp() || !isTouching(this.fB[0][0], this.fB[0][1], this.fB[0][2], this.fB[0][3])) && (!isPointerUp() || !isTouching(this.fB[1][0], this.fB[1][1], this.fB[1][2], this.fB[1][3]))) {
                    if (isPointerUp() && isTouching(this.fB[2][0], this.fB[2][1], this.fB[2][2], this.fB[2][3])) {
                        int[] iArr39 = this.fC;
                        iArr39[2] = iArr39[2] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isPointerUp() && isTouching(this.fB[3][0], this.fB[3][1], this.fB[3][2], this.fB[3][3])) {
                        int[] iArr40 = this.fC;
                        iArr40[3] = iArr40[3] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isPointerUp() && isTouching(this.fB[4][0], this.fB[4][1], this.fB[4][2], this.fB[4][3])) {
                        int[] iArr41 = this.fC;
                        iArr41[4] = iArr41[4] + 1;
                    } else if (isPointerUp() && isTouching(this.fB[6][0], this.fB[6][1], this.fB[6][2], this.fB[6][3])) {
                        int[] iArr42 = this.fC;
                        iArr42[6] = iArr42[6] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isPointerUp() && isTouching(this.fB[7][0], this.fB[7][1], this.fB[7][2], this.fB[7][3])) {
                        int[] iArr43 = this.fC;
                        iArr43[7] = iArr43[7] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isPointerUp() && isTouching(this.fB[8][0], this.fB[8][1], this.fB[8][2], this.fB[8][3])) {
                        int[] iArr44 = this.fC;
                        iArr44[8] = iArr44[8] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isPointerUp() && isTouching(this.fB[9][0], this.fB[9][1], this.fB[9][2], this.fB[9][3]) && this.bj != 0) {
                        if (this.bj != 0) {
                            int[] iArr45 = this.fC;
                            iArr45[9] = iArr45[9] + 1;
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        }
                    } else if (isPointerUp() && isTouching(this.fB[12][0], this.fB[12][1], this.fB[12][2], this.fB[12][3])) {
                        int[] iArr46 = this.fC;
                        iArr46[12] = iArr46[12] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isPointerUp() && isTouching(this.fB[5][0], this.fB[5][1], this.fB[5][2], this.fB[5][3])) {
                        int[] iArr47 = this.fC;
                        iArr47[5] = iArr47[5] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isBackPressed()) {
                        if (this.ef) {
                            this.fC[11] = 0;
                            this.ef = false;
                        } else {
                            this.ee = false;
                            this.ef = false;
                            aSound.getInstance().setVolume(100);
                        }
                    }
                }
            }
        }
        int[] iArr48 = this.blinkFrame;
        iArr48[5] = iArr48[5] + 1;
        return true;
    }

    void treasureLoad() {
        //aAd.b().f();
        loadTextures2();
        for (int i = 6; i < getLength(this.uiTextures) - 6; i++) {
            if (this.uiTextures[i].isLoaded()) {
                this.uiTextures[i].reset();
            }
        }
        for (int i2 = 0; i2 < getLength(this.gp); i2++) {
            this.gp[i2] = false;
        }
        this.gp[3] = true;
        for (int i3 = 0; i3 < getLength(this.buttonCoordinates1); i3++) {
            for (int i4 = 0; i4 < getLength(this.buttonCoordinates1[i3]); i4++) {
                this.buttonCoordinates1[i3][i4] = 0;
            }
        }
        this.fR[0] = 0;
        U();
        for (int i5 = 0; i5 < getLength(this.blinkFrame); i5++) {
            this.blinkFrame[i5] = 0;
        }
        if (this.previousScreen == 0) {
            this.blinkFrame[0] = getLength(cu) - 1;
        }
        this.buttonCoordinates1[1][0] = 36;
        this.buttonCoordinates1[1][1] = 171;
        this.buttonCoordinates1[1][2] = 88;
        this.buttonCoordinates1[1][3] = 97;
        this.buttonCoordinates1[2][0] = this.excessWidth + 836;
        this.buttonCoordinates1[2][1] = 171;
        this.buttonCoordinates1[2][2] = 88;
        this.buttonCoordinates1[2][3] = 97;
        if (this.previousScreen == 0) {
            for (int i6 = 0; i6 < getLength(this.fq); i6++) {
                this.fq[i6] = 0;
            }
        }
        for (int i7 = 0; i7 < getLength(this.gameStats1); i7++) {
            this.gameStats1[i7] = 0;
        }
        for (int i8 = 0; i8 < getLength(this.ei); i8++) {
            this.ei[i8] = 0;
        }
        for (int i9 = 0; i9 < getLength(this.boxCounts); i9++) {
            this.boxCounts[i9] = 0;
        }
        for (int i10 = 0; i10 < getLength(this.scrollAmount); i10++) {
            this.scrollAmount[i10] = 0;
        }
        this.boxCounts[0] = 0;
        this.boxCounts[1] = 11;
        this.boxCounts[2] = 0;
        this.boxScale = getWidth();
        this.gameStats1[0] = -(this.boxScale * this.boxCounts[0]);
        this.fr = -1;
        h(this.fq[2]);
        this.buttonCoordinates1[5][0] = 4;
        this.buttonCoordinates1[5][1] = 541;
        this.buttonCoordinates1[5][2] = 95;
        this.buttonCoordinates1[5][3] = 95;
        this.buttonCoordinates1[13][0] = this.excessWidth + 344;
        this.buttonCoordinates1[13][1] = 560;
        this.buttonCoordinates1[13][2] = 247;
        this.buttonCoordinates1[13][3] = 88;
        this.buttonCoordinates1[14][0] = this.excessWidth + 680;
        this.buttonCoordinates1[14][1] = 552;
        this.buttonCoordinates1[14][2] = 88;
        this.buttonCoordinates1[14][3] = 88;
        this.buttonCoordinates1[15][0] = this.excessWidth + 626;
        this.buttonCoordinates1[15][1] = 0;
        this.buttonCoordinates1[15][2] = 88;
        this.buttonCoordinates1[15][3] = 88;
        for (int i11 = 0; i11 < getLength(this.gm); i11++) {
            this.gm[i11] = 0;
        }
        this.gm[1] = 297;
        for (int i12 = 0; i12 < getLength(this.fx); i12++) {
            this.fx[i12] = 0;
        }
        for (int i13 = 0; i13 < getLength(this.eK); i13++) {
            this.eK[i13] = 0;
        }
        for (int i14 = 0; i14 < getLength(this.hk); i14++) {
            this.hk[i14] = 0;
        }
        for (int i15 = 0; i15 < getLength(this.fC); i15++) {
            this.fC[i15] = 0;
        }
        for (int i16 = 0; i16 < getLength(this.fy); i16++) {
            this.fy[i16] = 0;
        }
        for (int i17 = 0; i17 < getLength(this.fz); i17++) {
            this.fz[i17] = 0;
        }
        for (int i18 = 0; i18 < getLength(this.gZ); i18++) {
            this.gZ[i18] = 0;
        }
        if (this.uiTextures[6].isLoaded()) {
            this.uiTextures[6].reset();
        }
        if (!this.uiTextures[6].isLoaded()) {
            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 17)), MyUtility.getString(String.format("img%03d.imgcut", 17)));
        }
        if (this.uiTextures[8].isLoaded()) {
            this.uiTextures[8].reset();
        }
        if (!this.uiTextures[8].isLoaded()) {
            this.uiTextures[8].load(MyUtility.getString(String.format("ot%03d_c.png", 11)), MyUtility.getString(String.format("ot%03d_c.imgcut", 11)));
        }
        for (int i19 = 0; i19 < getLength(this.eE); i19++) {
            this.eE[i19] = false;
        }
        this.eE[0] = true;
        this.isScrolling = false;
    }

    boolean treasureProcess() {
        int[] iArr = this.blinkFrame;
        iArr[3] = iArr[3] + 1;
        if (!this.eE[0] && !this.eE[1] && !this.eb && !this.eE[13]) {
            int[] iArr2 = this.gameStats1;
            iArr2[0] = iArr2[0] + this.scrollAmount[0];
            int[] iArr3 = this.gameStats1;
            iArr3[1] = iArr3[1] - this.scrollAmount[0];
            this.scrollAmount[0] = (int) (this.scrollAmount[0] * 0.9d);
            if (this.gameStats1[0] >= (this.boxScale / 2) - 20) {
                this.gameStats1[0] = (this.boxScale / 2) - 20;
                this.gameStats1[1] = this.boxScale * 100;
                this.scrollAmount[0] = 0;
            } else if (this.gameStats1[0] < (-((((this.boxScale * ((this.boxCounts[0] + this.boxCounts[1]) + this.boxCounts[2])) - this.boxScale) + (this.boxScale / 2)) - 20))) {
                this.gameStats1[0] = -((((this.boxScale * ((this.boxCounts[0] + this.boxCounts[1]) + this.boxCounts[2])) - this.boxScale) + (this.boxScale / 2)) - 20);
                this.scrollAmount[0] = 0;
                this.gameStats1[1] = this.boxScale * 100;
            }
            if (!isPointerDown() || this.eE[5]) {
                this.isScrolling = false;
                if ((this.scrollAmount[0] >= 0 && this.scrollAmount[0] < 8) || (this.scrollAmount[0] > -8 && this.scrollAmount[0] <= 0)) {
                    this.scrollAmount[0] = 0;
                    if (this.gameStats1[0] % this.boxScale != 0) {
                        if ((-this.gameStats1[0]) >= 0) {
                            if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
                                this.gameStats1[0] = this.gameStats1[0] - ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4);
                                if ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4 == 0) {
                                    this.gameStats1[0] = ((this.gameStats1[0] / this.boxScale) - 1) * this.boxScale;
                                }
                            } else {
                                this.gameStats1[0] = this.gameStats1[0] - (((this.gameStats1[0] % this.boxScale) - 4) / 4);
                                if (((this.gameStats1[0] % this.boxScale) - 4) / 4 == 0) {
                                    this.gameStats1[0] = (this.gameStats1[0] / this.boxScale) * this.boxScale;
                                }
                            }
                        } else if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
                            this.gameStats1[0] = this.gameStats1[0] - ((((this.gameStats1[0] % this.boxScale) + this.boxScale) - 4) / 4);
                            if ((((this.gameStats1[0] % this.boxScale) + this.boxScale) - 4) / 4 == 0) {
                                this.gameStats1[0] = ((this.gameStats1[0] / this.boxScale) - 1) * this.boxScale;
                            }
                        } else {
                            this.gameStats1[0] = this.gameStats1[0] - (((this.gameStats1[0] % this.boxScale) + 4) / 4);
                            if (((this.gameStats1[0] % this.boxScale) + 4) / 4 == 0) {
                                this.gameStats1[0] = (this.gameStats1[0] / this.boxScale) * this.boxScale;
                            }
                        }
                    }
                    if (!isPointerUp()) {
                        this.eE[9] = false;
                    }
                }
            } else {
                if (getCurrentXTouch() - getPreviousXTouch() <= -10 || getCurrentXTouch() - getPreviousXTouch() >= 10 || this.isScrolling) {
                    this.isScrolling = true;
                } else {
                    this.scrollAmount[0] = 0;
                }
                if (this.isScrolling) {
                    this.scrollAmount[0] = getCurrentXTouch() - getPreviousXTouch();
                    if (this.scrollAmount[0] != 0 && !this.eE[9]) {
                        this.eE[9] = true;
                    }
                }
            }
            if (this.scrollAmount[0] < 0) {
                if (this.fq[0] != (-(this.gameStats1[0] / this.boxScale))) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                this.gp[3] = false;
            } else if (this.scrollAmount[0] > 0) {
                if (this.fq[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                this.gp[3] = false;
            } else if (this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.gp[3]) {
                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                this.gp[3] = true;
            }
            if (this.fq[0] != (-(this.gameStats1[0] / this.boxScale)) && (-(this.gameStats1[0] / this.boxScale)) >= 0) {
                this.fq[0] = -(this.gameStats1[0] / this.boxScale);
            }
            if (this.fq[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
                this.fq[1] = ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale;
            }
            if ((-(this.gameStats1[0] - (this.boxScale / 2))) / this.boxScale != this.fq[2]) {
                this.fq[2] = (-(this.gameStats1[0] - (this.boxScale / 2))) / this.boxScale;
                this.fr = -1;
                this.fq[3] = 0;
            }
            if (!this.gu && !this.eb && !this.eE[9]) {
                if (this.fx[5] >= 1) {
                    int[] iArr4 = this.fx;
                    iArr4[5] = iArr4[5] + 1;
                    if (this.fx[5] > getLength(dv) - 1) {
                        this.fx[5] = 0;
                        this.eE[1] = true;
                    }
                } else if (this.fx[13] >= 1) {
                    int[] iArr5 = this.fx;
                    iArr5[13] = iArr5[13] + 1;
                    if (this.fx[13] > getLength(dv) - 1) {
                        this.fx[13] = 0;
                        if (this.be >= 1) {
                            this.eE[13] = true;
                        }
                    }
                } else if (this.fx[14] >= 1) {
                    int[] iArr6 = this.fx;
                    iArr6[14] = iArr6[14] + 1;
                    if (this.fx[14] > getLength(dv) - 1) {
                        this.fx[14] = 0;
                        if (this.bB[8] == 0) {
                            screenTransition();
                            this.bB[8] = 1;
                            this.gU = true;
                            for (int i = 0; i < getLength(this.gV); i++) {
                                this.gV[i] = 0;
                            }
                            aSound.getInstance().setVolume(50);
                            return false;
                        } else if (this.catfood >= 900000) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 10000;
                            return false;
                        } else {
                            screenTransition();
                            this.menuType = 0;
                            this.j = true;
                            return false;
                        }
                    }
                } else {
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                        this.gp[5] = false;
                    } else if (!this.gp[5]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[5] = true;
                    }
                    if (isPointerUp() && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                        int[] iArr7 = this.fx;
                        iArr7[5] = iArr7[5] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isBackPressed()) {
                        this.eE[1] = true;
                    } else if (isPointerUp() && isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3])) {
                        if (this.bf >= 1) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr8 = this.fx;
                            iArr8[14] = iArr8[14] + 1;
                        }
                    } else if (!isPointerDown() || this.eE[9]) {
                        this.eE[5] = false;
                    } else {
                        for (int i2 = 0; i2 < cy[this.fq[2]]; i2++) {
                            if (isTouching(((getWidth() / 2) - 254) + ((i2 % 4) * 127) + 8, (((i2 / 4) * 90) + 342) - 6, 112, 88) && this.fq[3] != i2) {
                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                this.fq[3] = i2;
                                this.eE[5] = true;
                            }
                        }
                    }
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) || this.bf < 1) {
                        this.gp[14] = false;
                    } else if (!this.gp[14]) {
                        this.gp[14] = true;
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    }
                }
            }
        }
        if (this.eE[0]) {
            int[] iArr9 = this.blinkFrame;
            iArr9[2] = iArr9[2] + 1;
            this.gm[0] = (this.gm[0] * 2) + 1;
            if (this.gm[0] >= 297) {
                this.gm[0] = 297;
                this.gm[1] = this.gm[1] / 2;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = getWidth();
                if (this.gm[1] <= 0) {
                    this.eE[0] = false;
                    this.blinkFrame[2] = 0;
                    this.previousScreen = 0;
                }
            } else {
                this.fP = fM[this.blinkFrame[2]];
            }
        } else if (this.eE[1]) {
            int[] iArr10 = this.blinkFrame;
            iArr10[2] = iArr10[2] + 1;
            this.gm[1] = (this.gm[1] * 2) + 1;
            if (this.gm[1] >= 297) {
                this.gm[1] = 297;
                this.gm[0] = this.gm[0] / 2;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = 0;
                if (this.gm[0] <= 0) {
                    this.blinkFrame[2] = 0;
                    screenTransition();
                    this.setScreenType(ScreenType.CAT_BASE);
                    this.screenLoadState = -1;
                    this.eE[1] = false;
                    return false;
                }
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
        }
        int[] iArr11 = this.blinkFrame;
        iArr11[4] = iArr11[4] + 1;
        this.blinkFrame[0] -= 1;
        if (this.blinkFrame[0] <= 0) {
            this.blinkFrame[0] = 0;
        }
        if (this.eE[13]) {
            int[] iArr12 = this.blinkFrame;
            iArr12[2] = iArr12[2] + 1;
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.fP = 0;
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
            if (this.blinkFrame[2] > getLength(fM)) {
                this.fP = 0;
                this.blinkFrame[2] = 0;
                screenTransition();
                this.setScreenType(ScreenType.ITEM_SHOP);
                this.screenLoadState = -1;
                this.previousScreen = 4;
                return false;
            }
        }
        if (this.eE[0] || this.eE[1] || this.eE[13] || this.gF[0] || this.gF[1] || this.eb || this.gI || this.eE[9]) {
            if (this.fx[5] == 0 && !this.eE[1]) {
                this.eE[10] = false;
            }
        } else if ((isPointerDown() || isPointerUp()) && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
            this.eE[10] = true;
        } else if (this.fx[5] == 0 && !this.eE[1]) {
            this.eE[10] = false;
        }
        h(this.fq[2]);
        return true;
    }

    void G() {
        int[] iArr = this.gV;
        iArr[0] = iArr[0] + 1;
        if (this.gV[0] == 1) {
            aSound.getInstance().play(SoundType.POPUP);
        }
        int[] iArr2 = this.gV;
        iArr2[3] = iArr2[3] + 1;
        if (this.bB[4] == 1) {
            float[] fArr = this.hb;
            fArr[0] = fArr[0] + 0.5f;
        }
        if (this.bB[3] == 1) {
            if (this.gV[1] >= 20) {
                int[] iArr3 = this.gV;
                iArr3[2] = iArr3[2] + 4;
                if (this.gV[2] >= 100) {
                    this.gV[2] = 100;
                    if (this.gW == 0) {
                        if (!this.eE[0]) {
                            this.el[0] = 1;
                            this.eD[6] = 1;
                        } else if (this.el[0] == 1) {
                            if (this.eD[6] == 0) {
                                this.el[0] = -1;
                            }
                        } else if (this.el[0] == -1 && this.eD[6] == 1) {
                            this.el[0] = 1;
                        }
                        this.scrollAmount[0] = 0;
                        this.eE[0] = true;
                        this.eE[2] = true;
                    }
                }
            }
            if (this.gW == 1) {
                if (!isPointerDown()) {
                    this.eE[2] = false;
                    this.eE[4] = false;
                } else if (!this.eE[2] && !this.eE[3]) {
                    this.ei[0] = getCurrentYTouch() - getTempYTouch();
                    this.ej[0] = (int) aMath.atan2(getCurrentYTouch() - getTempYTouch(), getCurrentXTouch() - getTempXTouch());
                    if (this.gO && !this.eE[4]) {
                        if (this.ei[0] <= -60 && this.ej[0] >= 225 && this.ej[0] <= 315) {
                            this.scrollAmount[0] = 0;
                            if (!this.eE[0]) {
                                this.el[0] = 1;
                                this.eD[6] = 0;
                            } else if (this.el[0] == 1) {
                                if (this.eD[6] == 1) {
                                    this.el[0] = -1;
                                }
                            } else if (this.el[0] == -1 && this.eD[6] == 0) {
                                this.el[0] = 1;
                            }
                            this.eE[0] = true;
                            this.eE[2] = true;
                        } else if (this.ei[0] >= 60 && this.ej[0] >= 45 && this.ej[0] <= 135) {
                            if (!this.eE[0]) {
                                this.el[0] = 1;
                                this.eD[6] = 1;
                            } else if (this.el[0] == 1) {
                                if (this.eD[6] == 0) {
                                    this.el[0] = -1;
                                }
                            } else if (this.el[0] == -1 && this.eD[6] == 1) {
                                this.el[0] = 1;
                            }
                            this.scrollAmount[0] = 0;
                            this.eE[0] = true;
                            this.eE[2] = true;
                        }
                    }
                }
            }
            f(this.eD[6]);
            if (this.gW == 0) {
                if (!this.eE[0] && this.gV[2] >= 100) {
                    this.gV[2] = 0;
                }
            } else if (this.gV[2] >= 100) {
                this.gV[2] = 0;
            }
        } else {
            int[] iArr4 = this.gV;
            iArr4[2] = iArr4[2] + 1;
        }
        if (this.gV[0] == 1) {
            this.gX[0][0] = (this.excessWidth / 2) + 615;
            this.gX[0][1] = 380;
            this.gX[0][2] = 168;
            this.gX[0][3] = 88;
            this.gt[0] = false;
            this.gZ[0] = 0;
            for (int i = 0; i < getLength(this.tutorialTextTextures); i++) {
                if (this.tutorialTextTextures[i].isLoaded()) {
                    this.tutorialTextTextures[i].reset();
                }
            }
            if (this.hH == 1) {
                for (int i2 = 0; i2 < 4; i2++) {
                    if (!this.tutorialTextTextures[i2].isLoaded()) {
                        if (aString.isEqual(this.stageFirstMessageText[this.gW + 1][i2], "＠")) {
                            break;
                        }
                        this.tutorialTextTextures[i2].drawText(this.stageFirstMessageText[this.gW + 1][i2], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.bB[0] == 1) {
                for (int i3 = 0; i3 < 4; i3++) {
                    if (!this.tutorialTextTextures[i3].isLoaded()) {
                        if (aString.isEqual(this.tutorialText[0][(this.gW * 4) + i3], "＠")) {
                            break;
                        }
                        this.tutorialTextTextures[i3].drawText(this.tutorialText[0][(this.gW * 4) + i3], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.bB[1] == 1) {
                for (int i4 = 0; i4 < 4; i4++) {
                    if (!this.tutorialTextTextures[i4].isLoaded()) {
                        if (aString.isEqual(this.tutorialText[1][(this.gW * 4) + i4], "＠")) {
                            break;
                        }
                        this.tutorialTextTextures[i4].drawText(this.tutorialText[1][(this.gW * 4) + i4], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.bB[2] == 1) {
                for (int i5 = 0; i5 < 4; i5++) {
                    if (!this.tutorialTextTextures[i5].isLoaded()) {
                        if (aString.isEqual(this.tutorialText[2][(this.gW * 4) + i5], "＠")) {
                            break;
                        }
                        this.tutorialTextTextures[i5].drawText(this.tutorialText[2][(this.gW * 4) + i5], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.bB[3] == 1) {
                this.gX[0][1] = 230;
                for (int i6 = 0; i6 < 4; i6++) {
                    if (!this.tutorialTextTextures[i6].isLoaded()) {
                        if (aString.isEqual(this.tutorialText[3][(this.gW * 4) + i6], "＠")) {
                            break;
                        }
                        this.tutorialTextTextures[i6].drawText(this.tutorialText[3][(this.gW * 4) + i6], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.bB[4] == 1) {
                for (int i7 = 0; i7 < 4; i7++) {
                    if (!this.tutorialTextTextures[i7].isLoaded()) {
                        if (aString.isEqual(this.tutorialText[4][i7], "＠")) {
                            break;
                        }
                        this.tutorialTextTextures[i7].drawText(this.tutorialText[4][i7], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.bB[5] == 1) {
                for (int i8 = 0; i8 < 4; i8++) {
                    if (!this.tutorialTextTextures[i8].isLoaded()) {
                        if (aString.isEqual(this.tutorialText[5][i8], "＠")) {
                            break;
                        }
                        this.tutorialTextTextures[i8].drawText(this.tutorialText[5][i8], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.bB[6] == 1) {
                for (int i9 = 0; i9 < 4; i9++) {
                    if (!this.tutorialTextTextures[i9].isLoaded()) {
                        if (aString.isEqual(this.tutorialText[6][(this.gW * 4) + i9], "＠")) {
                            break;
                        }
                        this.tutorialTextTextures[i9].drawText(this.tutorialText[6][(this.gW * 4) + i9], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.bB[7] == 1) {
                for (int i10 = 0; i10 < 4; i10++) {
                    if (!this.tutorialTextTextures[i10].isLoaded()) {
                        if (aString.isEqual(this.tutorialText[7][i10], "＠")) {
                            break;
                        }
                        this.tutorialTextTextures[i10].drawText(this.tutorialText[7][i10], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.bB[8] == 1) {
                for (int i11 = 0; i11 < 4; i11++) {
                    if (!this.tutorialTextTextures[i11].isLoaded()) {
                        if (aString.isEqual(this.tutorialText[8][(this.gW * 4) + i11], "＠")) {
                            break;
                        }
                        this.tutorialTextTextures[i11].drawText(this.tutorialText[8][(this.gW * 4) + i11], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.bB[9] == 1) {
                for (int i12 = 0; i12 < 4; i12++) {
                    if (!this.tutorialTextTextures[i12].isLoaded()) {
                        if (aString.isEqual(this.tutorialText[9][i12], "＠")) {
                            break;
                        }
                        this.tutorialTextTextures[i12].drawText(this.tutorialText[9][i12], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            }
        }
        if (this.gV[0] > getLength(eO) - 1) {
            this.gV[0] = getLength(eO) - 1;
            int[] iArr5 = this.gV;
            iArr5[1] = iArr5[1] + 1;
        }
        if (this.gV[1] >= 20) {
            if (this.gZ[0] < 1) {
                if (!isPointerDown() || !isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3])) {
                    this.gt[0] = false;
                } else if (!this.gt[0]) {
                    this.gt[0] = true;
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                if (isPointerUp() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3])) {
                    int[] iArr6 = this.gZ;
                    iArr6[0] = iArr6[0] + 1;
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    return;
                }
                return;
            }
            int[] iArr7 = this.gZ;
            iArr7[0] = iArr7[0] + 1;
            if (this.gZ[0] > getLength(dv) - 1) {
                this.gZ[0] = 0;
                for (int i13 = 0; i13 < getLength(this.gV); i13++) {
                    this.gV[i13] = 0;
                }
                for (int i14 = 0; i14 < getLength(this.tutorialTextTextures); i14++) {
                    if (this.tutorialTextTextures[i14].isLoaded()) {
                        this.tutorialTextTextures[i14].reset();
                    }
                }
                if (this.hH == 1) {
                    if (this.gW == 0) {
                        screenTransition();
                        this.gW++;
                        this.gV[0] = 0;
                        this.gV[1] = 0;
                        this.gV[3] = 0;
                        return;
                    }
                    this.gU = false;
                    if (this.cj[0] == 0) {
                        aSound.getInstance().setVolume(100);
                    }
                    this.gW = 0;
                    this.hH = 2;
                } else if (this.bB[0] == 1) {
                    if (this.gW == 0) {
                        screenTransition();
                        this.gW++;
                        this.gV[0] = 0;
                        this.gV[1] = 0;
                        this.gV[3] = 0;
                        return;
                    }
                    this.bB[0] = 2;
                    this.gU = false;
                    if (this.cj[0] == 0) {
                        aSound.getInstance().setVolume(100);
                    }
                    this.gW = 0;
                } else if (this.bB[1] == 1) {
                    if (this.gW == 0) {
                        this.gW++;
                        this.gV[0] = 0;
                        this.gV[1] = 0;
                        this.gV[3] = 0;
                        return;
                    }
                    this.bB[1] = 2;
                    this.gU = false;
                    if (this.cj[0] == 0) {
                        aSound.getInstance().setVolume(100);
                    }
                    this.gW = 0;
                } else if (this.bB[2] == 1) {
                    this.gU = false;
                    if (this.cj[0] == 0) {
                        aSound.getInstance().setVolume(100);
                    }
                    this.bB[2] = 2;
                } else if (this.bB[3] == 1) {
                    this.gU = false;
                    if (this.cj[0] == 0) {
                        aSound.getInstance().setVolume(100);
                    }
                    this.bB[3] = 2;
                } else if (this.bB[4] == 1) {
                    this.bB[4] = 2;
                    this.gU = false;
                    if (this.cj[0] == 0) {
                        aSound.getInstance().setVolume(100);
                    }
                } else if (this.bB[5] == 1) {
                    this.bB[5] = 2;
                    this.gU = false;
                    if (this.cj[0] == 0) {
                        aSound.getInstance().setVolume(100);
                    }
                } else if (this.bB[6] == 1) {
                    if (this.gW == 0) {
                        screenTransition();
                        this.gW++;
                        this.gV[0] = 0;
                        this.gV[1] = 0;
                        this.gV[3] = 0;
                        return;
                    }
                    this.gU = false;
                    if (this.cj[0] == 0) {
                        aSound.getInstance().setVolume(100);
                    }
                    this.gW = 0;
                    this.bB[6] = 2;
                } else if (this.bB[7] == 1) {
                    this.bB[7] = 2;
                    this.gU = false;
                    if (this.cj[0] == 0) {
                        aSound.getInstance().setVolume(100);
                    }
                } else if (this.bB[8] != 1) {
                    if (this.bB[9] == 1) {
                        this.bB[9] = 2;
                        this.hc[28] = this.gV[2];
                        this.gU = false;
                        if (this.cj[0] == 0) {
                            aSound.getInstance().setVolume(100);
                        }
                    }
                } else if (this.gW == 0) {
                    screenTransition();
                    this.gW++;
                    this.gV[0] = 0;
                    this.gV[1] = 0;
                    this.gV[3] = 0;
                } else {
                    this.gW = 0;
                    this.gU = false;
                    if (this.cj[0] == 0) {
                        aSound.getInstance().setVolume(100);
                    }
                    this.bB[8] = 2;
                }
            }
        }
    }

    void equipLoad() {
        this.ct = 0;
        for (int i = 0; i < getLength(this.gp); i++) {
            this.gp[i] = false;
        }
        this.gp[0] = true;
        for (int i2 = 0; i2 < 10; i2++) {
            if (this.slotCatIDs[i2] - 2 <= -1) {
                this.slotFormIDs[i2] = 0;
            } else {
                this.slotFormIDs[i2] = this.bw[this.slotCatIDs[i2] - 2];
            }
        }
        //aAd.b().f();
        for (int i3 = 0; i3 < getLength(this.buttonCoordinates1); i3++) {
            for (int i4 = 0; i4 < getLength(this.buttonCoordinates1[i3]); i4++) {
                this.buttonCoordinates1[i3][i4] = 0;
            }
        }
        for (int i5 = 0; i5 < getLength(this.boxSize); i5++) {
            for (int i6 = 0; i6 < getLength(this.boxSize[i5]); i6++) {
                if (i6 == 0) {
                    this.boxSize[i5][i6] = 229;
                } else if (i6 == 1) {
                    this.boxSize[i5][i6] = 184;
                }
            }
        }
        this.boxSize[0][0] = 328;
        this.boxSize[0][1] = 263;
        for (int i7 = 0; i7 < getLength(this.scrollAmount); i7++) {
            this.scrollAmount[i7] = 0;
        }
        for (int i8 = 0; i8 < getLength(this.gameStats1); i8++) {
            this.gameStats1[i8] = 0;
        }
        for (int i9 = 0; i9 < getLength(this.ei); i9++) {
            this.ei[i9] = 0;
        }
        for (int i10 = 0; i10 < getLength(this.boxCatIDs); i10++) {
            this.boxCatIDs[i10] = -1;
        }
        for (int i11 = 0; i11 < getLength(this.fx); i11++) {
            this.fx[i11] = 0;
        }
        for (int i12 = 0; i12 < getLength(this.eK); i12++) {
            this.eK[i12] = 0;
        }
        for (int i13 = 0; i13 < getLength(this.hk); i13++) {
            this.hk[i13] = 0;
        }
        for (int i14 = 0; i14 < getLength(this.fC); i14++) {
            this.fC[i14] = 0;
        }
        for (int i15 = 0; i15 < getLength(this.fy); i15++) {
            this.fy[i15] = 0;
        }
        for (int i16 = 0; i16 < getLength(this.fz); i16++) {
            this.fz[i16] = 0;
        }
        for (int i17 = 0; i17 < getLength(this.gZ); i17++) {
            this.gZ[i17] = 0;
        }
        this.bC[0] = 1;
        if (this.gF[0]) {
            this.gF[1] = true;
            if (this.ff[2] + this.ff[5] <= -1) {
                this.ff[3] = this.gE[(-(this.ff[2] + this.ff[5])) - 1];
                this.bC[this.gE[(-(this.ff[2] + this.ff[5])) - 1]] = 1;
            } else if ((this.ff[2] + this.ff[5]) - (this.boxCounts[1] + 1) >= 0) {
                this.ff[3] = this.gE[((this.ff[2] + this.ff[5]) - this.boxCounts[1]) - 1];
                this.bC[this.gE[((this.ff[2] + this.ff[5]) - this.boxCounts[1]) - 1]] = 1;
            }
            this.eE[11] = false;
            this.ff[5] = 0;
        } else {
            for (int i18 = 0; i18 < getLength(this.gm); i18++) {
                this.gm[i18] = 0;
            }
            this.gm[1] = 297;
            this.fR[0] = 0;
            for (int i19 = 0; i19 < getLength(this.blinkFrame); i19++) {
                this.blinkFrame[i19] = 0;
            }
            if (this.previousScreen == 0) {
                this.blinkFrame[0] = getLength(cu) - 1;
            }
            for (int i20 = 0; i20 < getLength(this.eE); i20++) {
                this.eE[i20] = false;
            }
            this.eE[0] = true;
            for (int i21 = 0; i21 < getLength(this.ff); i21++) {
                this.ff[i21] = 0;
            }
        }
        for (int i22 = 0; i22 < getLength(this.bL); i22++) {
            this.bL[i22] = 0;
        }
        for (int i23 = 0; i23 < getLength(this.bL); i23++) {
            if (this.bq[this.unitBuyStats[i23][15]] >= this.unitBuyStats[i23][0] && this.bu[i23] != 0) {
                this.bL[i23] = this.unitBuyStats[i23][13];
            }
        }
        for (int i24 = 0; i24 < getLength(this.bL); i24++) {
            for (int a = getLength(this.bL) - 1; a > i24; a--) {
                if (this.bL[a] < this.bL[a - 1]) {
                    int i25 = this.bL[a];
                    this.bL[a] = this.bL[a - 1];
                    this.bL[a - 1] = i25;
                }
            }
        }
        int i26 = 0;
        int i27 = -1;
        int i28 = 0;
        for (int i29 = 0; i29 < getLength(this.bL); i29++) {
            if (this.bL[i29] > i27) {
                i27 = this.bL[i29];
                if (this.ff[3] != this.bL[i29]) {
                    if (this.previousScreen == 0) {
                        this.gE[i28] = this.bL[i29];
                    }
                    i28++;
                }
                i26++;
            }
        }
        if (this.ff[3] >= 1) {
            i26 = 2;
        }
        this.boxCounts[0] = i26;
        this.boxCounts[2] = i26 - 1;
        this.boxScale = 200;
        for (int i30 = 0; i30 < 10; i30++) {
            if (this.uniTextures[i30].isLoaded()) {
                this.uniTextures[i30].reset();
            }
        }
        loadTextures2();
        this.gameStats1[0] = -(this.boxScale * this.boxCounts[0]);
        this.ff[0] = this.boxCounts[0];
        this.ff[2] = 0;
        this.ff[1] = (this.boxScale * 100) + (this.gameStats1[0] / this.boxScale);
        if (this.previousScreen >= 1) {
            int i31 = 0;
            for (int i32 = 0; i32 < getLength(this.ff); i32++) {
                this.ff[i32] = this.gT[i32];
                i31 = i32 + 1;
            }
            this.gameStats1[0] = this.gT[i31];
        }
        for (int i33 = 0; i33 < getLength(this.gA); i33++) {
            this.gA[i33] = 0;
        }
        for (int i34 = 0; i34 < getLength(this.textTextures); i34++) {
            if (this.textTextures[i34].isLoaded()) {
                this.textTextures[i34].reset();
            }
        }
        for (int i35 = 0; i35 < 26; i35++) {
            if (this.unitBuyStats[i35][13] == this.ff[3] && this.bq[this.unitBuyStats[i35][15]] >= this.unitBuyStats[i35][0] && this.bu[i35] != 0) {
                int i36 = 0;
                while (true) {
                    if (i36 >= getLength(this.boxCatIDs)) {
                        break;
                    } else if (this.boxCatIDs[i36] == -1) {
                        this.boxCatIDs[i36] = i35;
                        break;
                    } else {
                        i36++;
                    }
                }
            }
        }
        for (int i37 = 0; i37 < getLength(this.boxCatIDs) - 1; i37++) {
            for (int a2 = getLength(this.boxCatIDs) - 1; a2 > i37; a2--) {
                if (this.boxCatIDs[a2] != -1 && this.boxCatIDs[a2 - 1] != -1 && this.unitBuyStats[this.boxCatIDs[a2]][14] < this.unitBuyStats[this.boxCatIDs[a2 - 1]][14]) {
                    int i38 = this.boxCatIDs[a2];
                    this.boxCatIDs[a2] = this.boxCatIDs[a2 - 1];
                    this.boxCatIDs[a2 - 1] = i38;
                }
            }
        }
        int i39 = 0;
        for (int i40 = 0; i40 < getLength(this.boxCatIDs); i40++) {
            if (this.boxCatIDs[i40] != -1) {
                if (this.bw[this.boxCatIDs[i40]] == 0) {
                    this.textTextures[i39].drawText(this.unitExplanationText[this.boxCatIDs[i40]][0][0], "FONT_SYSTEM_BOLD", 30, 1);
                } else if (this.bw[this.boxCatIDs[i40]] == 1) {
                    this.textTextures[i39].drawText(this.unitExplanationText[this.boxCatIDs[i40]][1][0], "FONT_SYSTEM_BOLD", 30, 1);
                }
                this.gA[0] = i39 + 1;
                this.boxCounts[1] = i39;
                i39++;
            }
        }
        int[] iArr = this.gA;
        int[] iArr2 = this.gA;
        int i41 = this.gA[0];
        iArr2[1] = i41;
        iArr[2] = i41;
        for (int i42 = this.gA[2]; i42 < getLength(this.warning1Text) + this.gA[2]; i42++) {
            this.textTextures[i42].drawText(this.warning1Text[i42 - this.gA[2]], "FONT_SYSTEM_BOLD", 30, 1);
            this.gA[3] = i42 + 1;
        }
        int i43 = this.gA[3];
        while (i43 < this.gA[3] + 3) {
            if (this.ff[2] < 0 || this.ff[2] > this.boxCounts[1]) {
                if (this.ff[3] == 0) {
                    i43 = this.gA[3];
                    while (i43 < this.gA[3] + 3) {
                        this.textTextures[i43].drawText(this.categoryExplanation[0][i43 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                        i43++;
                    }
                } else {
                    i43 = this.gA[3];
                    while (i43 < this.gA[3] + 3) {
                        this.textTextures[i43].drawText(this.categoryExplanation[1][i43 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                        i43++;
                    }
                }
            } else if (this.bw[this.boxCatIDs[this.ff[2]]] == 0) {
                if (!this.textTextures[i43].isLoaded()) {
                    this.textTextures[i43].drawText(this.unitExplanationText[this.boxCatIDs[this.ff[2]]][0][(i43 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                }
            } else if (this.bw[this.boxCatIDs[this.ff[2]]] == 1 && !this.textTextures[i43].isLoaded()) {
                this.textTextures[i43].drawText(this.unitExplanationText[this.boxCatIDs[this.ff[2]]][1][(i43 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
            }
            this.gA[4] = i43 + 1;
            i43++;
        }
        if (!this.textTextures[this.gA[4]].isLoaded()) {
            if (this.ff[3] == 0) {
                this.textTextures[this.gA[4]].drawText(this.pageNameText[0], "FONT_SYSTEM_BOLD", 30, 1);
            } else {
                this.textTextures[this.gA[4]].drawText(this.pageNameText[5], "FONT_SYSTEM_BOLD", 30, 1);
            }
        }
        for (int i44 = 0; i44 < 10; i44++) {
            if (!this.uniTextures[i44].isLoaded()) {
                if (this.slotCatIDs[i44] == -1) {
                    this.uniTextures[i44].load(MyUtility.getString(String.format("uni.png", new Object[0])), MyUtility.getString(String.format("uni.imgcut", new Object[0])));
                } else if (this.slotFormIDs[i44] == 0) {
                    this.uniTextures[i44].load(MyUtility.getString(String.format("uni%03d_f%02d.png", this.slotCatIDs[i44] - 2, 0)), MyUtility.getString(String.format("uni%03d_f%02d.imgcut", this.slotCatIDs[i44] - 2, 0)));
                } else if (this.slotFormIDs[i44] == 1) {
                    this.uniTextures[i44].load(MyUtility.getString(String.format("uni%03d_c%02d.png", this.slotCatIDs[i44] - 2, 0)), MyUtility.getString(String.format("uni%03d_c%02d.imgcut", this.slotCatIDs[i44] - 2, 0)));
                }
            }
        }
        if (this.uiTextures[6].isLoaded()) {
            this.uiTextures[6].reset();
        }
        if (!this.uiTextures[6].isLoaded()) {
            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 21)), MyUtility.getString(String.format("img%03d.imgcut", 21)));
        }
        if (this.uiTextures[7].isLoaded()) {
            this.uiTextures[7].reset();
        }
        if (!this.uiTextures[7].isLoaded()) {
            this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 29)), MyUtility.getString(String.format("img%03d.imgcut", 29)));
        }
        if (this.ff[3] == 0) {
            if (this.uiTextures[8].isLoaded()) {
                this.uiTextures[8].reset();
            }
            if (!this.uiTextures[8].isLoaded()) {
                this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 23)), MyUtility.getString(String.format("img%03d.imgcut", 23)));
            }
        } else if (this.ff[3] >= 1) {
            if (this.uiTextures[8].isLoaded()) {
                this.uiTextures[8].reset();
            }
            if (!this.uiTextures[8].isLoaded()) {
                this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 27)), MyUtility.getString(String.format("img%03d.imgcut", 27)));
            }
        }
        if (this.uiTextures[9].isLoaded()) {
            this.uiTextures[9].reset();
        }
        if (!this.uiTextures[9].isLoaded()) {
            this.uiTextures[9].load(MyUtility.getString(String.format("img%03d.png", 28)), MyUtility.getString(String.format("img%03d.imgcut", 28)));
        }
        if (!this.uiTextures[10].isLoaded()) {
            this.uiTextures[10].reset();
        }
        if (!this.uiTextures[10].isLoaded()) {
            this.uiTextures[10].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
        }
        for (int i45 = 0; i45 < this.boxCounts[1] + 1; i45++) {
            if (this.uiTextures[i45 + 11].isLoaded()) {
                this.uiTextures[i45 + 11].reset();
            }
            if (!this.uiTextures[i45 + 11].isLoaded()) {
                if (this.bw[this.boxCatIDs[i45]] == 0) {
                    this.uiTextures[i45 + 11].load(MyUtility.getString(String.format("udi%03d_f.png", this.boxCatIDs[i45])), MyUtility.getString(String.format("udi%03d_f.imgcut", this.boxCatIDs[i45])));
                } else {
                    this.uiTextures[i45 + 11].load(MyUtility.getString(String.format("udi%03d_c.png", this.boxCatIDs[i45])), MyUtility.getString(String.format("udi%03d_c.imgcut", this.boxCatIDs[i45])));
                }
            }
        }
        this.fh = 0;
        this.fi = 0;
        for (int i46 = 0; i46 < getLength(this.fj); i46++) {
            for (int i47 = 0; i47 < getLength(this.fj[i46]); i47++) {
                this.fj[i46][i47] = 0;
            }
        }
        this.fi = 0;
        this.fl = 0;
        this.fm = 0;
        this.fn = false;
        for (int i48 = 0; i48 < getLength(this.fo); i48++) {
            this.fo[i48] = 0;
        }
        for (int i49 = 0; i49 > getLength(this.fp); i49++) {
            this.fp[i49] = 0;
        }
        for (int i50 = 0; i50 < 2; i50++) {
            for (int i51 = 0; i51 < 5; i51++) {
                this.fg[(i50 * 5) + i51][0] = (this.excessWidth / 2) + 176 + (i51 * 146);
                this.fg[(i50 * 5) + i51][1] = (((i50 * 48) * 179) / 100) + (i50 * 10) + 90;
            }
        }
        for (int i52 = 0; i52 < getLength(this.fg); i52++) {
            this.buttonCoordinates1[i52][0] = this.fg[i52][0];
            this.buttonCoordinates1[i52][1] = this.fg[i52][1] - 2;
            this.buttonCoordinates1[i52][2] = 110;
            this.buttonCoordinates1[i52][3] = 89;
        }
        this.buttonCoordinates1[10][0] = 4;
        this.buttonCoordinates1[10][1] = 541;
        this.buttonCoordinates1[10][2] = 95;
        this.buttonCoordinates1[10][3] = 95;
        this.buttonCoordinates1[11][0] = this.excessWidth + 652;
        this.buttonCoordinates1[11][1] = 280;
        this.buttonCoordinates1[11][2] = 304;
        this.buttonCoordinates1[11][3] = 88;
        this.buttonCoordinates1[12][0] = (((getWidth() / 2) - 164) + 285) - 10;
        this.buttonCoordinates1[12][1] = 506;
        this.buttonCoordinates1[12][2] = 89;
        this.buttonCoordinates1[12][3] = 89;
        this.buttonCoordinates1[13][0] = this.excessWidth + 344;
        this.buttonCoordinates1[13][1] = 560;
        this.buttonCoordinates1[13][2] = 247;
        this.buttonCoordinates1[13][3] = 88;
        this.buttonCoordinates1[14][0] = this.excessWidth + 680;
        this.buttonCoordinates1[14][1] = 552;
        this.buttonCoordinates1[14][2] = 88;
        this.buttonCoordinates1[14][3] = 88;
        this.buttonCoordinates1[15][0] = this.excessWidth + 626;
        this.buttonCoordinates1[15][1] = 0;
        this.buttonCoordinates1[15][2] = 88;
        this.buttonCoordinates1[15][3] = 88;
        this.gJ = false;
        this.gK = 0;
        this.gF[0] = false;
        this.isScrolling = false;
    }

    boolean equipProcess() {
        int[] iArr = this.gameStats1;
        iArr[0] = iArr[0] + this.scrollAmount[0];
        this.scrollAmount[0] = (int) (this.scrollAmount[0] * 0.9d);
        if (this.gameStats1[0] >= ((this.boxScale / 2) - this.boxScale) - 20) {
            this.gameStats1[0] = ((this.boxScale / 2) - this.boxScale) - 20;
            this.gameStats1[1] = this.boxScale * 100;
            this.scrollAmount[0] = 0;
        } else if (this.gameStats1[0] < (-(((this.boxScale * ((this.boxCounts[0] + this.boxCounts[1]) + this.boxCounts[2])) + (this.boxScale / 2)) - 20))) {
            this.gameStats1[0] = -(((this.boxScale * ((this.boxCounts[0] + this.boxCounts[1]) + this.boxCounts[2])) + (this.boxScale / 2)) - 20);
            this.scrollAmount[0] = 0;
            this.gameStats1[1] = this.boxScale * 100;
        }
        if (!this.eE[0] && this.bB[6] == 0) {
            screenTransition();
            this.bB[6] = 1;
            this.gU = true;
            for (int i = 0; i < getLength(this.gV); i++) {
                this.gV[i] = 0;
            }
            return false;
        }
        if (!isPointerDown() || this.fh != 0 || this.fn || this.eE[6] || this.eE[11] || this.fx[10] != 0 || this.fx[11] != 0 || this.fx[12] != 0 || this.gI || this.eE[0] || this.eE[1] || this.eE[13] || this.eb || this.gJ || this.gF[0] || this.gF[1]) {
            this.isScrolling = false;
            if ((this.scrollAmount[0] >= 0 && this.scrollAmount[0] < 8) || (this.scrollAmount[0] > -8 && this.scrollAmount[0] <= 0)) {
                this.scrollAmount[0] = 0;
                if (this.gameStats1[0] % this.boxScale != 0) {
                    if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
                        this.gameStats1[0] = this.gameStats1[0] - ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4);
                        if ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4 == 0) {
                            this.gameStats1[0] = ((this.gameStats1[0] / this.boxScale) - 1) * this.boxScale;
                        }
                    } else {
                        this.gameStats1[0] = this.gameStats1[0] - (((this.gameStats1[0] % this.boxScale) - 4) / 4);
                        if (((this.gameStats1[0] % this.boxScale) - 4) / 4 == 0) {
                            this.gameStats1[0] = (this.gameStats1[0] / this.boxScale) * this.boxScale;
                        }
                    }
                }
            }
            if (!isPointerUp()) {
                this.eE[5] = false;
            }
        } else {
            if (getCurrentXTouch() - getPreviousXTouch() <= -10 || getCurrentXTouch() - getPreviousXTouch() >= 10 || this.isScrolling) {
                this.isScrolling = true;
            } else {
                this.scrollAmount[0] = 0;
            }
            if (this.isScrolling) {
                this.scrollAmount[0] = getCurrentXTouch() - getPreviousXTouch();
                if (this.scrollAmount[0] != 0 && !this.eE[5]) {
                    this.eE[5] = true;
                }
            }
        }
        if (!this.eE[0] && !this.eE[1] && !this.eE[13] && !this.eb) {
            if (this.scrollAmount[0] < 0) {
                if (this.ff[0] != (-(this.gameStats1[0] / this.boxScale))) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                this.gp[0] = false;
            } else if (this.scrollAmount[0] > 0) {
                if (this.ff[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                this.gp[0] = false;
            } else if (this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.gp[0]) {
                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                this.gp[0] = true;
            }
        }
        if (this.ff[0] != (-(this.gameStats1[0] / this.boxScale))) {
            this.ff[0] = -(this.gameStats1[0] / this.boxScale);
        }
        if (this.ff[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
            this.ff[1] = ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale;
        }
        if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
            if ((this.ff[0] + 1) - this.boxCounts[0] != this.ff[2]) {
                this.ff[2] = (this.ff[0] + 1) - this.boxCounts[0];
                if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1]) {
                    for (int i2 = this.gA[3]; i2 < this.gA[3] + 3; i2++) {
                        if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1]) {
                            if (this.bw[this.boxCatIDs[this.ff[2]]] == 0) {
                                this.textTextures[i2].drawText(this.unitExplanationText[this.boxCatIDs[this.ff[2]]][0][(i2 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                            } else if (this.bw[this.boxCatIDs[this.ff[2]]] == 1) {
                                this.textTextures[i2].drawText(this.unitExplanationText[this.boxCatIDs[this.ff[2]]][1][(i2 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                            }
                        }
                    }
                } else if (this.ff[3] == 0) {
                    for (int i3 = this.gA[3]; i3 < this.gA[3] + 3; i3++) {
                        this.textTextures[i3].drawText(this.categoryExplanation[0][i3 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else {
                    for (int i4 = this.gA[3]; i4 < this.gA[3] + 3; i4++) {
                        this.textTextures[i4].drawText(this.categoryExplanation[1][i4 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            }
        } else if (this.ff[0] - this.boxCounts[0] != this.ff[2]) {
            this.ff[2] = this.ff[0] - this.boxCounts[0];
            if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1]) {
                for (int i5 = this.gA[3]; i5 < this.gA[3] + 3; i5++) {
                    if (this.bw[this.boxCatIDs[this.ff[2]]] == 0) {
                        this.textTextures[i5].drawText(this.unitExplanationText[this.boxCatIDs[this.ff[2]]][0][(i5 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                    } else if (this.bw[this.boxCatIDs[this.ff[2]]] == 1) {
                        this.textTextures[i5].drawText(this.unitExplanationText[this.boxCatIDs[this.ff[2]]][1][(i5 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.ff[3] == 0) {
                for (int i6 = this.gA[3]; i6 < this.gA[3] + 3; i6++) {
                    this.textTextures[i6].drawText(this.categoryExplanation[0][i6 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                }
            } else {
                for (int i7 = this.gA[3]; i7 < this.gA[3] + 3; i7++) {
                    this.textTextures[i7].drawText(this.categoryExplanation[1][i7 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                }
            }
        }
        if (!this.eE[0] && !this.eE[1] && !this.eE[13] && !this.eE[5] && !this.eb && !this.gF[0] && !this.gF[1]) {
            if (this.fx[2] >= 1) {
                int[] iArr2 = this.fx;
                iArr2[2] = iArr2[2] + 1;
                if (this.fx[2] > getLength(dv) - 1) {
                    this.fx[2] = 0;
                    this.gF[0] = true;
                }
            } else if (this.fx[11] >= 1) {
                int[] iArr3 = this.fx;
                iArr3[11] = iArr3[11] + 1;
                if (this.fx[11] > getLength(dv) - 1) {
                    this.fx[11] = 0;
                    if (this.gJ) {
                        this.gJ = false;
                    } else {
                        this.gJ = true;
                        this.gK = 0;
                        aSound.getInstance().play(SoundType.POPUP);
                    }
                }
            } else if (this.fx[12] >= 1) {
                int[] iArr4 = this.fx;
                iArr4[12] = iArr4[12] + 1;
                if (this.fx[12] > getLength(dv) - 1) {
                    this.fx[12] = 0;
                    this.gI = true;
                }
            } else if (this.fx[10] >= 1) {
                int[] iArr5 = this.fx;
                iArr5[10] = iArr5[10] + 1;
                this.eE[10] = true;
                if (this.fx[10] > getLength(dv) - 1) {
                    this.fx[10] = 0;
                    boolean z = false;
                    for (int i8 = 0; i8 < getLength(this.slotCatIDs); i8++) {
                        if (this.slotCatIDs[i8] >= 2) {
                            z = true;
                        }
                    }
                    if (!z) {
                        screenTransition();
                        this.gu = true;
                        this.gw = 0;
                        return false;
                    } else if (z) {
                        this.eE[1] = true;
                    }
                }
            } else if (this.fx[13] >= 1) {
                int[] iArr6 = this.fx;
                iArr6[13] = iArr6[13] + 1;
                if (this.fx[13] > getLength(dv) - 1) {
                    this.fx[13] = 0;
                    if (this.be >= 1) {
                        boolean z2 = false;
                        for (int i9 = 0; i9 < getLength(this.slotCatIDs); i9++) {
                            if (this.slotCatIDs[i9] >= 2) {
                                z2 = true;
                            }
                        }
                        if (!z2) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 0;
                            return false;
                        } else if (z2) {
                            this.eE[13] = true;
                        }
                    }
                }
            } else if (this.fx[14] >= 1) {
                int[] iArr7 = this.fx;
                iArr7[14] = iArr7[14] + 1;
                if (this.fx[14] > getLength(dv) - 1) {
                    this.fx[14] = 0;
                    if (this.bB[8] == 0) {
                        screenTransition();
                        this.bB[8] = 1;
                        this.gU = true;
                        for (int i10 = 0; i10 < getLength(this.gV); i10++) {
                            this.gV[i10] = 0;
                        }
                        aSound.getInstance().setVolume(50);
                        return false;
                    } else if (!this.eE[5] && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0) {
                        boolean z3 = false;
                        for (int i11 = 0; i11 < getLength(this.slotCatIDs); i11++) {
                            if (this.slotCatIDs[i11] >= 2) {
                                z3 = true;
                            }
                        }
                        if (!z3) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 0;
                            return false;
                        } else if (this.catfood >= 900000) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 10000;
                            return false;
                        } else {
                            screenTransition();
                            this.menuType = 0;
                            this.j = true;
                            return false;
                        }
                    }
                }
            } else {
                if ((this.ff[2] > -1 && this.ff[2] < this.boxCounts[1] + 1) || this.eE[5] || this.gameStats1[0] % this.boxScale != 0 || this.scrollAmount[0] != 0 || !isPointerDown() || !isTouching(((((getWidth() / 2) - (this.boxSize[this.ff[0]][0] / 2)) + (this.boxScale * this.ff[0])) + this.gameStats1[0]) - (328 - this.boxSize[this.ff[0]][0]), 559 - this.boxSize[this.ff[0]][1], this.boxSize[this.ff[0]][0], this.boxSize[this.ff[0]][1])) {
                    this.gp[2] = false;
                } else if (!this.gp[2]) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    this.gp[2] = true;
                }
                if (!this.gJ && !this.gI && !this.fn && !this.eE[6] && this.fh == 0) {
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[11][0], this.buttonCoordinates1[11][1], this.buttonCoordinates1[11][2], this.buttonCoordinates1[11][3])) {
                        this.gp[11] = false;
                    } else if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1] && !this.eE[5] && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.gp[11]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[11] = true;
                    }
                    if (this.bq[0] >= 48) {
                        if (!isPointerDown() || !isTouching(this.buttonCoordinates1[12][0], this.buttonCoordinates1[12][1], this.buttonCoordinates1[12][2], this.buttonCoordinates1[12][3])) {
                            this.gp[12] = false;
                        } else if (!this.gp[12] && !this.eE[5] && this.baseUpgrades[this.ff[2]] + 1 >= 10 && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gp[12] = true;
                        }
                    }
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[10][0], this.buttonCoordinates1[10][1], this.buttonCoordinates1[10][2], this.buttonCoordinates1[10][3])) {
                        this.gp[10] = false;
                    } else if (!this.eE[5] && !this.gp[10]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[10] = true;
                    }
                    if (this.fx[2] == 0 && this.ff[0] - 2 >= 0 && this.ff[2] <= 0 && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[9] && isPointerUp() && isTouching(((((getWidth() / 2) - (this.boxSize[this.ff[0] - 1][0] / 2)) + (this.boxScale * (this.ff[0] - 1))) + this.gameStats1[0]) - ((328 - this.boxSize[this.ff[0] - 1][0]) + ((328 - this.boxSize[(this.ff[0] - 1) + 1][0]) / 2)), 559 - this.boxSize[this.ff[0] - 1][1], this.boxSize[this.ff[0] - 1][0], this.boxSize[this.ff[0] - 1][1])) {
                        int[] iArr8 = this.fx;
                        iArr8[2] = iArr8[2] + 1;
                        this.ff[5] = -1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        this.eE[11] = true;
                    }
                    if (this.fx[2] == 0 && this.ff[0] - 2 <= this.boxCounts[1] && this.ff[2] >= this.boxCounts[1] && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[9] && isPointerUp() && isTouching(((getWidth() / 2) - (this.boxSize[this.ff[0] + 1][0] / 2)) + (this.boxScale * (this.ff[0] + 1)) + this.gameStats1[0] + (328 - this.boxSize[this.ff[0] + 1][0]), 559 - this.boxSize[this.ff[0] + 1][1], this.boxSize[this.ff[0] + 1][0], this.boxSize[this.ff[0] + 1][1])) {
                        int[] iArr9 = this.fx;
                        iArr9[2] = iArr9[2] + 1;
                        this.ff[5] = 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        this.eE[11] = true;
                    }
                    if (this.fx[2] == 0 && ((this.ff[2] <= -1 || this.ff[2] >= this.boxCounts[1] + 1) && !this.eE[5] && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && isPointerUp() && isTouching(((((getWidth() / 2) - (this.boxSize[this.ff[0]][0] / 2)) + (this.boxScale * this.ff[0])) + this.gameStats1[0]) - (328 - this.boxSize[this.ff[0]][0]), 559 - this.boxSize[this.ff[0]][1], this.boxSize[this.ff[0]][0], this.boxSize[this.ff[0]][1]))) {
                        int[] iArr10 = this.fx;
                        iArr10[2] = iArr10[2] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        this.ff[5] = 0;
                        this.eE[11] = true;
                    } else if (!this.eE[11] && isPointerUp() && isTouching(this.buttonCoordinates1[11][0], this.buttonCoordinates1[11][1], this.buttonCoordinates1[11][2], this.buttonCoordinates1[11][3])) {
                        if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1] && !this.eE[5] && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.gJ) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr11 = this.fx;
                            iArr11[11] = iArr11[11] + 1;
                        }
                    } else if (!this.eE[11] && isPointerUp() && isTouching(this.buttonCoordinates1[12][0], this.buttonCoordinates1[12][1], this.buttonCoordinates1[12][2], this.buttonCoordinates1[12][3])) {
                        if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1] && !this.eE[5] && this.baseUpgrades[this.boxCatIDs[this.ff[2]]] + 1 >= 10 && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && this.bq[0] >= 48) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr12 = this.fx;
                            iArr12[12] = iArr12[12] + 1;
                        }
                    } else if (!this.eE[11] && isPointerUp() && isTouching(this.buttonCoordinates1[10][0], this.buttonCoordinates1[10][1], this.buttonCoordinates1[10][2], this.buttonCoordinates1[10][3])) {
                        if (!this.eE[5]) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr13 = this.fx;
                            iArr13[10] = iArr13[10] + 1;
                            this.eE[10] = true;
                        }
                    } else if (isBackPressed()) {
                        this.eE[10] = true;
                        boolean z4 = false;
                        for (int i12 = 0; i12 < getLength(this.slotCatIDs); i12++) {
                            if (this.slotCatIDs[i12] >= 2) {
                                z4 = true;
                            }
                        }
                        if (!z4) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 0;
                            return false;
                        } else if (z4) {
                            this.eE[1] = true;
                        }
                    } else if (isPointerUp() && isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) && this.bf >= 1) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr14 = this.fx;
                        iArr14[14] = iArr14[14] + 1;
                    }
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) || this.bf < 1) {
                        this.gp[14] = false;
                    } else if (!this.gp[14]) {
                        this.gp[14] = true;
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    }
                }
                if (this.gJ) {
                    if (isPointerUp()) {
                        if (this.gK >= getLength(eO) - 1) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr15 = this.fx;
                            iArr15[11] = iArr15[11] + 1;
                        }
                    } else if (isBackPressed()) {
                        this.gJ = false;
                    }
                }
            }
        }
        if ((-this.gameStats1[0]) % this.boxScale == 0) {
            this.gameStats1[0] = 0;
            this.gameStats1[1] = -(328 - this.boxSize[this.ff[0] + this.gameStats1[0]][0]);
        } else if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
            this.gameStats1[0] = 1;
            this.gameStats1[1] = 328 - this.boxSize[this.ff[0] + this.gameStats1[0]][0];
        } else {
            this.gameStats1[0] = 0;
            this.gameStats1[1] = -(328 - this.boxSize[this.ff[0] + this.gameStats1[0]][0]);
        }
        boolean z5 = false;
        for (int i13 = 0; i13 < 10; i13++) {
            if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1] && this.slotCatIDs[i13] - 2 == this.boxCatIDs[this.ff[2]]) {
                z5 = true;
            }
        }
        if (this.ff[2] <= -1 || this.ff[2] >= this.boxCounts[1] + 1) {
            z5 = true;
        }
        if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1] && this.bu[this.boxCatIDs[this.ff[2]]] == 0) {
            z5 = true;
        }
        if (z5 || this.gJ || this.gI || !isPointerDown() || this.eE[4] || !isTouching(((getWidth() / 2) - (this.boxSize[this.ff[0] + this.gameStats1[0]][0] / 2)) + (this.boxScale * (this.ff[0] + this.gameStats1[0])) + this.gameStats1[0] + this.gameStats1[1], 559 - this.boxSize[this.ff[0] + this.gameStats1[0]][1], this.boxSize[this.ff[0] + this.gameStats1[0]][0], this.boxSize[this.ff[0] + this.gameStats1[0]][1])) {
            this.fk[10] = 0;
        } else {
            if (this.scrollAmount[0] == 0) {
                int[] iArr16 = this.fk;
                iArr16[10] = iArr16[10] + 1;
            } else {
                this.fk[10] = 0;
            }
            if (this.fk[10] >= 3 && this.fh == 0 && !this.eE[6]) {
                this.fo[0] = 55;
                this.fo[1] = 55;
                this.eE[6] = true;
            }
        }
        if (this.gJ || this.gI || !isPointerDown() || this.eE[4] || !this.eE[6]) {
            for (int i14 = 0; i14 < 10; i14++) {
                if (isTouching(this.buttonCoordinates1[i14][0], this.buttonCoordinates1[i14][1], this.buttonCoordinates1[i14][2], this.buttonCoordinates1[i14][3])) {
                    if (this.fp[i14] >= 15) {
                        if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1]) {
                            this.slotCatIDs[i14] = this.boxCatIDs[this.ff[2]] + 2;
                        }
                        this.slotFormIDs[i14] = this.bw[this.slotCatIDs[i14] - 2];
                        if (this.uniTextures[i14].isLoaded()) {
                            this.uniTextures[i14].reset();
                        }
                        if (!this.uniTextures[i14].isLoaded()) {
                            if (this.slotCatIDs[i14] == -1) {
                                this.uniTextures[i14].load(MyUtility.getString(String.format("uni.png", new Object[0])), MyUtility.getString(String.format("uni.imgcut", new Object[0])));
                            } else if (this.slotFormIDs[i14] == 0) {
                                this.uniTextures[i14].load(MyUtility.getString(String.format("uni%03d_f%02d.png", this.slotCatIDs[i14] - 2, 0)), MyUtility.getString(String.format("uni%03d_f%02d.imgcut", this.slotCatIDs[i14] - 2, 0)));
                            } else if (this.slotFormIDs[i14] == 1) {
                                this.uniTextures[i14].load(MyUtility.getString(String.format("uni%03d_c%02d.png", this.slotCatIDs[i14] - 2, 0)), MyUtility.getString(String.format("uni%03d_c%02d.imgcut", this.slotCatIDs[i14] - 2, 0)));
                            }
                        }
                    }
                    this.fp[i14] = 0;
                }
            }
            if (!this.eE[7]) {
                this.fn = false;
            }
            if (this.eE[7]) {
                this.eE[4] = true;
            } else {
                this.eE[4] = false;
            }
            if (this.fn) {
                this.fo[0] -= 20;
                this.fo[1] -= 20;
                if (this.fo[0] <= -45) {
                    this.fo[0] = -45;
                }
                if (this.fo[1] <= -45) {
                    this.fo[1] = -45;
                }
                if (this.fo[0] <= -45 && this.fo[1] <= -45) {
                    this.fn = false;
                    this.fo[0] = 0;
                    this.fo[1] = 0;
                    this.eE[4] = false;
                    this.eE[7] = false;
                    if (this.fh >= 1) {
                        this.fj[this.fh - 1][2] = -100;
                        this.fj[this.fh - 1][3] = -100;
                        this.slotCatIDs[this.fh - 1] = -1;
                    }
                }
            } else {
                this.fn = false;
                this.fo[0] = 0;
                this.fo[1] = 0;
                this.eE[4] = false;
                this.eE[7] = false;
            }
            this.eE[6] = false;
        } else {
            if (!this.eE[3] && isTouching(((getWidth() / 2) - (this.boxSize[this.ff[0] + this.gameStats1[0]][0] / 2)) + (this.boxScale * (this.ff[0] + this.gameStats1[0])) + this.gameStats1[0] + this.gameStats1[1], 559 - this.boxSize[this.ff[0] + this.gameStats1[0]][1], this.boxSize[this.ff[0] + this.gameStats1[0]][0], this.boxSize[this.ff[0] + this.gameStats1[0]][1])) {
                this.fn = true;
            }
            this.ei[1] = getCurrentYTouch();
            this.gameStats1[1] = getCurrentXTouch();
            if (this.fn && !this.eE[3] && isTouching(0, 80, getWidth(), 200)) {
                int i15 = 0;
                while (true) {
                    if (i15 >= 10) {
                        break;
                    } else if (this.slotCatIDs[i15] != -1) {
                        i15++;
                    } else {
                        this.fl = 55;
                        this.fm = 42;
                        this.fh = i15 + 1;
                        if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1]) {
                            this.slotCatIDs[i15] = this.boxCatIDs[this.ff[2]] + 2;
                        }
                        this.slotFormIDs[i15] = this.bw[this.slotCatIDs[i15] - 2];
                        this.eE[3] = true;
                        if (this.uniTextures[i15].isLoaded()) {
                            this.uniTextures[i15].reset();
                        }
                        if (!this.uniTextures[i15].isLoaded()) {
                            if (this.slotCatIDs[i15] == -1) {
                                this.uniTextures[i15].load(MyUtility.getString(String.format("uni.png", new Object[0])), MyUtility.getString(String.format("uni.imgcut", new Object[0])));
                            } else if (this.slotFormIDs[i15] == 0) {
                                this.uniTextures[i15].load(MyUtility.getString(String.format("uni%03d_f%02d.png", this.slotCatIDs[i15] - 2, 0)), MyUtility.getString(String.format("uni%03d_f%02d.imgcut", this.slotCatIDs[i15] - 2, 0)));
                            } else if (this.slotFormIDs[i15] == 1) {
                                this.uniTextures[i15].load(MyUtility.getString(String.format("uni%03d_c%02d.png", this.slotCatIDs[i15] - 2, 0)), MyUtility.getString(String.format("uni%03d_c%02d.imgcut", this.slotCatIDs[i15] - 2, 0)));
                            }
                        }
                    }
                }
            }
            if (!this.eE[3]) {
                boolean z6 = false;
                for (int i16 = 0; i16 < 10; i16++) {
                    if (isTouching(this.buttonCoordinates1[i16][0], this.buttonCoordinates1[i16][1], this.buttonCoordinates1[i16][2], this.buttonCoordinates1[i16][3])) {
                        int[] iArr17 = this.fp;
                        iArr17[i16] = iArr17[i16] + 1;
                        if (this.fp[i16] >= 15) {
                            this.fp[i16] = 15;
                            this.fo[0] = (int) (this.fo[0] * 0.6d);
                            this.fo[1] = (int) (this.fo[1] * 0.6d);
                            if (this.fo[0] <= 0) {
                                this.fo[0] = 0;
                            }
                            if (this.fo[1] <= 0) {
                                this.fo[1] = 0;
                            }
                            this.eE[7] = false;
                            z6 = true;
                        }
                    } else {
                        this.fp[i16] = 0;
                    }
                }
                if (!z6) {
                    this.fo[0] = (this.fo[0] * 2) + 1;
                    this.fo[1] = (this.fo[1] * 2) + 1;
                    if (this.fo[0] >= 75) {
                        this.fo[0] = 75;
                    }
                    if (this.fo[1] >= 75) {
                        this.fo[1] = 75;
                    }
                    this.eE[7] = true;
                }
            } else if (isTouching(0, 80, getWidth(), 200)) {
                if (this.fn) {
                    this.fo[0] = (int) (this.fo[0] * 0.6d);
                    this.fo[1] = (int) (this.fo[1] * 0.6d);
                    if (this.fo[0] <= 0) {
                        this.fo[0] = 0;
                    }
                    if (this.fo[1] <= 0) {
                        this.fo[1] = 0;
                    }
                    this.eE[7] = false;
                }
            } else if (this.fn) {
                this.fo[0] = (this.fo[0] * 2) + 1;
                this.fo[1] = (this.fo[1] * 2) + 1;
                if (this.fo[0] >= 75) {
                    this.fo[0] = 75;
                }
                if (this.fo[1] >= 75) {
                    this.fo[1] = 75;
                }
                this.eE[7] = true;
            }
        }
        for (int i17 = 0; i17 < 10; i17++) {
            if (this.slotCatIDs[i17] == -1) {
                this.fk[i17] = 0;
            } else if (this.gJ || this.gI || !isPointerDown() || !isTouching(this.buttonCoordinates1[i17][0], this.buttonCoordinates1[i17][1], this.buttonCoordinates1[i17][2], this.buttonCoordinates1[i17][3]) || this.eE[5] || this.fn) {
                this.fk[i17] = 0;
            } else {
                int[] iArr18 = this.fk;
                iArr18[i17] = iArr18[i17] + 1;
                if (this.fk[i17] >= 3 && this.fh == 0) {
                    this.fh = i17 + 1;
                    this.fl = getCurrentXTouch() - this.fg[this.fh - 1][0];
                    this.fm = getCurrentYTouch() - this.fg[this.fh - 1][1];
                    this.eE[3] = true;
                }
            }
        }
        if (this.gJ || this.gI || !isPointerDown() || this.fh < 1 || !this.eE[3] || this.eE[8]) {
            if (this.eE[3]) {
                this.fj[this.fh - 1][0] = (getCurrentXTouch() - this.fl) - this.fg[this.fh - 1][0];
                this.fj[this.fh - 1][1] = (getCurrentYTouch() - this.fm) - this.fg[this.fh - 1][1];
            }
            this.eE[3] = false;
            if (this.fh >= 1) {
                if (this.ei[0] < 80 || this.ei[0] > 280) {
                    this.fj[this.fh - 1][2] -= 20;
                    this.fj[this.fh - 1][3] -= 20;
                    if (this.fj[this.fh - 1][2] <= -100) {
                        this.fj[this.fh - 1][2] = -100;
                    }
                    if (this.fj[this.fh - 1][3] <= -100) {
                        this.fj[this.fh - 1][3] = -100;
                    }
                    this.eE[8] = true;
                } else {
                    int[] iArr19 = this.fj[this.fh - 1];
                    iArr19[0] = iArr19[0] / 2;
                    int[] iArr20 = this.fj[this.fh - 1];
                    iArr20[1] = iArr20[1] / 2;
                    int[] iArr21 = this.fj[this.fh - 1];
                    iArr21[2] = iArr21[2] / 2;
                    int[] iArr22 = this.fj[this.fh - 1];
                    iArr22[3] = iArr22[3] / 2;
                    this.eE[8] = true;
                    if (this.fj[this.fh - 1][0] == 0 && this.fj[this.fh - 1][1] == 0) {
                        this.fj[this.fh - 1][2] = 0;
                        this.fj[this.fh - 1][3] = 0;
                        this.fh = 0;
                        this.fi = 0;
                        this.eE[8] = false;
                    }
                }
                if ((this.ei[0] < 80 || this.ei[0] > 280) && this.fj[this.fh - 1][2] <= -100 && this.fj[this.fh - 1][3] <= -100) {
                    this.eE[8] = false;
                    this.fj[this.fh - 1][0] = 0;
                    this.fj[this.fh - 1][1] = 0;
                    this.fj[this.fh - 1][2] = 0;
                    this.fj[this.fh - 1][3] = 0;
                    this.slotCatIDs[this.fh - 1] = -1;
                    if (this.uniTextures[this.fh - 1].isLoaded()) {
                        this.uniTextures[this.fh - 1].reset();
                    }
                    this.gameStats1[0] = 9 - (this.fh - 1);
                    int i18 = 0;
                    while (this.gameStats1[0] != 0) {
                        if (this.gameStats1[0] > 0) {
                            this.gameStats1[0] -= 1;
                            this.fj[(this.fh - 1) + 1 + i18][2] = this.fj[(this.fh - 1) + i18][2];
                            this.fj[(this.fh - 1) + 1 + i18][3] = this.fj[(this.fh - 1) + i18][3];
                            this.fj[(this.fh - 1) + i18][2] = 0;
                            this.fj[(this.fh - 1) + i18][3] = 0;
                            this.fj[(this.fh - 1) + 1 + i18][0] = this.fg[((this.fh - 1) + 1) + i18][0] - (getCurrentXTouch() - this.fl);
                            this.fj[(this.fh - 1) + 1 + i18][1] = this.fg[((this.fh - 1) + 1) + i18][1] - (getCurrentYTouch() + this.fm);
                            this.fj[(this.fh - 1) + i18][0] = this.fg[((this.fh - 1) + 1) + i18][0] - this.fg[(this.fh - 1) + i18][0];
                            this.fj[(this.fh - 1) + i18][1] = this.fg[((this.fh - 1) + 1) + i18][1] - this.fg[(this.fh - 1) + i18][1];
                            this.uniTextures[10] = this.uniTextures[(this.fh - 1) + 1 + i18];
                            this.uniTextures[(this.fh - 1) + 1 + i18] = this.uniTextures[(this.fh - 1) + i18];
                            this.uniTextures[(this.fh - 1) + i18] = this.uniTextures[10];
                            this.gameStats1[1] = this.slotCatIDs[(this.fh - 1) + 1 + i18];
                            this.slotCatIDs[(this.fh - 1) + 1 + i18] = this.slotCatIDs[(this.fh - 1) + i18];
                            this.slotCatIDs[(this.fh - 1) + i18] = this.gameStats1[1];
                            i18++;
                        } else {
                            int[] iArr23 = this.gameStats1;
                            iArr23[0] = iArr23[0] + 1;
                            this.fj[((this.fh - 1) - 1) + i18][2] = this.fj[(this.fh - 1) + i18][2];
                            this.fj[((this.fh - 1) - 1) + i18][3] = this.fj[(this.fh - 1) + i18][3];
                            this.fj[(this.fh - 1) + i18][2] = 0;
                            this.fj[(this.fh - 1) + i18][3] = 0;
                            this.fj[((this.fh - 1) - 1) + i18][0] = this.fg[((this.fh - 1) - 1) + i18][0] - (getCurrentXTouch() - this.fl);
                            this.fj[((this.fh - 1) - 1) + i18][1] = this.fg[((this.fh - 1) - 1) + i18][1] - (getCurrentYTouch() + this.fm);
                            this.fj[(this.fh - 1) + i18][0] = this.fg[((this.fh - 1) - 1) + i18][0] - this.fg[(this.fh - 1) + i18][0];
                            this.fj[(this.fh - 1) + i18][1] = this.fg[((this.fh - 1) - 1) + i18][1] - this.fg[(this.fh - 1) + i18][1];
                            this.uniTextures[10] = this.uniTextures[((this.fh - 1) - 1) + i18];
                            this.uniTextures[((this.fh - 1) - 1) + i18] = this.uniTextures[(this.fh - 1) + i18];
                            this.uniTextures[(this.fh - 1) + i18] = this.uniTextures[10];
                            this.gameStats1[1] = this.slotCatIDs[((this.fh - 1) - 1) + i18];
                            this.slotCatIDs[((this.fh - 1) - 1) + i18] = this.slotCatIDs[(this.fh - 1) + i18];
                            this.slotCatIDs[(this.fh - 1) + i18] = this.gameStats1[1];
                            i18--;
                        }
                    }
                    this.fh = 0;
                }
            } else {
                this.eE[8] = false;
            }
            for (int i19 = 0; i19 < 10; i19++) {
                if (this.fh - 1 != i19) {
                    int[] iArr24 = this.fj[i19];
                    iArr24[0] = iArr24[0] / 2;
                    int[] iArr25 = this.fj[i19];
                    iArr25[1] = iArr25[1] / 2;
                }
            }
        } else {
            this.fi += 20;
            if (this.fi >= 127) {
                this.fi = 127;
            }
            this.fj[this.fh - 1][2] = (this.fj[this.fh - 1][2] * 2) + 1;
            this.fj[this.fh - 1][3] = (this.fj[this.fh - 1][3] * 2) + 1;
            if (this.fj[this.fh - 1][2] >= 40) {
                this.fj[this.fh - 1][2] = 40;
            }
            if (this.fj[this.fh - 1][3] >= 40) {
                this.fj[this.fh - 1][3] = 40;
            }
            int[] iArr26 = this.fj[this.fh - 1];
            iArr26[0] = iArr26[0] + (getCurrentXTouch() - getPreviousXTouch());
            int[] iArr27 = this.fj[this.fh - 1];
            iArr27[1] = iArr27[1] + (getCurrentYTouch() - getPreviousYTouch());
            for (int i20 = 0; i20 < 10; i20++) {
                if (this.fh - 1 != i20 && this.slotCatIDs[i20] != -1) {
                    if (isTouching(this.buttonCoordinates1[i20][0], this.buttonCoordinates1[i20][1], this.buttonCoordinates1[i20][2], this.buttonCoordinates1[i20][3])) {
                        this.gameStats1[0] = i20 - (this.fh - 1);
                        int i21 = 0;
                        while (this.gameStats1[0] != 0) {
                            if (this.gameStats1[0] > 0) {
                                this.gameStats1[0] -= 1;
                                this.fj[(this.fh - 1) + 1 + i21][2] = this.fj[(this.fh - 1) + i21][2];
                                this.fj[(this.fh - 1) + 1 + i21][3] = this.fj[(this.fh - 1) + i21][3];
                                this.fj[(this.fh - 1) + i21][2] = 0;
                                this.fj[(this.fh - 1) + i21][3] = 0;
                                this.fj[(this.fh - 1) + 1 + i21][0] = this.fg[((this.fh - 1) + 1) + i21][0] - (getCurrentXTouch() - this.fl);
                                this.fj[(this.fh - 1) + 1 + i21][1] = this.fg[((this.fh - 1) + 1) + i21][1] - (getCurrentYTouch() + this.fm);
                                this.fj[(this.fh - 1) + i21][0] = this.fg[((this.fh - 1) + 1) + i21][0] - this.fg[(this.fh - 1) + i21][0];
                                this.fj[(this.fh - 1) + i21][1] = this.fg[((this.fh - 1) + 1) + i21][1] - this.fg[(this.fh - 1) + i21][1];
                                this.uniTextures[10] = this.uniTextures[(this.fh - 1) + 1 + i21];
                                this.uniTextures[(this.fh - 1) + 1 + i21] = this.uniTextures[(this.fh - 1) + i21];
                                this.uniTextures[(this.fh - 1) + i21] = this.uniTextures[10];
                                this.gameStats1[1] = this.slotCatIDs[(this.fh - 1) + 1 + i21];
                                this.slotCatIDs[(this.fh - 1) + 1 + i21] = this.slotCatIDs[(this.fh - 1) + i21];
                                this.slotCatIDs[(this.fh - 1) + i21] = this.gameStats1[1];
                                i21++;
                            } else {
                                int[] iArr28 = this.gameStats1;
                                iArr28[0] = iArr28[0] + 1;
                                this.fj[((this.fh - 1) - 1) + i21][2] = this.fj[(this.fh - 1) + i21][2];
                                this.fj[((this.fh - 1) - 1) + i21][3] = this.fj[(this.fh - 1) + i21][3];
                                this.fj[(this.fh - 1) + i21][2] = 0;
                                this.fj[(this.fh - 1) + i21][3] = 0;
                                this.fj[((this.fh - 1) - 1) + i21][0] = this.fg[((this.fh - 1) - 1) + i21][0] - (getCurrentXTouch() - this.fl);
                                this.fj[((this.fh - 1) - 1) + i21][1] = this.fg[((this.fh - 1) - 1) + i21][1] - (getCurrentYTouch() + this.fm);
                                this.fj[(this.fh - 1) + i21][0] = this.fg[((this.fh - 1) - 1) + i21][0] - this.fg[(this.fh - 1) + i21][0];
                                this.fj[(this.fh - 1) + i21][1] = this.fg[((this.fh - 1) - 1) + i21][1] - this.fg[(this.fh - 1) + i21][1];
                                this.uniTextures[10] = this.uniTextures[((this.fh - 1) - 1) + i21];
                                this.uniTextures[((this.fh - 1) - 1) + i21] = this.uniTextures[(this.fh - 1) + i21];
                                this.uniTextures[(this.fh - 1) + i21] = this.uniTextures[10];
                                this.gameStats1[1] = this.slotCatIDs[((this.fh - 1) - 1) + i21];
                                this.slotCatIDs[((this.fh - 1) - 1) + i21] = this.slotCatIDs[(this.fh - 1) + i21];
                                this.slotCatIDs[(this.fh - 1) + i21] = this.gameStats1[1];
                                i21--;
                            }
                        }
                        this.fh = i20 + 1;
                    }
                    int[] iArr29 = this.fj[i20];
                    iArr29[0] = iArr29[0] / 2;
                    int[] iArr30 = this.fj[i20];
                    iArr30[1] = iArr30[1] / 2;
                }
            }
            this.ei[0] = getCurrentYTouch();
        }
        if (this.eE[0]) {
            int[] iArr31 = this.blinkFrame;
            iArr31[2] = iArr31[2] + 1;
            this.gm[0] = (this.gm[0] * 2) + 1;
            if (this.gm[0] >= 297) {
                this.gm[0] = 297;
                this.gm[1] = this.gm[1] / 2;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = getWidth();
                if (this.gm[1] <= 0) {
                    this.eE[0] = false;
                    this.blinkFrame[2] = 0;
                    this.previousScreen = 0;
                }
            } else {
                this.fP = fM[this.blinkFrame[2]];
            }
        } else if (this.eE[1]) {
            int[] iArr32 = this.blinkFrame;
            iArr32[2] = iArr32[2] + 1;
            this.gm[1] = (this.gm[1] * 2) + 1;
            if (this.gm[1] >= 297) {
                this.gm[1] = 297;
                this.gm[0] = this.gm[0] / 2;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = 0;
                if (this.gm[0] <= 0) {
                    this.blinkFrame[2] = 0;
                    screenTransition();
                    this.setScreenType(ScreenType.CAT_BASE);
                    this.screenLoadState = -1;
                    this.eE[1] = false;
                    return false;
                }
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
        } else if (this.gF[0]) {
            int[] iArr33 = this.blinkFrame;
            iArr33[6] = iArr33[6] + 1;
            if (this.blinkFrame[6] > getLength(fM) - 1) {
                this.fP = 0;
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[6]];
            }
            if (this.blinkFrame[6] > getLength(fM)) {
                this.blinkFrame[6] = 0;
                screenTransition();
                this.setScreenType(ScreenType.EQUIP);
                this.screenLoadState = -1;
                return false;
            }
        } else if (this.gF[1]) {
            int[] iArr34 = this.blinkFrame;
            iArr34[6] = iArr34[6] + 1;
            if (this.blinkFrame[6] > getLength(fM) - 1) {
                this.blinkFrame[6] = getLength(fM) - 1;
                this.fP = getWidth();
                this.blinkFrame[6] = 0;
                this.gF[1] = false;
            } else {
                this.fP = fM[this.blinkFrame[6]];
            }
        }
        this.blinkFrame[0] -= 1;
        if (this.blinkFrame[0] <= 0) {
            this.blinkFrame[0] = 0;
        }
        if (!this.gJ) {
            int[] iArr35 = this.blinkFrame;
            iArr35[3] = iArr35[3] + 1;
            int[] iArr36 = this.blinkFrame;
            iArr36[4] = iArr36[4] + 1;
        }
        if (this.eE[13]) {
            int[] iArr37 = this.blinkFrame;
            iArr37[2] = iArr37[2] + 1;
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.fP = 0;
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
            if (this.blinkFrame[2] > getLength(fM)) {
                this.fP = 0;
                this.blinkFrame[2] = 0;
                screenTransition();
                this.setScreenType(ScreenType.ITEM_SHOP);
                this.screenLoadState = -1;
                this.previousScreen = 3;
                int i22 = 0;
                for (int i23 = 0; i23 < getLength(this.ff); i23++) {
                    this.gT[i23] = this.ff[i23];
                    i22 = i23 + 1;
                }
                this.gT[i22] = this.gameStats1[0];
                return false;
            }
        }
        for (int i24 = 0; i24 < getLength(this.boxSize); i24++) {
            for (int i25 = 0; i25 < getLength(this.boxSize[i24]); i25++) {
                if (i25 == 0) {
                    if (i24 == this.ff[0]) {
                        this.boxSize[i24][i25] = (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 99) / 100) + 328;
                        if (this.gameStats1[0] > 0) {
                            this.boxSize[i24][i25] = 328 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 99) / 100);
                        }
                    } else if (i24 == this.ff[0] + 1) {
                        this.boxSize[i24][i25] = 229 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 99) / 100);
                    } else {
                        this.boxSize[i24][i25] = 229;
                    }
                    if (this.boxSize[i24][i25] >= 328) {
                        this.boxSize[i24][i25] = 328;
                    } else if (this.boxSize[i24][i25] <= 229) {
                        this.boxSize[i24][i25] = 229;
                    }
                } else if (i25 == 1) {
                    if (i24 == this.ff[0]) {
                        this.boxSize[i24][i25] = (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 79) / 100) + 263;
                        if (this.gameStats1[0] > 0) {
                            this.boxSize[i24][i25] = 263 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 79) / 100);
                        }
                    } else if (i24 == this.ff[0] + 1) {
                        this.boxSize[i24][i25] = 184 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 79) / 100);
                    } else {
                        this.boxSize[i24][i25] = 184;
                    }
                    if (this.boxSize[i24][i25] >= 263) {
                        this.boxSize[i24][i25] = 263;
                    } else if (this.boxSize[i24][i25] <= 184) {
                        this.boxSize[i24][i25] = 184;
                    }
                }
            }
        }
        if (this.gJ) {
            this.gK++;
            if (this.gK > getLength(eO) - 1) {
                this.gK = getLength(eO) - 1;
            }
        }
        if (this.gI) {
            this.gH++;
            if (this.gH > getLength(cC) - 1) {
                this.gH = 0;
                this.gI = false;
            }
            if (cC[this.gH] == 100 && this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1]) {
                if (this.bw[this.boxCatIDs[this.ff[2]]] == 0) {
                    this.bw[this.boxCatIDs[this.ff[2]]] = 1;
                    this.textTextures[this.ff[2]].drawText(this.unitExplanationText[this.boxCatIDs[this.ff[2]]][1][0], "FONT_SYSTEM_BOLD", 30, 1);
                    for (int i26 = this.gA[3]; i26 < this.gA[3] + 3; i26++) {
                        if (this.bw[this.boxCatIDs[this.ff[2]]] == 1) {
                            this.textTextures[i26].drawText(this.unitExplanationText[this.boxCatIDs[this.ff[2]]][1][(i26 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                    for (int i27 = 0; i27 < 10; i27++) {
                        if (this.slotCatIDs[i27] - 2 == this.boxCatIDs[this.ff[2]]) {
                            this.slotFormIDs[i27] = this.bw[this.slotCatIDs[i27] - 2];
                            if (this.uniTextures[i27].isLoaded()) {
                                this.uniTextures[i27].reset();
                            }
                            if (!this.uniTextures[i27].isLoaded()) {
                                if (this.slotCatIDs[i27] == -1) {
                                    this.uniTextures[i27].load(MyUtility.getString(String.format("uni.png", new Object[0])), MyUtility.getString(String.format("uni.imgcut", new Object[0])));
                                } else if (this.slotFormIDs[i27] == 0) {
                                    this.uniTextures[i27].load(MyUtility.getString(String.format("uni%03d_f%02d.png", this.slotCatIDs[i27] - 2, 0)), MyUtility.getString(String.format("uni%03d_f%02d.imgcut", this.slotCatIDs[i27] - 2, 0)));
                                } else if (this.slotFormIDs[i27] == 1) {
                                    this.uniTextures[i27].load(MyUtility.getString(String.format("uni%03d_c%02d.png", this.slotCatIDs[i27] - 2, 0)), MyUtility.getString(String.format("uni%03d_c%02d.imgcut", this.slotCatIDs[i27] - 2, 0)));
                                }
                            }
                        }
                    }
                } else if (this.bw[this.boxCatIDs[this.ff[2]]] == 1) {
                    this.bw[this.boxCatIDs[this.ff[2]]] = 0;
                    this.textTextures[this.ff[2]].drawText(this.unitExplanationText[this.boxCatIDs[this.ff[2]]][0][0], "FONT_SYSTEM_BOLD", 30, 1);
                    for (int i28 = this.gA[3]; i28 < this.gA[3] + 3; i28++) {
                        if (this.bw[this.boxCatIDs[this.ff[2]]] == 0) {
                            this.textTextures[i28].drawText(this.unitExplanationText[this.boxCatIDs[this.ff[2]]][0][(i28 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                    for (int i29 = 0; i29 < 10; i29++) {
                        if (this.slotCatIDs[i29] - 2 == this.boxCatIDs[this.ff[2]]) {
                            this.slotFormIDs[i29] = this.bw[this.slotCatIDs[i29] - 2];
                            if (this.uniTextures[i29].isLoaded()) {
                                this.uniTextures[i29].reset();
                            }
                            if (!this.uniTextures[i29].isLoaded()) {
                                if (this.slotCatIDs[i29] == -1) {
                                    this.uniTextures[i29].load(MyUtility.getString(String.format("uni.png", new Object[0])), MyUtility.getString(String.format("uni.imgcut", new Object[0])));
                                } else if (this.slotFormIDs[i29] == 0) {
                                    this.uniTextures[i29].load(MyUtility.getString(String.format("uni%03d_f%02d.png", this.slotCatIDs[i29] - 2, 0)), MyUtility.getString(String.format("uni%03d_f%02d.imgcut", this.slotCatIDs[i29] - 2, 0)));
                                } else if (this.slotFormIDs[i29] == 1) {
                                    this.uniTextures[i29].load(MyUtility.getString(String.format("uni%03d_c%02d.png", this.slotCatIDs[i29] - 2, 0)), MyUtility.getString(String.format("uni%03d_c%02d.imgcut", this.slotCatIDs[i29] - 2, 0)));
                                }
                            }
                        }
                    }
                }
                if (this.uiTextures[this.ff[2] + 11].isLoaded()) {
                    this.uiTextures[this.ff[2] + 11].reset();
                }
                if (this.uiTextures[this.ff[2] + 11].isLoaded()) {
                    this.uiTextures[this.ff[2] + 11].reset();
                }
                if (!this.uiTextures[this.ff[2] + 11].isLoaded()) {
                    if (this.bw[this.boxCatIDs[this.ff[2]]] == 0) {
                        this.uiTextures[this.ff[2] + 11].load(MyUtility.getString(String.format("udi%03d_f.png", this.boxCatIDs[this.ff[2]])), MyUtility.getString(String.format("udi%03d_f.imgcut", this.boxCatIDs[this.ff[2]])));
                    } else {
                        this.uiTextures[this.ff[2] + 11].load(MyUtility.getString(String.format("udi%03d_c.png", this.boxCatIDs[this.ff[2]])), MyUtility.getString(String.format("udi%03d_c.imgcut", this.boxCatIDs[this.ff[2]])));
                    }
                }
            }
        }
        if (this.eE[0] || this.eE[1] || this.eE[13] || this.gF[0] || this.gF[1] || this.eb || this.gI || this.eE[9]) {
            if (this.fx[10] == 0 && !this.eE[1]) {
                this.eE[10] = false;
            }
        } else if ((isPointerDown() || isPointerUp()) && isTouching(this.buttonCoordinates1[10][0], this.buttonCoordinates1[10][1], this.buttonCoordinates1[10][2], this.buttonCoordinates1[10][3])) {
            this.eE[10] = true;
        } else if (this.fx[10] == 0 && !this.eE[1]) {
            this.eE[10] = false;
        }
        return true;
    }

    int a(int i, int i2, int i3) {
        int i4;
        int i5;
        int i6;
        int i7;
        char c = i == 0 ? (char) 1 : (char) 0;
        if (i == 0) {
            i4 = this.unitBattleStats[0][i2][3] - this.unitBattleStats[0][i2][13];
            i5 = this.unitBattleStats[0][i2][3];
        } else {
            i4 = this.unitBattleStats[1][i2][3];
            i5 = this.unitBattleStats[1][i2][3] + this.unitBattleStats[1][i2][13];
        }
        if (this.unitBattleStats[c][i3][0] > 0 && this.unitBattleStats[c][i3][1] <= 2) {
            if (i == 0) {
                i6 = this.unitBattleStats[c][i3][3] - this.unitBattleStats[c][i3][14];
                i7 = this.unitBattleStats[c][i3][3] - this.unitBattleStats[c][i3][15];
            } else {
                i6 = this.unitBattleStats[c][i3][3] + this.unitBattleStats[c][i3][15];
                i7 = this.unitBattleStats[c][i3][14] + this.unitBattleStats[c][i3][3];
            }
            if (i4 <= i6 && i5 >= i7) {
                return 1;
            }
        }
        return 0;
    }

    int a(int i, int i2, int i3, int i4, int i5, int i6) {
        if (i2 == -1) {
            return -2;
        }
        for (int i7 = 1; i7 < getLength(this.unitBattleStats[i]); i7++) {
            if (this.unitBattleStats[i][i7][0] == 0 && this.unitBattleStats[i][i7][0] == 0) {
                this.unitBattleStats[i][i7][0] = i2;
                this.unitBattleStats[i][i7][1] = 0;
                this.unitBattleStats[i][i7][2] = 0;
                this.unitBattleStats[i][i7][4] = 4480;
                this.unitBattleStats[i][i7][5] = i4;
                int i8 = (i5 - i4) + 1;
                if (i8 <= 0) {
                    i8 = 1;
                }
                int[] iArr = this.unitBattleStats[i][i7];
                iArr[5] = aMath.rand(i8) + iArr[5];
                this.unitBattleStats[i][i7][6] = i3;
                this.unitBattleStats[i][i7][18] = 0;
                this.unitBattleStats[i][i7][19] = 0;
                this.unitBattleStats[i][i7][22] = 0;
                this.unitBattleStats[i][i7][23] = 0;
                if (i != 0) {
                    this.unitBattleStats[i][i7][3] = 2800;
                    this.unitBattleStats[i][i7][7] = ((this.enemyStats[i2][0] * (Y[this.eQ] + 10)) + 5) / 10;
                    this.unitBattleStats[i][i7][8] = this.unitBattleStats[i][i7][7];
                    this.unitBattleStats[i][i7][9] = this.enemyStats[i2][1];
                    this.unitBattleStats[i][i7][10] = this.enemyStats[i2][2];
                    this.unitBattleStats[i][i7][11] = ((this.enemyStats[i2][3] * (Y[this.eQ] + 10)) + 5) / 10;
                    this.unitBattleStats[i][i7][12] = this.enemyStats[i2][4];
                    this.unitBattleStats[i][i7][13] = this.enemyStats[i2][5];
                    this.unitBattleStats[i][i7][14] = this.enemyStats[i2][7];
                    this.unitBattleStats[i][i7][15] = this.enemyStats[i2][8];
                    this.unitBattleStats[i][i7][16] = this.enemyStats[i2][9];
                    this.unitBattleStats[i][i7][17] = this.enemyStats[i2][10];
                    this.unitBattleStats[i][i7][20] = this.enemyStats[i2][11];
                    this.unitBattleStats[i][i7][21] = this.enemyStats[i2][12];
                    return i7;
                }
                this.unitBattleStats[i][i7][3] = this.bV[0] - 2800;
                this.unitBattleStats[i][i7][7] = ((this.unitStats[i2][i6][0] * ((i3 * 2) + 10)) + 5) / 10;
                int i9 = 0;
                for (int i10 = 0; i10 < 10; i10++) {
                    i9 += (cB[6] * this.bO[i10][6]) / 100;
                }
                int[] iArr2 = this.unitBattleStats[i][i7];
                iArr2[7] = ((i9 * this.unitBattleStats[i][i7][7]) / 100) + iArr2[7];
                this.unitBattleStats[i][i7][8] = this.unitBattleStats[i][i7][7];
                this.unitBattleStats[i][i7][9] = this.unitStats[i2][i6][1];
                this.unitBattleStats[i][i7][10] = this.unitStats[i2][i6][2];
                this.unitBattleStats[i][i7][11] = ((this.unitStats[i2][i6][3] * ((i3 * 2) + 10)) + 5) / 10;
                int i11 = 0;
                for (int i12 = 0; i12 < 10; i12++) {
                    i11 += (cB[7] * this.bO[i12][7]) / 100;
                }
                int[] iArr3 = this.unitBattleStats[i][i7];
                iArr3[11] = ((i11 * this.unitBattleStats[i][i7][11]) / 100) + iArr3[11];
                this.unitBattleStats[i][i7][12] = this.unitStats[i2][i6][4];
                this.unitBattleStats[i][i7][13] = this.unitStats[i2][i6][5];
                this.unitBattleStats[i][i7][14] = this.unitStats[i2][i6][8];
                this.unitBattleStats[i][i7][15] = this.unitStats[i2][i6][9];
                this.unitBattleStats[i][i7][16] = this.unitStats[i2][i6][10];
                this.unitBattleStats[i][i7][17] = this.unitStats[i2][i6][11];
                this.unitBattleStats[i][i7][20] = this.unitStats[i2][i6][12];
                this.unitBattleStats[i][i7][21] = this.unitStats[i2][i6][13];
                return i7;
            }
        }
        return -1;
    }

    int getDateSeconds(Date date) {
        return (int) (date.getTime() / 1000);
    }

    String a(int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12, int[] iArr, int i13, int i14, int i15, int[] iArr2, int[] iArr3) {
        aStringBuffer astringbuffer = new aStringBuffer();
        astringbuffer.append(String.format("log=1&l=%s&sts=%d&rd=%d&ps=%d&aris=%d&cfrd=%d&cfps=%d&gf=%d&inv=%d&fb=%d&tw=%d&ln=%d&rv=%d", MyUtility.getString("lang"), i, i2 + 1, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12));
        for (int i16 = 0; i16 < 8; i16++) {
            astringbuffer.append(String.format("&cf%d=%d", i16, iArr[i16]));
        }
        astringbuffer.append(String.format("&ucu=%d&uco=%d&uch=%d", i13, i14, i15));
        for (int i17 = 0; i17 < 11; i17++) {
            astringbuffer.append(String.format("&uit%d=%d", i17, iArr2[i17]));
        }
        for (int i18 = 0; i18 < 4; i18++) {
            astringbuffer.append(String.format("&ugo%d=%d", i18, iArr3[i18]));
        }
        return astringbuffer.toString();
    }

    @Override // jp.co.ponos.battlecats.Game
    public void onCreate() {

        setConstants();
        for (int i = 0; i < getLength(this.bF); i++) {
            this.bF[i] = false;
        }
        //aAd.b().k();
        this.e = null;
        ag();

        if (aString.isEqual(MyUtility.getString("lang"), "ja")) {
            this.q = 30;
            this.regionState = 0;
        } else if (aString.isEqual(MyUtility.getString("lang"), "en")) {
            this.q = 15;
            this.regionState = 1;
        }
        aSound.getInstance().loadMany(this.hL, 43);
        aResourceFileStream aresourcefilestream = new aResourceFileStream();
        if (aresourcefilestream.openRead(String.format("OP_%s.csv", MyUtility.getString("lang")))) {
            for (int i2 = 0; i2 < getLength(this.openingText); i2++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                this.openingText[i2] = aresourcefilestream.getString(0);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("ED_%s.csv", MyUtility.getString("lang")))) {
            for (int i3 = 0; i3 < getLength(this.endingText); i3++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                this.endingText[i3] = aresourcefilestream.getString(0);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("EnemyPictureBook_%s.csv", MyUtility.getString("lang")))) {
            for (int i4 = 0; i4 < getLength(this.enemyPictureBookText); i4++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                for (int i5 = 0; i5 < getLength(this.enemyPictureBookText[i4]); i5++) {
                    this.enemyPictureBookText[i4][i5] = aresourcefilestream.getString(i5);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("EnemyPictureBookQuestion_%s.csv", MyUtility.getString("lang")))) {
            aresourcefilestream.readLine();
            for (int i6 = 0; i6 < getLength(this.enemyPictureBookQuestionText); i6++) {
                this.enemyPictureBookQuestionText[i6] = aresourcefilestream.getString(i6);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("StageName_%s.csv", MyUtility.getString("lang")))) {
            for (int i7 = 0; i7 < getLength(this.stageNameText); i7++) {
                aresourcefilestream.readLine();
                this.stageNameText[i7] = aresourcefilestream.getString(0);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("Treasure1_%s.csv", MyUtility.getString("lang")))) {
            for (int i8 = 0; i8 < getLength(this.treasure1Text); i8++) {
                aresourcefilestream.readLine();
                this.treasure1Text[i8] = aresourcefilestream.getString(0);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("Treasure2_%s.csv", MyUtility.getString("lang")))) {
            for (int i9 = 0; i9 < getLength(this.treasure2Text); i9++) {
                aresourcefilestream.readLine();
                this.treasure2Text[i9] = aresourcefilestream.getString(0);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("Treasure3_%s.csv", MyUtility.getString("lang")))) {
            for (int i10 = 0; i10 < getLength(this.treasure3Text); i10++) {
                aresourcefilestream.readLine();
                for (int i11 = 0; i11 < getLength(this.treasure3Text[i10]); i11++) {
                    this.treasure3Text[i10][i11] = aresourcefilestream.getString(i11);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("Warning1_%s.csv", MyUtility.getString("lang")))) {
            for (int i12 = 0; i12 < getLength(this.warning1Text); i12++) {
                aresourcefilestream.readLine();
                this.warning1Text[i12] = aresourcefilestream.getString(0);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("Warning2_%s.csv", MyUtility.getString("lang")))) {
            for (int i13 = 0; i13 < getLength(this.warning2Text); i13++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                for (int i14 = 0; i14 < getLength(this.warning2Text[i13]); i14++) {
                    this.warning2Text[i13][i14] = aresourcefilestream.getString(i14);
                }
            }
        }
        if (aresourcefilestream.openRead(String.format("MainMenuW_%s.csv", MyUtility.getString("lang")))) {
            for (int i15 = 0; i15 < getLength(this.mainMenuWText); i15++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                for (int i16 = 0; i16 < getLength(this.mainMenuWText[i15]); i16++) {
                    this.mainMenuWText[i15][i16] = aresourcefilestream.getString(i16);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("MainMenuP_%s.csv", MyUtility.getString("lang")))) {
            for (int i17 = 0; i17 < getLength(this.mainMenuPText); i17++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                for (int i18 = 0; i18 < getLength(this.mainMenuPText[i17]); i18++) {
                    this.mainMenuPText[i17][i18] = aresourcefilestream.getString(i18);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("MainMenuU_%s.csv", MyUtility.getString("lang")))) {
            for (int i19 = 0; i19 < getLength(this.mainMenuUText); i19++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                for (int i20 = 0; i20 < getLength(this.mainMenuUText[i19]); i20++) {
                    this.mainMenuUText[i19][i20] = aresourcefilestream.getString(i20);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("MainMenuT_%s.csv", MyUtility.getString("lang")))) {
            for (int i21 = 0; i21 < getLength(this.mainMenuTText); i21++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                for (int i22 = 0; i22 < getLength(this.mainMenuTText[i21]); i22++) {
                    this.mainMenuTText[i21][i22] = aresourcefilestream.getString(i22);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("MainMenuB_%s.csv", MyUtility.getString("lang")))) {
            for (int i23 = 0; i23 < getLength(this.mainMenuBText); i23++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                for (int i24 = 0; i24 < getLength(this.mainMenuBText[i23]); i24++) {
                    this.mainMenuBText[i23][i24] = aresourcefilestream.getString(i24);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("Unit_Explanation_Off_%s.csv", MyUtility.getString("lang")))) {
            for (int i25 = 0; i25 < getLength(this.unitExplanationOffText); i25++) {
                aresourcefilestream.readLine();
                for (int i26 = 0; i26 < getLength(this.unitExplanationOffText[i25]); i26++) {
                    this.unitExplanationOffText[i25][i26] = aresourcefilestream.getString(i26);
                }
            }
        }
        aresourcefilestream.close();
        int i27 = 0;
        while (true) {
            int i28 = i27;
            if (i28 >= 26) {
                break;
            }
            if (aresourcefilestream.openRead(String.format("Unit_Explanation%d_%s.csv", i28 + 1, MyUtility.getString("lang")))) {
                for (int i29 = 0; i29 < getLength(this.unitExplanationText[i28]); i29++) {
                    aresourcefilestream.readLine();
                    for (int i30 = 0; i30 < getLength(this.unitExplanationText[i28][i29]); i30++) {
                        this.unitExplanationText[i28][i29][i30] = aresourcefilestream.getString(i30);
                    }
                }
            }
            i27 = i28 + 1;
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("God_Explanation_%s.csv", MyUtility.getString("lang")))) {
            aresourcefilestream.readLine();
            for (int i31 = 0; i31 < getLength(this.godExplanationText); i31++) {
                this.godExplanationText[i31] = aresourcefilestream.getString(i31);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("StageFirstMessage_%s.csv", MyUtility.getString("lang")))) {
            for (int i32 = 0; i32 < getLength(this.stageFirstMessageText); i32++) {
                aresourcefilestream.readLine();
                for (int i33 = 0; i33 < getLength(this.stageFirstMessageText[i32]); i33++) {
                    this.stageFirstMessageText[i32][i33] = aresourcefilestream.getString(i33);
                }
            }
        }
        aresourcefilestream.close();
        for (int i34 = 0; i34 < getLength(this.catExplanationText); i34++) {
            if (aresourcefilestream.openRead(String.format("Cat_Explanation%d_%s.csv", i34 + 1, MyUtility.getString("lang")))) {
                aresourcefilestream.readLine();
                for (int i35 = 0; i35 < getLength(this.catExplanationText[i34]); i35++) {
                    this.catExplanationText[i34][i35] = aresourcefilestream.getString(i35);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("ChallengeMode_%s.csv", MyUtility.getString("lang")))) {
            aresourcefilestream.readLine();
            for (int i36 = 0; i36 < getLength(this.challengeModeText); i36++) {
                this.challengeModeText[i36] = aresourcefilestream.getString(i36);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("PageName_%s.csv", MyUtility.getString("lang")))) {
            for (int i37 = 0; i37 < getLength(this.pageNameText); i37++) {
                aresourcefilestream.readLine();
                this.pageNameText[i37] = aresourcefilestream.getString(0);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("FirstLose_%s.csv", MyUtility.getString("lang")))) {
            aresourcefilestream.readLine();
            for (int i38 = 0; i38 < getLength(this.firstLoseText); i38++) {
                this.firstLoseText[i38] = aresourcefilestream.getString(i38);
            }
        }
        aresourcefilestream.close();
        for (int i39 = 0; i39 < getLength(this.loseText); i39++) {
            if (aresourcefilestream.openRead(String.format("Lose%d_%s.csv", i39 + 1, MyUtility.getString("lang")))) {
                for (int i40 = 0; i40 < getLength(this.loseText[i39]); i40++) {
                    if (this.regionState == 0) {
                        aresourcefilestream.readLine();
                    } else if (this.regionState == 1) {
                        aresourcefilestream.readLine("\\*");
                    }
                    for (int i41 = 0; i41 < getLength(this.loseText[i39][i40]); i41++) {
                        this.loseText[i39][i40][i41] = aresourcefilestream.getString(i41);
                    }
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("Option_%s.csv", MyUtility.getString("lang")))) {
            for (int i42 = 0; i42 < getLength(this.optionText); i42++) {
                aresourcefilestream.readLine();
                this.optionText[i42] = aresourcefilestream.getString(0);
            }
        }
        if (aresourcefilestream.openRead(String.format("ItemName_%s.csv", MyUtility.getString("lang")))) {
            for (int i43 = 0; i43 < getLength(this.itemNameText); i43++) {
                aresourcefilestream.readLine();
                this.itemNameText[i43] = aresourcefilestream.getString(0);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("Item_Explanation_%s.csv", MyUtility.getString("lang")))) {
            for (int i44 = 0; i44 < getLength(this.itemExplanationText); i44++) {
                aresourcefilestream.readLine();
                for (int i45 = 0; i45 < getLength(this.itemExplanationText[i44]); i45++) {
                    this.itemExplanationText[i44][i45] = aresourcefilestream.getString(i45);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("MainMenuPopUp_%s.csv", MyUtility.getString("lang")))) {
            for (int i46 = 0; i46 < getLength(this.mainMenuPopupText); i46++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                for (int i47 = 0; i47 < getLength(this.mainMenuPopupText[i46]); i47++) {
                    this.mainMenuPopupText[i46][i47] = aresourcefilestream.getString(i47);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("Tutorial_%s.csv", MyUtility.getString("lang")))) {
            for (int i48 = 0; i48 < getLength(this.tutorialText); i48++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                for (int i49 = 0; i49 < getLength(this.tutorialText[i48]); i49++) {
                    this.tutorialText[i48][i49] = aresourcefilestream.getString(i49);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("God1_%s.csv", MyUtility.getString("lang")))) {
            for (int i50 = 0; i50 < getLength(this.god1Text); i50++) {
                aresourcefilestream.readLine();
                for (int i51 = 0; i51 < getLength(this.god1Text[i50]); i51++) {
                    this.god1Text[i50][i51] = aresourcefilestream.getString(i51);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("God2_%s.csv", MyUtility.getString("lang")))) {
            for (int i52 = 0; i52 < getLength(this.god2Text); i52++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                for (int i53 = 0; i53 < getLength(this.god2Text[i52]); i53++) {
                    this.god2Text[i52][i53] = aresourcefilestream.getString(i53);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("God3_%s.csv", MyUtility.getString("lang")))) {
            for (int i54 = 0; i54 < getLength(this.god3Text); i54++) {
                aresourcefilestream.readLine();
                for (int i55 = 0; i55 < getLength(this.god3Text[i54]); i55++) {
                    this.god3Text[i54][i55] = aresourcefilestream.getString(i55);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("God4_%s.csv", MyUtility.getString("lang")))) {
            for (int i56 = 0; i56 < getLength(this.god4Text); i56++) {
                aresourcefilestream.readLine();
                for (int i57 = 0; i57 < getLength(this.god4Text[i56]); i57++) {
                    this.god4Text[i56][i57] = aresourcefilestream.getString(i57);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("GodName_%s.csv", MyUtility.getString("lang")))) {
            aresourcefilestream.readLine();
            this.godNameText = aresourcefilestream.getString(0);
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("GodItemName_%s.csv", MyUtility.getString("lang")))) {
            for (int i58 = 0; i58 < getLength(this.godItemNameText); i58++) {
                aresourcefilestream.readLine();
                this.godItemNameText[i58] = aresourcefilestream.getString(0);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("GodItemExplanation_%s.csv", MyUtility.getString("lang")))) {
            for (int i59 = 0; i59 < getLength(this.godItemExplanationText); i59++) {
                aresourcefilestream.readLine();
                for (int i60 = 0; i60 < getLength(this.godItemExplanationText[i59]); i60++) {
                    this.godItemExplanationText[i59][i60] = aresourcefilestream.getString(i60);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("ED_Message_%s.csv", MyUtility.getString("lang")))) {
            for (int i61 = 0; i61 < getLength(this.endingMessageText); i61++) {
                aresourcefilestream.readLine();
                for (int i62 = 0; i62 < getLength(this.endingMessageText[i61]); i62++) {
                    this.endingMessageText[i61][i62] = aresourcefilestream.getString(i62);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("PopUpMessage_%s.csv", MyUtility.getString("lang")))) {
            for (int i63 = 0; i63 < getLength(this.popupMessageText); i63++) {
                aresourcefilestream.readLine();
                for (int i64 = 0; i64 < getLength(this.popupMessageText[i63]); i64++) {
                    this.popupMessageText[i63][i64] = aresourcefilestream.getString(i64);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("Category_Explanation_%s.csv", MyUtility.getString("lang")))) {
            for (int i65 = 0; i65 < getLength(this.categoryExplanation); i65++) {
                aresourcefilestream.readLine();
                for (int i66 = 0; i66 < getLength(this.categoryExplanation[i65]); i66++) {
                    this.categoryExplanation[i65][i66] = aresourcefilestream.getString(i66);
                }
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("StampMessage_%s.csv", MyUtility.getString("lang")))) {
            for (int i67 = 0; i67 < getLength(this.stampMessageText); i67++) {
                if (this.regionState == 0) {
                    aresourcefilestream.readLine();
                } else if (this.regionState == 1) {
                    aresourcefilestream.readLine("\\*");
                }
                this.stampMessageText[i67] = aresourcefilestream.getString(0);
            }
        }
        aresourcefilestream.close();
        if (aresourcefilestream.openRead(String.format("GiftMessage_%s.csv", MyUtility.getString("lang")))) {
            for (int i68 = 0; i68 < getLength(this.giftMessageText); i68++) {
                aresourcefilestream.readLine();
                for (int i69 = 0; i69 < getLength(this.giftMessageText[i68]); i69++) {
                    this.giftMessageText[i68][i69] = aresourcefilestream.getString(i69);
                }
            }
        }
        aresourcefilestream.close();

        this.calendar = Calendar.getInstance();
        this.year = this.calendar.get(Calendar.YEAR);
        for (int i70 = 0; i70 < getLength(this.battleData); i70++) {
            this.battleData[i70] = 0;
        }
        b(true);
        this.zoomLevel = 10000;
        this.pointerID = -1;
        if (MyUtility.shouldOffsetY()) {
            this.eZ = 40;
        } else {
            this.eZ = 0;
        }
        this.gu = false;
        this.gw = 0;
        for (int i71 = 0; i71 < getLength(this.gv); i71++) {
            this.gv[i71] = 0;
        }
        for (int i72 = 0; i72 < getLength(this.textTextures); i72++) {
            this.textTextures[i72] = new aTexture();
        }
        for (int i73 = 0; i73 < getLength(this.uiTextures); i73++) {
            this.uiTextures[i73] = new aTexture();
        }
        for (int i74 = 0; i74 < getLength(this.settingsMenuTexture); i74++) {
            this.settingsMenuTexture[i74] = new aTexture();
        }
        for (int i75 = 0; i75 < getLength(this.unitTexturesF); i75++) {
            this.unitTexturesF[i75] = new aTexture();
        }
        for (int i76 = 0; i76 < getLength(this.unitTexturesC); i76++) {
            this.unitTexturesC[i76] = new aTexture();
        }
        for (int i77 = 0; i77 < getLength(this.enemyTextures); i77++) {
            this.enemyTextures[i77] = new aTexture();
        }
        for (int i78 = 0; i78 < getLength(this.godTexture); i78++) {
            this.godTexture[i78] = new aTexture();
        }
        for (int i79 = 0; i79 < getLength(this.catBaseTexture); i79++) {
            this.catBaseTexture[i79] = new aTexture();
        }
        for (int i80 = 0; i80 < getLength(this.uniTextures); i80++) {
            this.uniTextures[i80] = new aTexture();
        }
        for (int i81 = 0; i81 < getLength(this.openingTexture); i81++) {
            this.openingTexture[i81] = new aTexture();
        }
        for (int i82 = 0; i82 < getLength(this.stampTextures); i82++) {
            this.stampTextures[i82] = new aTexture();
        }
        for (int i83 = 0; i83 < getLength(this.legendTextures); i83++) {
            this.legendTextures[i83] = new aTexture();
        }
        for (int i84 = 0; i84 < getLength(this.openingModel); i84++) {
            this.openingModel[i84] = new aModel();
        }
        for (int i85 = 0; i85 < getLength(this.unitSlotModels); i85++) {
            this.unitSlotModels[i85] = new aModel();
        }
        for (int i86 = 0; i86 < getLength(this.enemySlotModels); i86++) {
            this.enemySlotModels[i86] = new aModel();
        }
        for (int i87 = 0; i87 < getLength(this.godModel); i87++) {
            for (int i88 = 0; i88 < getLength(this.godModel[i87]); i88++) {
                this.godModel[i87][i88] = new aModel();
            }
        }
        for (int i89 = 0; i89 < getLength(this.catBaseModel); i89++) {
            this.catBaseModel[i89] = new aModel();
        }
        for (int i90 = 0; i90 < getLength(this.stampModels); i90++) {
            this.stampModels[i90] = new aModel();
        }
        this.aJ = new aModel();
        for (int i91 = 0; i91 < getLength(this.openingAnim); i91++) {
            this.openingAnim[i91] = new aModelAnimation();
        }
        for (int i92 = 0; i92 < getLength(this.unitSlotAnims); i92++) {
            for (int i93 = 0; i93 < getLength(this.unitSlotAnims[i92]); i93++) {
                this.unitSlotAnims[i92][i93] = new aModelAnimation();
            }
        }
        for (int i94 = 0; i94 < getLength(this.enemySlotAnims); i94++) {
            for (int i95 = 0; i95 < getLength(this.enemySlotAnims[i94]); i95++) {
                this.enemySlotAnims[i94][i95] = new aModelAnimation();
            }
        }
        for (int i96 = 0; i96 < getLength(this.godAnim); i96++) {
            for (int i97 = 0; i97 < getLength(this.godAnim[i96]); i97++) {
                this.godAnim[i96][i97] = new aModelAnimation();
            }
        }
        for (int i98 = 0; i98 < getLength(this.catBaseAnim); i98++) {
            for (int i99 = 0; i99 < getLength(this.catBaseAnim[i98]); i99++) {
                this.catBaseAnim[i98][i99] = new aModelAnimation();
            }
        }
        for (int i100 = 0; i100 < getLength(this.stampAnims); i100++) {
            this.stampAnims[i100] = new aModelAnimation();
        }
        for (int i101 = 0; i101 < getLength(this.legendAnims); i101++) {
            this.legendAnims[i101] = new aModelAnimation();
        }
        this.popupTexture = new aTexture();
        this.newTexture = new aTexture();
        this.arrowTexture = new aTexture();
        for (int i102 = 0; i102 < getLength(this.warningTextures); i102++) {
            this.warningTextures[i102] = new aTexture();
        }
        for (int i103 = 0; i103 < getLength(this.textTextures2); i103++) {
            this.textTextures2[i103] = new aTexture();
        }
        for (int i104 = 0; i104 < getLength(this.tutorialTextTextures); i104++) {
            this.tutorialTextTextures[i104] = new aTexture();
        }

        if (aLoad()) {
            if (this.aZ == 0) {
                this.aV = 2;
                this.currentEnergy = 100;
                this.calendar = Calendar.getInstance();
                for (int i105 = 0; i105 < 2; i105++) {
                    this.years[i105] = this.calendar.get(Calendar.YEAR);
                    this.months[i105] = this.calendar.get(Calendar.MONTH);
                    this.days[i105] = this.calendar.get(Calendar.DAY_OF_MONTH);
                }
                this.years[1] = 0;
                this.months[1] = 0;
                this.days[1] = 0;
                this.hour = this.calendar.get(Calendar.HOUR_OF_DAY);
                this.minute = this.calendar.get(Calendar.MINUTE);
                this.second = this.calendar.get(Calendar.SECOND);
                this.bl = 0;
                for (int i106 = 0; i106 < getLength(this.bm); i106++) {
                    this.bm[i106] = 0;
                }
                this.bn = 0;
                this.bo = 0;
                this.aU = 0;
                this.aW = 0;
                this.aX = 0;
                this.aY = 0;
                this.aZ = 0;
                this.ba = 0;
                for (int i107 = 0; i107 < getLength(this.bc); i107++) {
                    this.bc[i107] = 0;
                }
                this.bd = 0;
                this.previousScreen = 0;
                this.bf = 0;
                for (int i108 = 0; i108 < 10; i108++) {
                    this.bp[i108] = 0;
                }
                for (int i109 = 0; i109 < 10; i109++) {
                    this.bq[i109] = 0;
                }
                int i110 = 0;
                while (true) {
                    int i111 = i110;
                    if (i111 >= 10) {
                        break;
                    }
                    for (int i112 = 0; i112 < getLength(this.br[i111]); i112++) {
                        this.br[i111][i112] = 0;
                    }
                    i110 = i111 + 1;
                }
                int i113 = 0;
                while (true) {
                    int i114 = i113;
                    if (i114 >= 10) {
                        break;
                    }
                    for (int i115 = 0; i115 < getLength(this.bs[i114]); i115++) {
                        this.bs[i114][i115] = 0;
                    }
                    i113 = i114 + 1;
                }
                for (int i116 = 0; i116 < 30; i116++) {
                    this.bt[i116] = 0;
                }
                for (int i117 = 0; i117 < 26; i117++) {
                    this.bu[i117] = 0;
                }
                this.bu[0] = 1;
                for (int i118 = 0; i118 < 26; i118++) {
                    this.baseUpgrades[i118] = 0;
                }
                for (int i119 = 0; i119 < getLength(this.slotCatIDs); i119++) {
                    this.slotCatIDs[i119] = -1;
                }
                this.slotCatIDs[0] = 2;
                for (int i120 = 0; i120 < 26; i120++) {
                    this.bw[i120] = 0;
                }
                for (int i121 = 0; i121 < getLength(this.bx); i121++) {
                    this.bx[i121] = 0;
                }
                this.bh = 0;
                this.bi = 10;
                this.bj = 0;
                for (int i122 = 0; i122 < getLength(this.by); i122++) {
                    this.by[i122] = 0;
                }
                for (int i123 = 0; i123 < getLength(this.bz); i123++) {
                    this.bz[i123] = 0;
                }
                for (int i124 = 0; i124 < getLength(this.bB); i124++) {
                    this.bB[i124] = 0;
                }
                this.bg = 0;
            }

            this.v = false;
            if (this.ht[1] == 0) {
                this.ht[0] = (int) MyUtility.getTimeStamp();
                this.ht[1] = 1;
                this.hu[1] = (int) MyUtility.getTimeStamp();
                this.hw[2] = (int) MyUtility.getTimeStamp();
            } else {
                if (((int) MyUtility.getTimeStamp()) - this.hu[1] >= 86400) {
                    this.hu[1] = (int) MyUtility.getTimeStamp();
                    int[] iArr = this.hu;
                    iArr[0] = iArr[0] + 1;
                    if (this.hu[0] >= 999999999) {
                        this.hu[0] = 999999999;
                    }
                }
                int[] iArr2 = this.hw;
                iArr2[0] = iArr2[0] * this.hw[1];
                int[] iArr3 = this.hw;
                iArr3[1] = iArr3[1] + 1;
                int[] iArr4 = this.hw;
                iArr4[0] = iArr4[0] + (((int) MyUtility.getTimeStamp()) - this.hw[2]);
                this.hw[2] = (int) MyUtility.getTimeStamp();
                int[] iArr5 = this.hw;
                iArr5[0] = iArr5[0] / this.hw[1];
            }
            int i125 = 0;
            for (int i126 = 9; i126 < 26; i126++) {
                i125 += this.bu[i126] << (i126 - 9);
            }
            int i127 = this.aX;
            if (this.aX >= 2 && this.bq[this.aX] >= 48) {
                i127++;
            }
            //aAd.b().a(a(this.ht[0], this.hu[0], this.hv, this.hw[0], this.hy, this.hz, i127, this.hB, this.hC[0], this.hC[1], this.hC[2], this.hC[3], this.hx, this.hG, this.hF, i125, this.hD, this.hE));
            ae();
            this.isScrolling = false;
            aScoreUploader.getInstance().setScoreInstance(this.c2);
            aScoreUploader.getInstance().c();

            //new String[1][0] = "battlecats_score";
            if (this.popupTexture.isLoaded()) {
                this.popupTexture.reset();
            }
            if (!this.popupTexture.isLoaded()) {
                this.popupTexture.load(MyUtility.getString(String.format("img%03d.png", 5)), MyUtility.getString(String.format("img%03d.imgcut", 5)));
            }
            if (this.newTexture.isLoaded()) {
                this.newTexture.reset();
            }
            if (!this.newTexture.isLoaded()) {
                this.newTexture.load(MyUtility.getString(String.format("img%03d.png", 34)), MyUtility.getString(String.format("img%03d.imgcut", 34)));
            }
            if (this.arrowTexture.isLoaded()) {
                this.arrowTexture.reset();
            }
            if (!this.arrowTexture.isLoaded()) {
                this.arrowTexture.load(MyUtility.getString(String.format("img%03d.png", 39)), MyUtility.getString(String.format("img%03d.imgcut", 39)));
            }

            MyUtility.getInstance().setPresentRenderer(this.c);
            U();

            this.initState = 2;
            aResourceFileStream aresourcefilestream2 = new aResourceFileStream();
            // if (!aString.isEqual(aAssetTextStream.getHash("stage.csv"), new String[]{"3ac0e88db95b36b363a5792941fb1e98"}[0])) {
            //     this.D = 0;
            //     setScene(SceneType.ERROR);
            //     return;
            // }
            if (aresourcefilestream2.openRead(String.format("stage.csv", new Object[0]))) {
                for (int i128 = 0; i128 < getLength(this.stageEoCStats); i128++) {
                    aresourcefilestream2.readLine();
                    this.stageEoCStats[i128] = aresourcefilestream2.getInt(0);
                }
            }
            aresourcefilestream2.close();
            // if (!aString.isEqual(aAssetTextStream.getHash("StampData.csv"), new String[]{"edce825665d2713a8b41f2abd641b1b4"}[0])) {
            //     this.D = 0;
            //     setScene(SceneType.ERROR);
            //     return;
            // }
            if (aresourcefilestream2.openRead(String.format("StampData.csv", new Object[0]))) {
                for (int i129 = 0; i129 < getLength(this.stampStats); i129++) {
                    aresourcefilestream2.readLine();
                    for (int i130 = 0; i130 < getLength(this.stampStats[i129]); i130++) {
                        this.stampStats[i129][i130] = aresourcefilestream2.getInt(i130);
                    }
                }
            }
            aresourcefilestream2.close();
            this.eQ = 0;
            for (int i131 = 0; i131 < 26; i131++) {
                loadUnitBuyStats(i131);
            }
            for (int i132 = 0; i132 < 26; i132++) {
                loadUnitStats(i132);
            }

            loadEnemyStats();
        }

    }

    void a(int i) {
        int i2 = 0;
        while (true) {
            if (i2 < 10) {
                if (this.slotCatIDs[i2] == this.unitBattleStats[0][i][0]) {
                    break;
                }
                i2++;
            } else {
                i2 = 0;
                break;
            }
        }
        if (this.unitBattleStats[0][i][1] == 0) {
            int[] iArr = this.unitBattleStats[0][i];
            iArr[2] = iArr[2] + 1;
        } else if (this.unitBattleStats[0][i][1] == 1) {
            if (this.unitSlotAnims[i2][1].b() == 0) {
                this.unitBattleStats[0][i][2] = (this.unitBattleStats[0][i][2] + 1) % 1;
            } else {
                this.unitBattleStats[0][i][2] = (this.unitBattleStats[0][i][2] + 1) % this.unitSlotAnims[i2][1].b();
            }
        } else if (this.unitBattleStats[0][i][1] == 2) {
            this.unitBattleStats[0][i][2] = (this.unitBattleStats[0][i][2] + 1) % this.unitSlotAnims[i2][2].a();
        } else if (this.unitBattleStats[0][i][1] == 3) {
            this.unitBattleStats[0][i][2] = (this.unitBattleStats[0][i][2] + 1) % 24;
        } else if (this.unitBattleStats[0][i][1] == 4) {
            this.unitBattleStats[0][i][2] = this.unitBattleStats[0][i][2] + 1;
        }
    }

    void a(int i, int i2) {
        if (this.ft != -1) {
            return;
        }
        if (this.ft == -1 && i != 0 && i == 1) {
            for (int i3 = 0; i3 < getLength(this.unitBattleStats); i3++) {
                for (int i4 = 0; i4 < getLength(this.unitBattleStats[i3]); i4++) {
                    for (int i5 = 0; i5 < getLength(this.unitBattleStats[i3][i4]); i5++) {
                        this.unitBattleStats[i3][i4][i5] = 0;
                    }
                }
            }
            this.unitBattleStats[1][0][8] = 10;
            this.unitBattleStats[1][0][10] = this.enemyStats[dt[i2]][2];
            for (int i6 = 0; i6 < getLength(this.enemyTextures); i6++) {
                if (this.enemyTextures[i6].isLoaded()) {
                    this.enemyTextures[i6].reset();
                }
            }
            for (int i7 = 0; i7 < getLength(this.textTextures); i7++) {
                if (this.textTextures[i7].isLoaded()) {
                    this.textTextures[i7].reset();
                }
            }
            if (i2 >= 0) {
                if (this.bt[dt[i2] - 2] == 0) {
                    for (int i8 = 0; i8 < getLength(this.enemyPictureBookQuestionText); i8++) {
                        if (!this.textTextures[i8].isLoaded()) {
                            this.textTextures[i8].drawText(this.enemyPictureBookQuestionText[i8], "FONT_SYSTEM_BOLD", 30, 0);
                        }
                    }
                } else if (i2 >= 0) {
                    if (!this.enemyTextures[dt[i2] - 2].isLoaded()) {
                        if (dt[i2] - 2 == 21) {
                            this.enemyTextures[dt[i2] - 2].load(MyUtility.getString(String.format("i%03d_e.png", dt[i2] - 2)), MyUtility.getString(String.format("i%03d_e.imgcut", dt[i2] - 2)));
                        } else {
                            this.enemyTextures[dt[i2] - 2].load(MyUtility.getString(String.format("i%03d_e.png", dt[i2] - 2)), MyUtility.getString(String.format("%03d_e.imgcut", dt[i2] - 2)));
                        }
                        this.enemySlotModels[0].load(String.format("%03d_e.mamodel", dt[i2] - 2));
                        for (int i9 = 0; i9 < getLength(this.enemySlotAnims[0]); i9++) {
                            this.enemySlotAnims[0][i9].load(String.format("%03d_e%02d.maanim", dt[i2] - 2, i9));
                        }
                        this.enemySlotModels[0].setTextures(this.enemyTextures);
                        this.enemySlotModels[0].setAction();
                    }
                    for (int i10 = 0; i10 < getLength(this.enemyPictureBookText[dt[i2] - 2]); i10++) {
                        if (!this.textTextures[i10].isLoaded()) {
                            this.textTextures[i10].drawText(this.enemyPictureBookText[dt[i2] - 2][i10], "FONT_SYSTEM_BOLD", 30, 0);
                        }
                    }
                }
            }
        }
        this.ft = 1;
    }

    @Override // jp.co.ponos.battlecats.Game
    public void onTouchEvent(int eventID, int xCord, int yCord, int pointerID) {
        int glx = MyUtility.transCoordWindowToGLViewX(xCord);
        int gly = MyUtility.transCoordWindowToGLViewY(yCord);
        if (MyUtility.shouldOffsetY()) {
            gly -= 40;
        }
        if (glx < 0) {
            glx = 0;
        } else if (glx > getWidth()) {
            glx = getWidth();
        }
        int gly2 = gly >= 0 ? Math.min(gly, 639) : 0;
        this.zoom.onTouchEvent(eventID, glx, gly2, pointerID);
        switch (eventID) {
            case 0: // down
                this.pointerID = pointerID;
                this.isPressEvent = true;
                this.touchX = glx;
                this.touchY = gly2;
                return;
            case 1: // move
                if (pointerID == this.pointerID) {
                    this.touchX = glx;
                    this.touchY = gly2;
                    return;
                }
                return;
            case 2: // up
                if (pointerID == this.pointerID) {
                    this.isReleaseEvent = true;
                    this.touchX = glx;
                    this.touchY = gly2;
                    return;
                }
                return;
            default:
                return;
        }
    }

    void a(aTextureRenderer atexturerenderer) {
        if (this.eE[0]) {
            if (this.eD[0] == 0) {
                if (this.eD[5] <= 3) {
                    int i = ((100 - this.eD[4]) * 110) / 100;
                    int i2 = ((100 - this.eD[4]) * 85) / 100;
                    for (int i3 = 0; i3 < 5; i3++) {
                        atexturerenderer.drawScaledImage(this.uiTextures[i3 + 10], (this.excessWidth / 2) + fb[i3 + 5] + ((110 - i) / 2), this.eZ + this.eI[0] + 544 + this.eD[2] + ((85 - i2) / 2), i, i2, 0);
                        atexturerenderer.setColor(0, 0, 0);
                        atexturerenderer.setAlpha(100);
                        atexturerenderer.drawRectangle(fb[i3 + 5] + ((110 - i) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[2] + ((85 - i2) / 2) + this.eZ, i, i2);
                        atexturerenderer.setAlpha(255);
                    }
                    int i4 = ((100 - this.eD[3]) * 110) / 100;
                    int i5 = ((100 - this.eD[3]) * 85) / 100;
                    for (int i6 = 0; i6 < 5; i6++) {
                        atexturerenderer.drawScaledImage(this.uiTextures[i6 + 5], (this.excessWidth / 2) + fb[i6] + ((110 - i4) / 2), this.eZ + this.eI[0] + 544 + this.eD[1] + ((85 - i5) / 2), i4, i5, 0);
                        atexturerenderer.setColor(0, 0, 0);
                        atexturerenderer.setAlpha(100);
                        atexturerenderer.drawRectangle(fb[i6] + ((110 - i4) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[1] + ((85 - i5) / 2) + this.eZ, i4, i5);
                        atexturerenderer.setAlpha(255);
                    }
                } else {
                    int i7 = ((100 - this.eD[3]) * 110) / 100;
                    int i8 = ((100 - this.eD[3]) * 85) / 100;
                    for (int i9 = 0; i9 < 5; i9++) {
                        atexturerenderer.drawScaledImage(this.uiTextures[i9 + 5], (this.excessWidth / 2) + fb[i9] + ((110 - i7) / 2), this.eZ + this.eI[0] + 544 + this.eD[1] + ((85 - i8) / 2), i7, i8, 0);
                        atexturerenderer.setColor(0, 0, 0);
                        atexturerenderer.setAlpha(100);
                        atexturerenderer.drawRectangle(fb[i9] + ((110 - i7) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[1] + ((85 - i8) / 2) + this.eZ, i7, i8);
                        atexturerenderer.setAlpha(255);
                    }
                    int i10 = ((100 - this.eD[4]) * 110) / 100;
                    int i11 = ((100 - this.eD[4]) * 85) / 100;
                    for (int i12 = 0; i12 < 5; i12++) {
                        atexturerenderer.drawScaledImage(this.uiTextures[i12 + 10], (this.excessWidth / 2) + fb[i12 + 5] + ((110 - i10) / 2), this.eZ + this.eI[0] + 544 + this.eD[2] + ((85 - i11) / 2), i10, i11, 0);
                        atexturerenderer.setColor(0, 0, 0);
                        atexturerenderer.setAlpha(100);
                        atexturerenderer.drawRectangle(fb[i12 + 5] + ((110 - i10) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[2] + ((85 - i11) / 2) + this.eZ, i10, i11);
                        atexturerenderer.setAlpha(255);
                    }
                }
            } else if (this.eD[0] == 1) {
                if (this.eD[5] <= 3) {
                    int i13 = ((100 - this.eD[4]) * 110) / 100;
                    int i14 = ((100 - this.eD[4]) * 85) / 100;
                    for (int i15 = 0; i15 < 5; i15++) {
                        atexturerenderer.drawScaledImage(this.uiTextures[i15 + 5], (this.excessWidth / 2) + fb[i15] + ((110 - i13) / 2), this.eZ + this.eI[0] + 544 + this.eD[2] + ((85 - i14) / 2), i13, i14, 0);
                        atexturerenderer.setColor(0, 0, 0);
                        atexturerenderer.setAlpha(100);
                        atexturerenderer.drawRectangle(fb[i15] + ((110 - i13) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[2] + ((85 - i14) / 2) + this.eZ, i13, i14);
                        atexturerenderer.setAlpha(255);
                    }
                    int i16 = ((100 - this.eD[3]) * 110) / 100;
                    int i17 = ((100 - this.eD[3]) * 85) / 100;
                    for (int i18 = 0; i18 < 5; i18++) {
                        atexturerenderer.drawScaledImage(this.uiTextures[i18 + 10], (this.excessWidth / 2) + fb[i18 + 5] + ((110 - i16) / 2), this.eZ + this.eI[0] + 544 + this.eD[1] + ((85 - i17) / 2), i16, i17, 0);
                        atexturerenderer.setColor(0, 0, 0);
                        atexturerenderer.setAlpha(100);
                        atexturerenderer.drawRectangle(fb[i18 + 5] + ((110 - i16) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[1] + ((85 - i17) / 2) + this.eZ, i16, i17);
                        atexturerenderer.setAlpha(255);
                    }
                } else {
                    int i19 = ((100 - this.eD[3]) * 110) / 100;
                    int i20 = ((100 - this.eD[3]) * 85) / 100;
                    for (int i21 = 0; i21 < 5; i21++) {
                        atexturerenderer.drawScaledImage(this.uiTextures[i21 + 10], (this.excessWidth / 2) + fb[i21 + 5] + ((110 - i19) / 2), this.eZ + this.eI[0] + 544 + this.eD[1] + ((85 - i20) / 2), i19, i20, 0);
                        atexturerenderer.setColor(0, 0, 0);
                        atexturerenderer.setAlpha(100);
                        atexturerenderer.drawRectangle(fb[i21 + 5] + ((110 - i19) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[1] + ((85 - i20) / 2) + this.eZ, i19, i20);
                        atexturerenderer.setAlpha(255);
                    }
                    int i22 = ((100 - this.eD[4]) * 110) / 100;
                    int i23 = ((100 - this.eD[4]) * 85) / 100;
                    for (int i24 = 0; i24 < 5; i24++) {
                        atexturerenderer.drawScaledImage(this.uiTextures[i24 + 5], (this.excessWidth / 2) + fb[i24] + ((110 - i22) / 2), this.eZ + this.eI[0] + 544 + this.eD[2] + ((85 - i23) / 2), i22, i23, 0);
                        atexturerenderer.setColor(0, 0, 0);
                        atexturerenderer.setAlpha(100);
                        atexturerenderer.drawRectangle(fb[i24] + ((110 - i22) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[2] + ((85 - i23) / 2) + this.eZ, i22, i23);
                        atexturerenderer.setAlpha(255);
                    }
                }
            }
        } else if (this.eD[0] == 0) {
            if (this.gO) {
                for (int i25 = 0; i25 < 5; i25++) {
                    atexturerenderer.drawScaledImage(this.uiTextures[i25 + 10], (this.excessWidth / 2) + fb[i25 + 5], this.eZ + this.eI[0] + 544 + 12, 110, 85, 0);
                    atexturerenderer.setColor(0, 0, 0);
                    atexturerenderer.setAlpha(100);
                    atexturerenderer.drawRectangle(fb[i25 + 5] + (this.excessWidth / 2), this.eI[0] + 544 + 12 + this.eZ, 110, 85);
                    atexturerenderer.setAlpha(255);
                }
            }
            for (int i26 = 0; i26 < 5; i26++) {
                atexturerenderer.drawScaledImage(this.uiTextures[i26 + 5], (this.excessWidth / 2) + (fb[i26] - (dv[this.fy[i26]] / 2)), ((this.eI[0] + 544) + this.eZ) - (dv[this.fy[i26]] / 2), dv[this.fy[i26]] + 110, dv[this.fy[i26]] + 85, 0);
                if (this.slotCatIDs[i26] != -1) {
                    int i27 = this.battleData[10] >= this.unitStats[this.slotCatIDs[i26]][this.slotFormIDs[i26]][6] + (((this.unitStats[this.slotCatIDs[i26]][this.slotFormIDs[i26]][6] * this.eQ) * 50) / 100) ? 0 : 1;
                    if (i27 == 1 || this.rechargeTimes[i26] != 0) {
                        atexturerenderer.setColor(0, 0, 0);
                        atexturerenderer.setAlpha(100);
                        atexturerenderer.drawRectangle(fb[i26] + (this.excessWidth / 2), this.eI[0] + 544 + this.eZ, 110, 85);
                    }
                    atexturerenderer.setAlpha(255);
                    if (this.rechargeTimes[i26] != 0) {
                        a(atexturerenderer, i26, 0, 0);
                    } else if (this.slotCatIDs[i26] != -1) {
                        drawCost(atexturerenderer, (this.unitStats[this.slotCatIDs[i26]][this.slotFormIDs[i26]][6] / 100) + ((((this.unitStats[this.slotCatIDs[i26]][this.slotFormIDs[i26]][6] / 100) * this.eQ) * 50) / 100), fb[i26] + 90 + (this.excessWidth / 2), this.eI[0] + 544 + 50 + this.eZ, i27, 0, 0);
                    }
                }
            }
        } else if (this.eD[0] == 1) {
            for (int i28 = 0; i28 < 5; i28++) {
                atexturerenderer.drawScaledImage(this.uiTextures[i28 + 5], (this.excessWidth / 2) + fb[i28], this.eZ + this.eI[0] + 544 + 12, 110, 85, 0);
                atexturerenderer.setColor(0, 0, 0);
                atexturerenderer.setAlpha(100);
                atexturerenderer.drawRectangle(fb[i28] + (this.excessWidth / 2), this.eI[0] + 544 + 12 + this.eZ, 110, 85);
                atexturerenderer.setAlpha(255);
            }
            for (int i29 = 0; i29 < 5; i29++) {
                atexturerenderer.drawScaledImage(this.uiTextures[i29 + 10], (this.excessWidth / 2) + (fb[i29 + 5] - (dv[this.fy[i29]] / 2)), ((this.eI[0] + 544) + this.eZ) - (dv[this.fy[i29]] / 2), dv[this.fy[i29]] + 110, dv[this.fy[i29]] + 85, 0);
                if (this.slotCatIDs[i29 + 5] != -1) {
                    int i30 = this.battleData[10] >= this.unitStats[this.slotCatIDs[i29 + 5]][this.slotFormIDs[i29 + 5]][6] + (((this.unitStats[this.slotCatIDs[i29 + 5]][this.slotFormIDs[i29 + 5]][6] * this.eQ) * 50) / 100) ? 0 : 1;
                    if (i30 == 1 || this.rechargeTimes[i29 + 5] != 0) {
                        atexturerenderer.setColor(0, 0, 0);
                        atexturerenderer.setAlpha(100);
                        atexturerenderer.drawRectangle(fb[i29 + 5] + (this.excessWidth / 2), this.eI[0] + 544 + this.eZ, 110, 85);
                    }
                    atexturerenderer.setAlpha(255);
                    if (this.rechargeTimes[i29 + 5] != 0) {
                        a(atexturerenderer, i29 + 5, 0, 0);
                    } else if (this.slotCatIDs[i29 + 5] != -1) {
                        drawCost(atexturerenderer, (this.unitStats[this.slotCatIDs[i29 + 5]][this.slotFormIDs[i29 + 5]][6] / 100) + ((((this.unitStats[this.slotCatIDs[i29 + 5]][this.slotFormIDs[i29 + 5]][6] / 100) * this.eQ) * 50) / 100), fb[i29 + 5] + 90 + (this.excessWidth / 2), this.eI[0] + 544 + 50 + this.eZ, i30, 0, 0);
                    }
                }
            }
        }
        atexturerenderer.setImageAlpha(255);
        atexturerenderer.setImageColor(255, 255, 255);
        if (this.unitBattleStats[0][0][12] != 0) { // attack interval
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + this.eI[0], 8);
            this.gameStats1[0] = ((this.unitBattleStats[0][0][11] - this.unitBattleStats[0][0][12]) * 130) / this.unitBattleStats[0][0][11];
            if (this.gameStats1[0] >= 13) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 96 + this.eI[0], 11);
            }
            if (this.gameStats1[0] >= 26) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 84 + this.eI[0], 12);
            }
            if (this.gameStats1[0] >= 39) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 72 + this.eI[0], 13);
            }
            if (this.gameStats1[0] >= 52) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 60 + this.eI[0], 14);
            }
            if (this.gameStats1[0] >= 65) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 48 + this.eI[0], 15);
            }
            if (this.gameStats1[0] >= 78) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 36 + this.eI[0], 16);
            }
            if (this.gameStats1[0] >= 91) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 24 + this.eI[0], 17);
            }
            if (this.gameStats1[0] >= 104) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 12 + this.eI[0], 18);
            }
            if (this.gameStats1[0] >= 117) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 0 + this.eI[0], 19);
            }
        } else if (this.fc[1] == 0) { // cat cannon FIRE!! text dim
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 96 + this.eI[0], 11);
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 84 + this.eI[0], 12);
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 72 + this.eI[0], 13);
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 60 + this.eI[0], 14);
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 48 + this.eI[0], 15);
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 36 + this.eI[0], 16);
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 24 + this.eI[0], 17);
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 12 + this.eI[0], 18);
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 0 + this.eI[0], 19);
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + this.eI[0], 20);
            atexturerenderer.drawScaledImagef(this.uiTextures[15], (getWidth() - 125) - 4, this.eI[0] + 581 + this.eZ, 9);
        } else { // lighter flash
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + this.eI[0], 7);
            atexturerenderer.drawScaledImagef(this.uiTextures[15], (getWidth() - 125) - 4, this.eI[0] + 581 + this.eZ, 10);
        }
        if (this.bN[0] == 7) {
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 6);
            atexturerenderer.drawScaledImagef(this.uiTextures[4], this.buttonCoordinates1[1][0] + 4, this.eI[0] + this.buttonCoordinates1[1][1] + 96, 81);
            atexturerenderer.drawScaledImagef(this.uiTextures[4], 4, ((this.eI[0] + 515) - 5) + this.eZ, 13);
            atexturerenderer.drawScaledImagef(this.uiTextures[4], 73, ((this.eI[0] + 515) - 5) + this.eZ, this.bN[0] + 14 + 1);
        } else if (this.battleData[11] + 1 >= 8) {
            if (this.battleData[10] < (((this.battleData[11] + 1) - 7) * 2000) + 10000 + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0])) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 5);
                drawCost(atexturerenderer, (((((this.battleData[11] + 1) - 7) * 2000) + 10000) + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0])) / 100, this.buttonCoordinates1[1][0] + 4, this.eI[0] + this.buttonCoordinates1[1][1] + 96, 3, 0, 0);
                atexturerenderer.drawScaledImagef(this.uiTextures[4], 4, ((this.eI[0] + 515) - 5) + this.eZ, 24);
                atexturerenderer.drawScaledImagef(this.uiTextures[4], 73, ((this.eI[0] + 515) - 5) + this.eZ, this.bN[0] + 25 + 1);
                return;
            }
            if (this.fc[1] == 0) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 6);
            } else {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 24);
            }
            drawCost(atexturerenderer, (((((this.battleData[11] + 1) - 7) * 2000) + 10000) + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0])) / 100, this.buttonCoordinates1[1][0] + 4, this.eI[0] + this.buttonCoordinates1[1][1] + 96, 2, 0, 0);
            atexturerenderer.drawScaledImagef(this.uiTextures[4], 4, ((this.eI[0] + 515) - 5) + this.eZ, 13);
            atexturerenderer.drawScaledImagef(this.uiTextures[4], 73, ((this.eI[0] + 515) - 5) + this.eZ, this.bN[0] + 14 + 1);
        } else if (this.battleData[10] < ((this.battleData[11] + 1) * 1000) + 3000 + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0])) {
            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 5);
            drawCost(atexturerenderer, ((((this.battleData[11] + 1) * 1000) + 3000) + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0])) / 100, this.buttonCoordinates1[1][0] + 4, this.eI[0] + this.buttonCoordinates1[1][1] + 96, 3, 0, 0);
            atexturerenderer.drawScaledImagef(this.uiTextures[4], 4, ((this.eI[0] + 515) - 5) + this.eZ, 24);
            atexturerenderer.drawScaledImagef(this.uiTextures[4], 73, ((this.eI[0] + 515) - 5) + this.eZ, this.bN[0] + 25 + 1);
        } else {
            if (this.fc[1] == 0) {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 6);
            } else {
                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 24);
            }
            drawCost(atexturerenderer, ((((this.battleData[11] + 1) * 1000) + 3000) + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0])) / 100, this.buttonCoordinates1[1][0] + 4, this.eI[0] + this.buttonCoordinates1[1][1] + 96, 2, 0, 0);
            atexturerenderer.drawScaledImagef(this.uiTextures[4], 4, ((this.eI[0] + 515) - 5) + this.eZ, 13);
            atexturerenderer.drawScaledImagef(this.uiTextures[4], 73, ((this.eI[0] + 515) - 5) + this.eZ, this.bN[0] + 14 + 1);
        }
    }

    void a(aTextureRenderer atexturerenderer, int i) {
        atexturerenderer.removeAnimTransformer();
        if (this.eb) {
            if (i == 0) {
                atexturerenderer.setColor(0, 0, 0);
                if (this.openingTimer <= 25) {
                    if (this.openingTimer * 10 <= 255) {
                        atexturerenderer.setAlpha(this.openingTimer * 10);
                    }
                } else if (this.openingTimer == 26) {
                    atexturerenderer.setAlpha(255);
                } else if (this.openingTimer > 50) {
                    atexturerenderer.setAlpha(0);
                } else if (255 - ((this.openingTimer - 25) * 10) >= 0) {
                    atexturerenderer.setAlpha(255 - ((this.openingTimer - 25) * 10));
                }
                atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
            } else if (i == 1) {
                atexturerenderer.setColor(0, 0, 0);
                if (this.openingTimer > 11) {
                    for (int i2 = 0; i2 < 10; i2++) {
                        this.gk[0][0] = (getWidth() - 110) - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][0] = ((i2 - 2) * 158) - 13;
                        this.gk[0][1] = getWidth() - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][1] = ((i2 - 2) * 158) - 68;
                        this.gk[0][2] = getWidth() - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][2] = ((i2 - 2) * 158) + 42;
                        atexturerenderer.drawVertices(this.gk[0], this.gk[1], 3);
                    }
                    for (int i3 = 0; i3 < 10; i3++) {
                        this.gk[0][0] = (getWidth() - 55) - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][0] = ((i3 - 2) * 158) + 66;
                        this.gk[0][1] = getWidth() - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][1] = ((i3 - 2) * 158) + 42;
                        this.gk[0][2] = getWidth() - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][2] = ((i3 - 2) * 158) + 90;
                        atexturerenderer.drawVertices(this.gk[0], this.gk[1], 3);
                    }
                    for (int i4 = 0; i4 < 10; i4++) {
                        this.gk[0][0] = (((getWidth() * 2) + 110) + 110) - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][0] = ((i4 - 2) * 158) - 13;
                        this.gk[0][1] = ((getWidth() * 2) + 110) - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][1] = ((i4 - 2) * 158) - 68;
                        this.gk[0][2] = ((getWidth() * 2) + 110) - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][2] = ((i4 - 2) * 158) + 42;
                        atexturerenderer.drawVertices(this.gk[0], this.gk[1], 3);
                    }
                    for (int i5 = 0; i5 < 10; i5++) {
                        this.gk[0][0] = (((getWidth() * 2) + 110) + 55) - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][0] = ((i5 - 2) * 158) + 66;
                        this.gk[0][1] = ((getWidth() * 2) + 110) - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][1] = ((i5 - 2) * 158) + 42;
                        this.gk[0][2] = ((getWidth() * 2) + 110) - (((this.openingTimer - 1) * getWidth()) / 10);
                        this.gk[1][2] = ((i5 - 2) * 158) + 90;
                        atexturerenderer.drawVertices(this.gk[0], this.gk[1], 3);
                    }
                    atexturerenderer.setColor(0, 0, 0);
                    atexturerenderer.drawRectangle(getWidth() - (((this.openingTimer - 1) * getWidth()) / 10), -this.eZ, getWidth() + 110, getHeight());
                    return;
                }
                for (int i6 = 0; i6 < 10; i6++) {
                    this.gk[0][0] = (getWidth() - 110) - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][0] = ((i6 - 2) * 158) - 13;
                    this.gk[0][1] = getWidth() - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][1] = ((i6 - 2) * 158) - 68;
                    this.gk[0][2] = getWidth() - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][2] = ((i6 - 2) * 158) + 42;
                    atexturerenderer.drawVertices(this.gk[0], this.gk[1], 3);
                }
                for (int i7 = 0; i7 < 10; i7++) {
                    this.gk[0][0] = (getWidth() - 55) - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][0] = ((i7 - 2) * 158) + 66;
                    this.gk[0][1] = getWidth() - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][1] = ((i7 - 2) * 158) + 42;
                    this.gk[0][2] = getWidth() - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][2] = ((i7 - 2) * 158) + 90;
                    atexturerenderer.drawVertices(this.gk[0], this.gk[1], 3);
                }
                for (int i8 = 0; i8 < 10; i8++) {
                    this.gk[0][0] = (((getWidth() * 2) + 110) + 110) - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][0] = ((i8 - 2) * 158) - 13;
                    this.gk[0][1] = ((getWidth() * 2) + 110) - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][1] = ((i8 - 2) * 158) - 68;
                    this.gk[0][2] = ((getWidth() * 2) + 110) - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][2] = ((i8 - 2) * 158) + 42;
                    atexturerenderer.drawVertices(this.gk[0], this.gk[1], 3);
                }
                for (int i9 = 0; i9 < 10; i9++) {
                    this.gk[0][0] = (((getWidth() * 2) + 110) + 55) - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][0] = ((i9 - 2) * 158) + 66;
                    this.gk[0][1] = ((getWidth() * 2) + 110) - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][1] = ((i9 - 2) * 158) + 42;
                    this.gk[0][2] = ((getWidth() * 2) + 110) - ((this.openingTimer * getWidth()) / 10);
                    this.gk[1][2] = ((i9 - 2) * 158) + 90;
                    atexturerenderer.drawVertices(this.gk[0], this.gk[1], 3);
                }
                atexturerenderer.setColor(0, 0, 0);
                atexturerenderer.drawRectangle(getWidth() - ((this.openingTimer * getWidth()) / 10), -this.eZ, getWidth() + 110, getHeight());
                if (this.openingTimer == 11) {
                    atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                }
            }
        }
    }

    int b(int i, int i2, int i3, int i4, int i5, int i6) throws ParseException {
        return getDateSeconds(DateFormat.getDateTimeInstance().parse(this.hK.format(this.hJ.parse(String.format("%04d%02d%02d%02d%02d%02d", i, i2, i3, i4, i5, i6), new ParsePosition(0)))));
    }

    @Override // jp.co.ponos.battlecats.Game
    public void b() {
        this.initState = 3;
        int[] iArr = this.hw;
        iArr[0] = iArr[0] * this.hw[1];
        int[] iArr2 = this.hw;
        iArr2[1] = iArr2[1] + 1;
        int[] iArr3 = this.hw;
        iArr3[0] = iArr3[0] + (((int) MyUtility.getTimeStamp()) - this.hw[2]);
        this.hw[2] = (int) MyUtility.getTimeStamp();
        int[] iArr4 = this.hw;
        iArr4[0] = iArr4[0] / this.hw[1];
        int i = 0;
        for (int i2 = 9; i2 < 26; i2++) {
            i += this.bu[i2] << (i2 - 9);
        }
        int i3 = this.aX;
        if (this.aX >= 2 && this.bq[this.aX] >= 48) {
            i3++;
        }
        String a = a(this.ht[0], this.hu[0], this.hv, this.hw[0], this.hy, this.hz, i3, this.hB, this.hC[0], this.hC[1], this.hC[2], this.hC[3], this.hx, this.hG, this.hF, i, this.hD, this.hE);
        if (((int) MyUtility.getTimeStamp()) - this.hu[1] >= 86400) {
            this.hu[1] = (int) MyUtility.getTimeStamp();
            int[] iArr5 = this.hu;
            iArr5[0] = iArr5[0] + 1;
            if (this.hu[0] >= 999999999) {
                this.hu[0] = 999999999;
            }
        }
        //aAd.b().a(a);
        ae();
    }

    void b(int i) {
        int i2 = 0;
        while (true) {
            if (i2 < 10) {
                if (this.slotEnemyIDs[i2] == this.unitBattleStats[1][i][0]) {
                    break;
                }
                i2++;
            } else {
                i2 = 0;
                break;
            }
        }
        if (this.unitBattleStats[1][i][1] == 0) {
            int[] iArr = this.unitBattleStats[1][i];
            iArr[2] = iArr[2] + 1;
        } else if (this.unitBattleStats[1][i][1] == 1) {
            if (this.enemySlotAnims[i2][1].b() == 0) {
                this.unitBattleStats[1][i][2] = (this.unitBattleStats[1][i][2] + 1) % 1;
            } else {
                this.unitBattleStats[1][i][2] = (this.unitBattleStats[1][i][2] + 1) % this.enemySlotAnims[i2][1].b();
            }
        } else if (this.unitBattleStats[1][i][1] == 2) {
            this.unitBattleStats[1][i][2] = (this.unitBattleStats[1][i][2] + 1) % this.enemySlotAnims[i2][2].a();
        } else if (this.unitBattleStats[1][i][1] == 3) {
            this.unitBattleStats[1][i][2] = (this.unitBattleStats[1][i][2] + 1) % 24;
        } else if (this.unitBattleStats[1][i][1] == 4) {
            this.unitBattleStats[1][i][2] = this.unitBattleStats[1][i][2] + 1;
        } else if (this.unitBattleStats[1][i][1] == 5) {
            this.unitBattleStats[1][i][2] = (this.unitBattleStats[1][i][2] + 1) % 12;
        }
    }

    void b(aTextureRenderer atexturerenderer) {
        if (this.battleData[15] >= 1) {
            int i = this.battleData[16];
            if (this.battleData[15] != 1) {
                i = getLength(cq) - 1;
            } else if (i > getLength(cq) - 1) {
                i = getLength(cq) - 1;
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[19], ((getWidth() / 2) - 239) - cq[i], 190, 0);
        }
        if (this.battleData[15] >= 2) {
            int i2 = this.battleData[16];
            if (this.battleData[15] != 2) {
                i2 = getLength(cq) - 1;
            } else if (i2 > getLength(cq) - 1) {
                i2 = getLength(cq) - 1;
            }
            atexturerenderer.setBlendMode(3);
            atexturerenderer.setColor(40, 40, 77);
            atexturerenderer.drawRectangle(0 - cq[i2], 315, getWidth(), 55);
            atexturerenderer.setBlendMode(0);
            int i3 = 10;
            int i4 = 0;
            while (i3 <= this.battleData[17]) {
                i3 *= 10;
                i4--;
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[19], (((((getWidth() / 2) - 14) - 99) + (i4 * 14)) - cq[i2]) - 20, 322, 1);
            for (int i5 = i3 / 10; i5 >= 1; i5 /= 10) {
                atexturerenderer.drawScaledImagef(this.uiTextures[4], (((getWidth() / 2) - 14) + (i4 * 14)) - cq[i2], 321, (this.battleData[17] / i5) % 10);
                i4 += 2;
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[19], (((i4 * 14) + ((getWidth() / 2) - 14)) - cq[i2]) + 20, 324, 2);
        }
        if (this.battleData[15] == 4 && this.battleData[18] >= 1) {
            atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.eP] * 690) / 100) / 2), 490 - (((eO[this.eP] * 179) / 100) / 2), (eO[this.eP] * 690) / 100, (eO[this.eP] * 179) / 100, 0);
            if (this.eP >= getLength(eO) - 1) {
                atexturerenderer.setColor(255, 255, 0);
                if (this.regionState == 0) {
                    int b = aTexture.measureText(this.treasure2Text[3], 30) + 15 + aTexture.measureText(this.treasure2Text[this.battleData[18] - 1], 30) + aTexture.measureText(this.treasure1Text[this.battleData[20]], 30);
                    atexturerenderer.drawScaledImage(this.textTextures[0], (getWidth() / 2) - (b / 2), 444, 0);
                    int ah = ((getWidth() / 2) - (b / 2)) + aTexture.measureText(this.treasure2Text[3], 30) + 15;
                    atexturerenderer.setColor(255, 255, 255);
                    atexturerenderer.drawScaledImage(this.textTextures[1], ah, 444, 0);
                    if (this.battleData[16] % 4 == 0 || this.battleData[16] % 4 == 1) {
                        atexturerenderer.setColor(255, 255, 0);
                    } else {
                        atexturerenderer.setColor(255, 0, 255);
                    }
                    atexturerenderer.drawScaledImage(this.textTextures[2], (getWidth() / 2) - (aTexture.measureText(this.treasure2Text[6], 30) / 2), 492, 0);
                } else if (this.regionState == 1) {
                    if (this.battleData[16] % 4 == 0 || this.battleData[16] % 4 == 1) {
                        atexturerenderer.setColor(255, 255, 0);
                    } else {
                        atexturerenderer.setColor(255, 0, 255);
                    }
                    int b2 = aTexture.measureText(this.treasure2Text[6], 30) + 15 + aTexture.measureText(this.treasure2Text[9], 30);
                    atexturerenderer.drawScaledImage(this.textTextures[0], (getWidth() / 2) - (b2 / 2), 444, 0);
                    int ah2 = (getWidth() / 2) - (b2 / 2);
                    atexturerenderer.setColor(255, 255, 255);
                    atexturerenderer.drawScaledImage(this.textTextures[1], (getWidth() / 2) - (((aTexture.measureText(this.treasure2Text[this.battleData[18] - 1], 30) + 15) + aTexture.measureText(this.treasure1Text[this.battleData[20]], 30)) / 2), 492, 0);
                }
            }
        }
        if (this.battleData[15] == 5) {
            atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.eP] * 690) / 100) / 2), 490 - (((eO[this.eP] * 179) / 100) / 2), (eO[this.eP] * 690) / 100, (eO[this.eP] * 179) / 100, 0);
            if (this.eP >= getLength(eO) - 1) {
                if (this.regionState == 0) {
                    int b3 = aTexture.measureText(this.treasure3Text[this.battleData[19]][0], 30);
                    atexturerenderer.setColor(255, 255, 255);
                    atexturerenderer.drawScaledImage(this.textTextures[0], (getWidth() / 2) - (b3 / 2), 444, 0);
                    if (this.battleData[16] % 4 == 0 || this.battleData[16] % 4 == 1) {
                        atexturerenderer.setColor(255, 255, 0);
                    } else {
                        atexturerenderer.setColor(255, 0, 255);
                    }
                    atexturerenderer.drawScaledImage(this.textTextures[1], (getWidth() / 2) - (aTexture.measureText(this.treasure2Text[5], 30) / 2), 492, 0);
                } else if (this.regionState == 1) {
                    int b4 = aTexture.measureText(this.treasure3Text[this.battleData[19]][0], 30);
                    atexturerenderer.setColor(255, 255, 255);
                    atexturerenderer.drawScaledImage(this.textTextures[0], (getWidth() / 2) - (b4 / 2), 492, 0);
                    if (this.battleData[16] % 4 == 0 || this.battleData[16] % 4 == 1) {
                        atexturerenderer.setColor(255, 255, 0);
                    } else {
                        atexturerenderer.setColor(255, 0, 255);
                    }
                    atexturerenderer.drawScaledImage(this.textTextures[1], (getWidth() / 2) - (aTexture.measureText(this.treasure2Text[5], 30) / 2), 444, 0);
                }
            }
        }
    }

    @Override // jp.co.ponos.battlecats.Game
    public void onResume() {
        this.b = true;
        aSound.getInstance().c();
        for (int i = 0; i < 43; i++) {
            aSound.getInstance().load(i);
        }
        aSound.getInstance().reloadSounds();
        this.zoom.reset();
        this.pointerDownNow = false;
        this.isPressEvent = false;
        this.isReleaseEvent = false;
        this.pointerUp = false;
        this.pointerDown = false;
    }

    void c(int i) {
        if (this.slotCatIDs[i] == -1) {
            aSound.getInstance().play(SoundType.CANT_PRESS);
        } else if (this.rechargeTimes[i] != 0) {
            aSound.getInstance().play(SoundType.CANT_PRESS);
        } else if (this.battleData[10] < this.unitStats[this.slotCatIDs[i]][this.slotFormIDs[i]][6] + (((this.unitStats[this.slotCatIDs[i]][this.slotFormIDs[i]][6] * this.eQ) * 50) / 100)) {
            aSound.getInstance().play(SoundType.CANT_PRESS);
        } else if (a(0, this.slotCatIDs[i], this.baseUpgrades[this.slotCatIDs[i] - 2], 0, 9, this.slotFormIDs[i]) < 0) {
            aSound.getInstance().play(SoundType.CANT_PRESS);
        } else {
            this.fU = 0;
            int[] iArr = this.battleData;
            iArr[10] = iArr[10] - (this.unitStats[this.slotCatIDs[i]][this.slotFormIDs[i]][6] + (((this.unitStats[this.slotCatIDs[i]][this.slotFormIDs[i]][6] * this.eQ) * 50) / 100));
            this.rechargeTimes[i] = this.unitStats[this.slotCatIDs[i]][this.slotFormIDs[i]][7];
            int[] iArr2 = this.rechargeTimes;
            iArr2[i] = iArr2[i] - (ad[7] + (this.bx[7] * 6));
            for (int i2 = 0; i2 < 10; i2++) {
                int[] iArr3 = this.rechargeTimes;
                iArr3[i] = iArr3[i] - ((cB[2] * this.bO[i2][2]) / 100);
            }
            if (this.rechargeTimes[i] <= 60) {
                this.rechargeTimes[i] = 60;
            }
            if (this.hm[3] == 1) {
                this.rechargeTimes[i] = 0;
            }
            aSound.getInstance().play(SoundType.BATTLE_ACTIVATE);
        }
    }

    void c(aTextureRenderer atexturerenderer) {
        if (this.battleData[15] >= 2) {
            int i = this.battleData[15] == 2 ? this.battleData[16] : 80;
            if (i > 80) {
                i = 80;
            }
            int i2 = (i * 255) / 80;
            atexturerenderer.setBlendMode(3);
            atexturerenderer.setColor(255 - i2, 255 - i2, 255 - i2);
            atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
            atexturerenderer.setBlendMode(0);
        }
        atexturerenderer.setAlpha(255);
        if (this.battleData[15] >= 1) {
            int i3 = this.battleData[16];
            if (this.battleData[15] != 1) {
                i3 = getLength(cs) - 1;
            } else if (i3 > getLength(cs) - 1) {
                i3 = getLength(cs) - 1;
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[19], (getWidth() / 2) - 152, cs[i3] + this.ei[2], 3);
        }
        if (this.battleData[15] != 3) {
            if (this.battleData[15] == 4 && this.battleData[24] == 1) {
                atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.eP] * 690) / 100) / 2), 490 - (((eO[this.eP] * 229) / 100) / 2), (eO[this.eP] * 690) / 100, (eO[this.eP] * 229) / 100, 0);
                if (this.eP >= getLength(eO) - 1) {
                    atexturerenderer.setColor(255, 255, 255);
                    int i4 = 0;
                    for (int i5 = 0; i5 < getLength(this.loseText[this.eQ][this.eS]) && !aString.isEqual(this.loseText[this.eQ][this.eS][i5], "＠"); i5++) {
                        i4 = -(i5 - 1);
                    }
                    int i6 = i4 - 1;
                    for (int i7 = 0; i7 < getLength(this.loseText[this.eQ][this.eS]) && !aString.isEqual(this.loseText[this.eQ][this.eS][i7], "＠"); i7++) {
                        atexturerenderer.drawScaledImage(this.textTextures[i7 + 2], getWidth() / 2, (i6 * 18) + 472, 1);
                        i6 += 2;
                    }
                }
            }
        } else if (!this.eb) {
            atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.eP] * 690) / 100) / 2), 462 - (((eO[this.eP] * 229) / 100) / 2), (eO[this.eP] * 690) / 100, (eO[this.eP] * 229) / 100, 0);
            if (this.eP >= getLength(eO) - 1) {
                atexturerenderer.setColor(255, 255, 255);
                int i8 = 0;
                for (int i9 = 0; i9 < 4 && !aString.isEqual(this.warning2Text[2][i9], "＠"); i9++) {
                    i8 = -i9;
                }
                for (int i10 = 0; i10 < getLength(this.warning2Text[2]) && !aString.isEqual(this.warning2Text[2][i10], "＠"); i10++) {
                    atexturerenderer.drawScaledImage(this.textTextures[i10], getWidth() / 2, (i8 * 18) + 404, 1);
                    i8 += 2;
                }
                int i11 = 30;
                int i12 = 0;
                do {
                    atexturerenderer.drawScaledImagef(this.uiTextures[4], ((825 - (i12 * 29)) - 30) + (this.excessWidth / 2), 306, i11 % 10);
                    i11 /= 10;
                    i12++;
                } while (i11 > 0);
                atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (642 - ((i12 >= 5 ? i12 - 4 : 0) * 29)), 306, 55, 42, 21);
                atexturerenderer.drawScaledImagef(this.uiTextures[15], (593 - (i12 * 29)) + (this.excessWidth / 2), 320.0f, 47.0f, 28.0f, 43);
                atexturerenderer.drawScaledImage(this.uiTextures[21], (((getWidth() / 2) - 345) + 116) - (dv[this.fx[0]] / 2), 480 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 168, dv[this.fx[0]] + 72, 2);
                atexturerenderer.drawScaledImage(this.uiTextures[21], (((getWidth() / 2) - 345) + 406) - (dv[this.fx[1]] / 2), 480 - (dv[this.fx[1]] / 2), dv[this.fx[1]] + 168, dv[this.fx[1]] + 72, 2);
                atexturerenderer.drawScaledImage(this.uiTextures[21], (((getWidth() / 2) - 345) + 125) - (dv[this.fx[0]] / 2), 488 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 150, dv[this.fx[0]] + 55, 4);
                atexturerenderer.drawScaledImage(this.uiTextures[21], (((getWidth() / 2) - 345) + 415) - (dv[this.fx[1]] / 2), 488 - (dv[this.fx[1]] / 2), dv[this.fx[1]] + 150, dv[this.fx[1]] + 55, 5);
                if (this.fx[0] == 0 && this.fx[1] == 0 && !this.gu && !this.gU && isPointerDown() && (isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3]) || isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3]))) {
                    if (this.battleData[16] % 4 == 0 || this.battleData[16] % 4 == 1) {
                        if (this.fa == 0) {
                            atexturerenderer.drawScaledImage(this.uiTextures[21], ((getWidth() / 2) - 345) + 115, 479, 170, 75, 6);
                        } else if (this.fa == 1) {
                            atexturerenderer.drawScaledImage(this.uiTextures[21], ((getWidth() / 2) - 345) + 405, 479, 170, 75, 6);
                        }
                    } else if (this.fa == 0) {
                        atexturerenderer.drawScaledImage(this.uiTextures[21], ((getWidth() / 2) - 345) + 115, 479, 170, 75, 7);
                    } else if (this.fa == 1) {
                        atexturerenderer.drawScaledImage(this.uiTextures[21], ((getWidth() / 2) - 345) + 405, 479, 170, 75, 7);
                    }
                }
                atexturerenderer.drawScaledImage(this.uiTextures[21], this.excessWidth + (688 - (dv[this.fx[14]] / 2)), 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
                atexturerenderer.drawScaledImage(this.uiTextures[21], this.excessWidth + (733 - (dv[this.fx[14]] / 2)), 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
                int i13 = this.catfood;
                int i14 = 0;
                do {
                    atexturerenderer.drawScaledImagef(this.uiTextures[4], (924 - (i14 * 29)) + this.excessWidth, 592, i13 % 10);
                    i13 /= 10;
                    i14++;
                } while (i13 > 0);
                atexturerenderer.drawScaledImage(this.uiTextures[21], this.excessWidth + 610, 607, 76, 25, 24);
            }
        }
    }

    boolean c(int i, int i2, int i3, int i4, int i5, int i6) {
        int i7;
        int i8 = 0;
        try {
            i8 = b(this.years[0], this.months[0] + 1, this.days[0], this.hour, this.minute, this.second);
            i7 = b(i, i2 + 1, i3, i4, i5, i6);
        } catch (Exception e) {
            i8 = i8;
            i7 = 0;
        }
        int i9 = i7 - i8;
        if (i9 < 60) {
            if (i9 > -1 || i9 >= -86400) {
                return true;
            }
            Calendar calendar = Calendar.getInstance();
            calendar.set(i, i2, i3, i4, i5, i6);
            calendar.add(5, 1);
            this.years[0] = calendar.get(1);
            this.months[0] = calendar.get(2);
            this.days[0] = calendar.get(5);
            this.hour = calendar.get(11);
            this.minute = calendar.get(12);
            this.second = calendar.get(13);
            return true;
        }
        this.years[0] = i;
        this.months[0] = i2;
        this.days[0] = i3;
        this.hour = i4;
        this.minute = i5;
        this.second = i6;
        this.currentEnergy = (i9 / 60) + this.currentEnergy;
        int i10 = 0;
        for (int i11 = 0; i11 < 10; i11++) {
            i10 += (cB[10] * this.bO[i11][10]) / 100;
        }
        if (this.currentEnergy >= ad[10] + (this.bx[10] * 10) + i10) {
            this.currentEnergy = i10 + ad[10] + (this.bx[10] * 10);
            return true;
        }
        return true;
    }

    @Override // jp.co.ponos.battlecats.Game
    public void d() {
        this.b = false;
        aSound.getInstance().stopAll();
        for (int i = 0; i < 43; i++) {
            aSound.getInstance().unloadSoundEffect(i);
        }
        aSound.getInstance().d();
        this.zoom.reset();
        this.pointerDownNow = false;
        this.isPressEvent = false;
        this.isReleaseEvent = false;
        this.pointerUp = false;
        this.pointerDown = false;
    }

    void loadUnitBuyStats(int i) {
        // if (!aString.isEqual(aAssetTextStream.getHash(String.format("unitbuy%03d.csv", i + 1)), new String[]{"804ffc7cbfb735e79d355538117f602a", "da00d88cc9c3127e88a999879e203a80", "3cf141900d9b21d99811dc850408f901", "4960b382d7171aa0340ae7559f380bea", "47b5dc4ab2521d191b92c7b2f9a5ba2c", "8f9a611bb43e9252e7469274eba48ecb", "1dc60dd4e820a3367da711966904ffbf", "d0cba580b0d3ef8dd3c084912ffd437a", "83d503725ab63f834afda0f11b7027ba", "1e7c9194142f634fc2b7cd01cdef3ef4", "553afaf8a7b6d47304269a93c9f76636", "fb9fe18da89f1b96f739adbe931c7fe0", "3d260bfb7d74ab43f9f31495a257b5f1", "bd06858427bdea0199d2d7e12c24e903", "9761b3638597a99b9dfef46d097d0ed2", "61a2e033ae724d6ae337294ed3db38cd", "3591f4ee40440ed4e73494b4c9eef85a", "74330d071ce91eb822951f64104d1b30", "dab38fe098106d2ac187fa410c978486", "22f151fe39ffa40b088f2d64a182c9e5", "191afdccc437d2917500675ced12fb3f", "fd09308a974adeaf7db94cc205f6b10b", "30bb912a4cf7b19c23136af2f3804cbd", "d6ea2f2b783d3ba4ba9cee5caa92550b", "363076546cdfe5f0f6448844f571e353", "e49bd23022e28870bee5cf9315df487d"}[i])) {
        //     this.D = 0;
        //     setScene(SceneType.ERROR);
        //     return;
        // }
        aResourceFileStream aresourcefilestream = new aResourceFileStream();
        aresourcefilestream.openRead(String.format("unitbuy%03d.csv", i + 1));
        aresourcefilestream.readLine();
        for (int i2 = 0; i2 < getLength(this.unitBuyStats[i]); i2++) {
            this.unitBuyStats[i][i2] = aresourcefilestream.getInt(i2);
        }
        aresourcefilestream.close();
    }

    void d(aTextureRenderer atexturerenderer) {
        int i = 0;
        if (this.battleData[15] >= 1) {
            int i2 = this.battleData[16];
            if (this.battleData[15] != 1) {
                i2 = getLength(cq) - 1;
            } else if (i2 > getLength(cq) - 1) {
                i2 = getLength(cq) - 1;
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[19], ((getWidth() / 2) - 239) - cq[i2], 190, 0);
        }
        if (this.battleData[15] >= 2) {
            int i3 = this.battleData[16];
            if (this.battleData[15] != 2) {
                i3 = getLength(cq) - 1;
            } else if (i3 > getLength(cq) - 1) {
                i3 = getLength(cq) - 1;
            }
            atexturerenderer.setBlendMode(3);
            atexturerenderer.setColor(40, 40, 77);
            atexturerenderer.drawRectangle(0 - cq[i3], 315, getWidth(), 55);
            atexturerenderer.setBlendMode(0);
            int i4 = 10;
            while (i4 <= this.battleData[22]) {
                i4 *= 10;
                i--;
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[19], (((((getWidth() / 2) - 14) - 144) + (i * 14)) - cq[i3]) - 20, 324, 5);
            for (int i5 = i4 / 10; i5 >= 1; i5 /= 10) {
                atexturerenderer.drawScaledImagef(this.uiTextures[4], (((getWidth() / 2) - 14) + (i * 14)) - cq[i3], 321, (this.battleData[22] / i5) % 10);
                i += 2;
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[19], (((i * 16) + ((getWidth() / 2) - 16)) - cq[i3]) + 20, 323, 4);
            if (this.battleData[15] >= 3) {
                int i6 = this.battleData[23];
            }
        }
    }

    @Override // jp.co.ponos.battlecats.Game
    public void onProcess() {
        int i;
        boolean z;
        boolean z2;
        this.excessWidth = getWidth() - 960;
        this.prevXTouch = this.currentXTouch;
        this.prevYTouch = this.currentYTouch;
        this.currentXTouch = this.touchX;
        this.currentYTouch = this.touchY;
        if (this.isReleaseEvent) {
            this.isReleaseEvent = false;
            this.pointerUp = true;
            this.pointerDown = false;
            this.pointerDownNow = false;
            this.isPressEvent = false;
        } else if (this.isPressEvent) {
            this.isPressEvent = false;
            this.pointerUp = false;
            this.pointerDown = true;
            this.pointerDownNow = true;
            int tempX = this.currentXTouch;
            this.prevXTouch = tempX;
            this.tempXTouch = tempX;
            int tempY = this.currentYTouch;
            this.prevYTouch = tempY;
            this.tempYTouch = tempY;
        } else {
            this.pointerUp = false;
            this.pointerDownNow = false;
        }
        this.isBackPressed = this.backPressed;
        this.backPressed = false;
        if (this.initState == 1 || this.initState == 3) {
            MyUtility.getInstance().addProgressDialog();
            this.initState++;
            return;
        }
        if (this.initState == 2 || this.initState == 4) {
            if (this.popupTexture.isLoaded()) {
                this.popupTexture.reset();
            }
            if (!this.popupTexture.isLoaded()) {
                this.popupTexture.load(MyUtility.getString(String.format("img%03d.png", 5)), MyUtility.getString(String.format("img%03d.imgcut", 5)));
            }
            if (this.newTexture.isLoaded()) {
                this.newTexture.reset();
            }
            if (!this.newTexture.isLoaded()) {
                this.newTexture.load(MyUtility.getString(String.format("img%03d.png", 34)), MyUtility.getString(String.format("img%03d.imgcut", 34)));
            }
            if (this.arrowTexture.isLoaded()) {
                this.arrowTexture.reset();
            }
            if (!this.arrowTexture.isLoaded()) {
                this.arrowTexture.load(MyUtility.getString(String.format("img%03d.png", 39)), MyUtility.getString(String.format("img%03d.imgcut", 39)));
            }
            if (this.settingsMenuTexture[2].isLoaded()) {
                this.settingsMenuTexture[2].reset();
            }
            if (!this.settingsMenuTexture[2].isLoaded()) {
                this.settingsMenuTexture[2].load(MyUtility.getString(String.format("img%03d.png", 101)), MyUtility.getString(String.format("img%03d.imgcut", 101)));
            }
            if (this.settingsMenuTexture[3].isLoaded()) {
                this.settingsMenuTexture[3].reset();
            }
            if (!this.settingsMenuTexture[3].isLoaded()) {
                this.settingsMenuTexture[3].load(MyUtility.getString(String.format("img%03d.png", 102)), MyUtility.getString(String.format("img%03d.imgcut", 102)));
            }
            switch (getSceneType()) {
                case OPENING:
                    if (!this.openingTexture[0].isLoaded()) {
                        this.openingTexture[0].reset();
                    }
                    if (!this.openingTexture[0].isLoaded()) {
                        this.openingTexture[0].load(MyUtility.getString(String.format("img%03d.png", 13)), MyUtility.getString(String.format("000_img%03d.imgcut", 13)));
                    }
                    this.openingModel[0].load(MyUtility.getString(String.format("opening.mamodel", new Object[0])));
                    this.openingAnim[0].load(MyUtility.getString(String.format("opening.maanim", new Object[0])));
                    this.openingModel[0].setTextures(this.openingTexture);
                    this.openingModel[0].setAction();
                    if (this.uiTextures[2].isLoaded()) {
                        this.uiTextures[2].reset();
                    }
                    if (!this.uiTextures[2].isLoaded()) {
                        this.uiTextures[2].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
                        break;
                    }
                    break;
                case ENDING:
                    if (this.uiTextures[0].isLoaded()) {
                        this.uiTextures[0].reset();
                    }
                    if (!this.uiTextures[0].isLoaded()) {
                        this.uiTextures[0].load(MyUtility.getString(String.format("img%03d.png", 35)), MyUtility.getString(String.format("img%03d.imgcut", 35)));
                    }
                    if (this.uiTextures[1].isLoaded()) {
                        this.uiTextures[1].reset();
                    }
                    if (!this.uiTextures[1].isLoaded()) {
                        this.uiTextures[1].load(MyUtility.getString(String.format("img%03d.png", 7)), MyUtility.getString(String.format("img%03d.imgcut", 7)));
                    }
                    if (this.uiTextures[2].isLoaded()) {
                        this.uiTextures[2].reset();
                    }
                    if (!this.uiTextures[2].isLoaded()) {
                        this.uiTextures[2].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
                    }
                    if (this.uiTextures[3].isLoaded()) {
                        this.uiTextures[3].reset();
                    }
                    if (!this.uiTextures[3].isLoaded()) {
                        this.uiTextures[3].load(MyUtility.getString(String.format("img%03d.png", 36)), MyUtility.getString(String.format("img%03d.imgcut", 36)));
                        break;
                    }
                    break;
                case MAIN:
                    if (this.getScreenType() == ScreenType.TITLE) {
                        if (this.settingsMenuTexture[1].isLoaded()) {
                            this.settingsMenuTexture[1].reset();
                        }
                        if (!this.settingsMenuTexture[1].isLoaded()) {
                            this.settingsMenuTexture[1].load(MyUtility.getString(String.format("img%03d.png", 100)), MyUtility.getString(String.format("img%03d.imgcut", 100)));
                        }
                        if (!this.uiTextures[0].isLoaded()) {
                            this.uiTextures[0].load(MyUtility.getString(String.format("img%03d.png", 12)), MyUtility.getString(String.format("img%03d.imgcut", 12)));
                        }
                        if (!this.uiTextures[1].isLoaded()) {
                            this.uiTextures[1].load(MyUtility.getString(String.format("img%03d.png", 11)), MyUtility.getString(String.format("img%03d.imgcut", 11)));
                        }
                        if (!this.uiTextures[2].isLoaded()) {
                            this.uiTextures[2].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
                        }
                        if (!this.uiTextures[3].isLoaded()) {
                            this.uiTextures[3].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
                        }
                        if (!this.uiTextures[4].isLoaded()) {
                            this.uiTextures[4].load(MyUtility.getString(String.format("img%03d.png", 7)), MyUtility.getString(String.format("img%03d.imgcut", 7)));
                        }
                        if (!this.uiTextures[5].isLoaded()) {
                            this.uiTextures[5].load(MyUtility.getString(String.format("img%03d.png", 33)), MyUtility.getString(String.format("img%03d.imgcut", 33)));
                        }
                        if (!this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 1)), MyUtility.getString(String.format("img%03d.imgcut", 1)));
                        }
                        if (!this.uiTextures[7].isLoaded()) {
                            this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 2)), MyUtility.getString(String.format("img%03d.imgcut", 2)));
                        }
                        if (!this.uiTextures[8].isLoaded()) {
                            this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 19)), MyUtility.getString(String.format("img%03d.imgcut", 19)));
                        }
                        if (!this.uiTextures[9].isLoaded()) {
                            this.uiTextures[9].load(MyUtility.getString(String.format("img%03d.png", 31)), MyUtility.getString(String.format("img%03d.imgcut", 31)));
                        }
                    }
                    if (
                            this.getScreenType() == ScreenType.CAT_BASE
                            || this.getScreenType() == ScreenType.MAP2
                            || this.getScreenType() == ScreenType.MAP
                            || this.getScreenType() == ScreenType.POWER_UP
                            || this.getScreenType() == ScreenType.EQUIP
                            || this.getScreenType() == ScreenType.TREASURE
                            || this.getScreenType() == ScreenType.ENEMY_GUIDE
                            || this.getScreenType() == ScreenType.ITEM_SHOP
                            || this.getScreenType() == ScreenType.STAMP
                    ) {
                        if (this.settingsMenuTexture[0].isLoaded()) {
                            this.settingsMenuTexture[0].reset();
                        }
                        if (!this.settingsMenuTexture[0].isLoaded()) {
                            this.settingsMenuTexture[0].load(MyUtility.getString(String.format("img%03d_%d.png", 9, this.eQ + 3)), MyUtility.getString(String.format("img%03d_%d.imgcut", 9, this.eQ + 3)));
                        }
                        if (this.uiTextures[0].isLoaded()) {
                            this.uiTextures[0].reset();
                        }
                        if (!this.uiTextures[0].isLoaded()) {
                            this.uiTextures[0].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
                        }
                        if (this.uiTextures[1].isLoaded()) {
                            this.uiTextures[1].reset();
                        }
                        if (!this.uiTextures[1].isLoaded()) {
                            this.uiTextures[1].load(MyUtility.getString(String.format("img%03d.png", 7)), MyUtility.getString(String.format("img%03d.imgcut", 7)));
                        }
                        if (this.uiTextures[2].isLoaded()) {
                            this.uiTextures[2].reset();
                        }
                        if (!this.uiTextures[2].isLoaded()) {
                            this.uiTextures[2].load(MyUtility.getString(String.format("img%03d.png", 8)), MyUtility.getString(String.format("img%03d.imgcut", 8)));
                        }
                        if (this.uiTextures[3].isLoaded()) {
                            this.uiTextures[3].reset();
                        }
                        if (!this.uiTextures[3].isLoaded()) {
                            this.uiTextures[3].load(MyUtility.getString(String.format("img%03d_%d.png", 9, 0)), MyUtility.getString(String.format("img%03d.imgcut", 9)));
                        }
                        if (this.uiTextures[4].isLoaded()) {
                            this.uiTextures[4].reset();
                        }
                        if (!this.uiTextures[4].isLoaded()) {
                            this.uiTextures[4].load(MyUtility.getString(String.format("img%03d.png", 10)), MyUtility.getString(String.format("img%03d.imgcut", 10)));
                        }
                        if (this.uiTextures[5].isLoaded()) {
                            this.uiTextures[5].reset();
                        }
                        if (!this.uiTextures[5].isLoaded()) {
                            this.uiTextures[5].load(MyUtility.getString(String.format("img%03d.png", 24)), MyUtility.getString(String.format("img%03d.imgcut", 24)));
                        }
                    }
                    if (this.getScreenType() == ScreenType.MAP2) {
                        for (int slotIndex = 0; slotIndex < 10; slotIndex++) {
                            if (!this.uniTextures[slotIndex].isLoaded()) {
                                if (this.slotCatIDs[slotIndex] == -1) {
                                    this.uniTextures[slotIndex].load(MyUtility.getString(String.format("uni.png", new Object[0])), MyUtility.getString(String.format("uni.imgcut", new Object[0])));
                                } else if (this.slotFormIDs[slotIndex] == 0) {
                                    this.uniTextures[slotIndex].load(MyUtility.getString(String.format("uni%03d_f%02d.png", this.slotCatIDs[slotIndex] - 2, 0)), MyUtility.getString(String.format("uni%03d_f%02d.imgcut", this.slotCatIDs[slotIndex] - 2, 0)));
                                } else if (this.slotFormIDs[slotIndex] == 1) {
                                    this.uniTextures[slotIndex].load(MyUtility.getString(String.format("uni%03d_c%02d.png", this.slotCatIDs[slotIndex] - 2, 0)), MyUtility.getString(String.format("uni%03d_c%02d.imgcut", this.slotCatIDs[slotIndex] - 2, 0)));
                                }
                            }
                        }
                        if (this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].reset();
                        }
                        if (!this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 32)), MyUtility.getString(String.format("img%03d.imgcut", 32)));
                        }
                        if (this.uiTextures[7].isLoaded()) {
                            this.uiTextures[7].reset();
                        }
                        if (!this.uiTextures[7].isLoaded()) {
                            this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 19)), MyUtility.getString(String.format("img%03d.imgcut", 19)));
                        }
                        if (this.uiTextures[8].isLoaded()) {
                            this.uiTextures[8].reset();
                        }
                        if (!this.uiTextures[8].isLoaded()) {
                            this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 33)), MyUtility.getString(String.format("img%03d.imgcut", 33)));
                        }
                    }
                    if (this.getScreenType() == ScreenType.MAP) {
                        if (this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].reset();
                        }
                        if (!this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 18)), MyUtility.getString(String.format("img%03d.imgcut", 18)));
                        }
                        if (this.uiTextures[7].isLoaded()) {
                            this.uiTextures[7].reset();
                        }
                        if (!this.uiTextures[7].isLoaded()) {
                            this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 19)), MyUtility.getString(String.format("img%03d.imgcut", 19)));
                        }
                        if (this.uiTextures[9].isLoaded()) {
                            this.uiTextures[9].reset();
                        }
                        if (!this.uiTextures[9].isLoaded()) {
                            this.uiTextures[9].load(MyUtility.getString(String.format("img%03d.png", 31)), MyUtility.getString(String.format("img%03d.imgcut", 31)));
                        }
                        if (this.uiTextures[10].isLoaded()) {
                            this.uiTextures[10].reset();
                        }
                        if (!this.uiTextures[10].isLoaded()) {
                            this.uiTextures[10].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
                        }
                        if (this.uiTextures[11].isLoaded()) {
                            this.uiTextures[11].reset();
                        }
                        if (!this.uiTextures[11].isLoaded()) {
                            this.uiTextures[11].load(MyUtility.getString(String.format("img%03d.png", 30)), MyUtility.getString(String.format("img%03d.imgcut", 30)));
                        }
                        if (this.uiTextures[12].isLoaded()) {
                            this.uiTextures[12].reset();
                        }
                        if (!this.uiTextures[12].isLoaded()) {
                            this.uiTextures[12].load(MyUtility.getString(String.format("img%03d.png", 33)), MyUtility.getString(String.format("img%03d.imgcut", 33)));
                        }
                        if (this.uiTextures[13].isLoaded()) {
                            this.uiTextures[13].reset();
                        }
                        if (!this.uiTextures[13].isLoaded()) {
                            this.uiTextures[13].load(MyUtility.getString(String.format("img%03d.png", 1)), MyUtility.getString(String.format("img%03d.imgcut", 1)));
                        }
                    }
                    if (this.getScreenType() == ScreenType.POWER_UP) {
                        if (this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].reset();
                        }
                        if (!this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 21)), MyUtility.getString(String.format("img%03d.imgcut", 21)));
                        }
                        if (this.currentBox[3] == 0) {
                            if (this.uiTextures[7].isLoaded()) {
                                this.uiTextures[7].reset();
                            }
                            if (!this.uiTextures[7].isLoaded()) {
                                this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 22)), MyUtility.getString(String.format("img%03d.imgcut", 22)));
                            }
                            if (this.uiTextures[8].isLoaded()) {
                                this.uiTextures[8].reset();
                            }
                            if (!this.uiTextures[8].isLoaded()) {
                                this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 23)), MyUtility.getString(String.format("img%03d.imgcut", 23)));
                            }
                        } else if (this.currentBox[3] >= 1) {
                            if (this.uiTextures[7].isLoaded()) {
                                this.uiTextures[7].reset();
                            }
                            if (!this.uiTextures[7].isLoaded()) {
                                this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 26)), MyUtility.getString(String.format("img%03d.imgcut", 26)));
                            }
                            if (this.uiTextures[8].isLoaded()) {
                                this.uiTextures[8].reset();
                            }
                            if (!this.uiTextures[8].isLoaded()) {
                                this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 27)), MyUtility.getString(String.format("img%03d.imgcut", 27)));
                            }
                        }
                        if (this.uiTextures[9].isLoaded()) {
                            this.uiTextures[9].reset();
                        }
                        if (!this.uiTextures[9].isLoaded()) {
                            this.uiTextures[9].load(MyUtility.getString(String.format("img%03d.png", 28)), MyUtility.getString(String.format("img%03d.imgcut", 28)));
                        }
                        if (!this.uiTextures[10].isLoaded()) {
                            this.uiTextures[10].reset();
                        }
                        if (!this.uiTextures[10].isLoaded()) {
                            this.uiTextures[10].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
                        }
                        for (int i5 = 0; i5 < this.boxCounts[1] + 1; i5++) {
                            if (this.uiTextures[i5 + 11].isLoaded()) {
                                this.uiTextures[i5 + 11].reset();
                            }
                            if (i5 < this.gB[1]) {
                                if (!this.uiTextures[i5 + 11].isLoaded()) {
                                    this.uiTextures[i5 + 11].load(MyUtility.getString(String.format("udi%03d_g.png", 0)), MyUtility.getString(String.format("udi%03d_g.imgcut", 0)));
                                }
                            } else if (i5 < this.gB[0]) {
                                if (!this.uiTextures[i5 + 11].isLoaded()) {
                                    if (this.bw[this.boxCatIDs[i5 - this.gB[1]]] == 0) {
                                        this.uiTextures[i5 + 11].load(MyUtility.getString(String.format("udi%03d_f.png", this.boxCatIDs[i5 - this.gB[1]])), MyUtility.getString(String.format("udi%03d_f.imgcut", this.boxCatIDs[i5 - this.gB[1]])));
                                    } else {
                                        this.uiTextures[i5 + 11].load(MyUtility.getString(String.format("udi%03d_c.png", this.boxCatIDs[i5 - this.gB[1]])), MyUtility.getString(String.format("udi%03d_c.imgcut", this.boxCatIDs[i5 - this.gB[1]])));
                                    }
                                }
                            } else if (i5 - this.gB[0] != 0 || this.bx[0] + 1 >= this.bi) {
                                if (i5 - this.gB[0] == 0) {
                                    if (!this.uiTextures[i5 + 11].isLoaded()) {
                                        this.uiTextures[i5 + 11].load(MyUtility.getString(String.format("udi%03d_sg_%s.png", i5 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_sg_%s.imgcut", i5 - this.gB[0], MyUtility.getString("lang"))));
                                    }
                                } else if (i5 - this.gB[0] != 1 || this.bx[2] + 1 >= 10) {
                                    if (i5 - this.gB[0] == 1) {
                                        if (!this.uiTextures[i5 + 11].isLoaded()) {
                                            this.uiTextures[i5 + 11].load(MyUtility.getString(String.format("udi%03d_sg_%s.png", i5 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_sg_%s.imgcut", i5 - this.gB[0], MyUtility.getString("lang"))));
                                        }
                                    } else if (this.bx[(i5 - this.gB[0]) + 1] + 1 < this.bi) {
                                        if (!this.uiTextures[i5 + 11].isLoaded()) {
                                            this.uiTextures[i5 + 11].load(MyUtility.getString(String.format("udi%03d_s_%s.png", i5 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_s_%s.imgcut", i5 - this.gB[0], MyUtility.getString("lang"))));
                                        }
                                    } else if (!this.uiTextures[i5 + 11].isLoaded()) {
                                        this.uiTextures[i5 + 11].load(MyUtility.getString(String.format("udi%03d_sg_%s.png", i5 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_sg_%s.imgcut", i5 - this.gB[0], MyUtility.getString("lang"))));
                                    }
                                } else if (!this.uiTextures[i5 + 11].isLoaded()) {
                                    this.uiTextures[i5 + 11].load(MyUtility.getString(String.format("udi%03d_s_%s.png", i5 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_s_%s.imgcut", i5 - this.gB[0], MyUtility.getString("lang"))));
                                }
                            } else if (!this.uiTextures[i5 + 11].isLoaded()) {
                                this.uiTextures[i5 + 11].load(MyUtility.getString(String.format("udi%03d_s_%s.png", i5 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_s_%s.imgcut", i5 - this.gB[0], MyUtility.getString("lang"))));
                            }
                        }
                    }
                    if (this.getScreenType() == ScreenType.EQUIP) {
                        for (int i6 = 0; i6 < 10; i6++) {
                            if (!this.uniTextures[i6].isLoaded()) {
                                if (this.slotCatIDs[i6] == -1) {
                                    this.uniTextures[i6].load(MyUtility.getString(String.format("uni.png", new Object[0])), String.format("uni.imgcut", new Object[0]));
                                } else if (this.slotFormIDs[i6] == 0) {
                                    this.uniTextures[i6].load(MyUtility.getString(String.format("uni%03d_f%02d.png", this.slotCatIDs[i6] - 2, 0)), MyUtility.getString(String.format("uni%03d_f%02d.imgcut", this.slotCatIDs[i6] - 2, 0)));
                                } else if (this.slotFormIDs[i6] == 1) {
                                    this.uniTextures[i6].load(MyUtility.getString(String.format("uni%03d_c%02d.png", this.slotCatIDs[i6] - 2, 0)), MyUtility.getString(String.format("uni%03d_c%02d.imgcut", this.slotCatIDs[i6] - 2, 0)));
                                }
                            }
                        }
                        if (this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].reset();
                        }
                        if (!this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 21)), MyUtility.getString(String.format("img%03d.imgcut", 21)));
                        }
                        if (this.uiTextures[7].isLoaded()) {
                            this.uiTextures[7].reset();
                        }
                        if (!this.uiTextures[7].isLoaded()) {
                            this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 29)), MyUtility.getString(String.format("img%03d.imgcut", 29)));
                        }
                        if (this.ff[3] == 0) {
                            if (this.uiTextures[8].isLoaded()) {
                                this.uiTextures[8].reset();
                            }
                            if (!this.uiTextures[8].isLoaded()) {
                                this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 23)), MyUtility.getString(String.format("img%03d.imgcut", 23)));
                            }
                        } else if (this.ff[3] >= 1) {
                            if (this.uiTextures[8].isLoaded()) {
                                this.uiTextures[8].reset();
                            }
                            if (!this.uiTextures[8].isLoaded()) {
                                this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 27)), MyUtility.getString(String.format("img%03d.imgcut", 27)));
                            }
                        }
                        if (this.uiTextures[9].isLoaded()) {
                            this.uiTextures[9].reset();
                        }
                        if (!this.uiTextures[9].isLoaded()) {
                            this.uiTextures[9].load(MyUtility.getString(String.format("img%03d.png", 28)), MyUtility.getString(String.format("img%03d.imgcut", 28)));
                        }
                        if (!this.uiTextures[10].isLoaded()) {
                            this.uiTextures[10].reset();
                        }
                        if (!this.uiTextures[10].isLoaded()) {
                            this.uiTextures[10].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
                        }
                        for (int i7 = 0; i7 < this.boxCounts[1] + 1; i7++) {
                            if (this.uiTextures[i7 + 11].isLoaded()) {
                                this.uiTextures[i7 + 11].reset();
                            }
                            if (!this.uiTextures[i7 + 11].isLoaded()) {
                                if (this.bw[this.boxCatIDs[i7]] == 0) {
                                    this.uiTextures[i7 + 11].load(MyUtility.getString(String.format("udi%03d_f.png", this.boxCatIDs[i7])), MyUtility.getString(String.format("udi%03d_f.imgcut", this.boxCatIDs[i7])));
                                } else {
                                    this.uiTextures[i7 + 11].load(MyUtility.getString(String.format("udi%03d_c.png", this.boxCatIDs[i7])), MyUtility.getString(String.format("udi%03d_c.imgcut", this.boxCatIDs[i7])));
                                }
                            }
                        }
                    }
                    if (this.getScreenType() == ScreenType.TREASURE) {
                        this.fr = -1;
                        h(this.fq[0]);
                        if (this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].reset();
                        }
                        if (!this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 17)), MyUtility.getString(String.format("img%03d.imgcut", 17)));
                        }
                        if (this.uiTextures[8].isLoaded()) {
                            this.uiTextures[8].reset();
                        }
                        if (!this.uiTextures[8].isLoaded()) {
                            this.uiTextures[8].load(MyUtility.getString(String.format("ot%03d_c.png", 11)), MyUtility.getString(String.format("ot%03d_c.imgcut", 11)));
                        }
                    }
                    if (this.getScreenType() == ScreenType.ENEMY_GUIDE) {
                        if (this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].reset();
                        }
                        if (!this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 15)), MyUtility.getString(String.format("img%03d.imgcut", 15)));
                        }
                        if (this.uiTextures[7].isLoaded()) {
                            this.uiTextures[7].reset();
                        }
                        if (!this.uiTextures[7].isLoaded()) {
                            this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 16)), MyUtility.getString(String.format("img%03d.imgcut", 16)));
                        }
                        if (this.uiTextures[8].isLoaded()) {
                            this.uiTextures[8].reset();
                        }
                        if (!this.uiTextures[8].isLoaded()) {
                            this.uiTextures[8].load(MyUtility.getString(String.format("%03d_a.png", 0)), MyUtility.getString(String.format("%03d_a.imgcut", 0)));
                        }
                        if (this.uiTextures[9].isLoaded()) {
                            this.uiTextures[9].reset();
                        }
                        if (!this.uiTextures[9].isLoaded()) {
                            this.uiTextures[9].load(MyUtility.getString(String.format("img%03d.png", 21)), MyUtility.getString(String.format("img%03d.imgcut", 21)));
                        }
                        this.ft = -1;
                        a(1, this.fs[2]);
                    }
                    if (this.getScreenType() == ScreenType.ITEM_SHOP) {
                        if (this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].reset();
                        }
                        if (!this.uiTextures[6].isLoaded()) {
                            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 21)), MyUtility.getString(String.format("img%03d.imgcut", 21)));
                        }
                        if (this.uiTextures[7].isLoaded()) {
                            this.uiTextures[7].reset();
                        }
                        if (!this.uiTextures[7].isLoaded()) {
                            this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 37)), MyUtility.getString(String.format("img%03d.imgcut", 37)));
                        }
                        if (this.uiTextures[8].isLoaded()) {
                            this.uiTextures[8].reset();
                        }
                        if (!this.uiTextures[8].isLoaded()) {
                            this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 38)), MyUtility.getString(String.format("img%03d.imgcut", 38)));
                        }
                        if (!this.uiTextures[10].isLoaded()) {
                            this.uiTextures[10].reset();
                        }
                        if (!this.uiTextures[10].isLoaded()) {
                            this.uiTextures[10].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
                        }
                        if (!this.uiTextures[11].isLoaded()) {
                            this.uiTextures[11].reset();
                        }
                        if (!this.uiTextures[11].isLoaded()) {
                            this.uiTextures[11].load(MyUtility.getString(String.format("item%03d.png", 0)), MyUtility.getString(String.format("item%03d.imgcut", 0)));
                        }
                    }
                    if (this.getScreenType() == ScreenType.STAMP) {
                        if (this.stampTextures[0].isLoaded()) {
                            this.stampTextures[0].reset();
                        }
                        if (!this.stampTextures[0].isLoaded()) {
                            this.stampTextures[0].load(MyUtility.getString(String.format("i%03d_stamp_f.png", 0)), MyUtility.getString(String.format("%03d_stamp_f.imgcut", 0)));
                        }
                        this.stampModels[0].load(MyUtility.getString(String.format("%03d_stamp_f.mamodel", 0)));
                        this.stampAnims[0].load(MyUtility.getString(String.format("%03d_stamp_f00.maanim", 0)));
                        this.stampModels[0].setTextures(this.stampTextures);
                        this.stampModels[0].setAction();
                        if (this.stampTextures[1].isLoaded()) {
                            this.stampTextures[1].reset();
                        }
                        if (!this.stampTextures[1].isLoaded()) {
                            this.stampTextures[1].load(MyUtility.getString(String.format("i%03d_img044.png", 1)), MyUtility.getString(String.format("i%03d_img044.imgcut", 1)));
                        }
                        this.stampModels[1].load(MyUtility.getString(String.format("%03d_img044.mamodel", 1)));
                        this.stampAnims[1].load(MyUtility.getString(String.format("stamp.maanim", new Object[0])));
                        this.stampModels[1].setTextures(this.stampTextures);
                        this.stampModels[1].setAction();
                        if (this.uiTextures[10].isLoaded()) {
                            this.uiTextures[10].reset();
                        }
                        if (!this.uiTextures[10].isLoaded()) {
                            this.uiTextures[10].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
                        }
                    }
                    if (this.getScreenType() == ScreenType.LEGEND) {
                        if (!this.uiTextures[0].isLoaded()) {
                            this.uiTextures[0].load(MyUtility.getString(String.format("img_%03d_intro.png", 45)), MyUtility.getString(String.format("img_%03d_intro.imgcut", 45)));
                        }
                        if (!this.uiTextures[1].isLoaded()) {
                            this.uiTextures[1].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
                        }
                        if (this.eQ >= 1) {
                            if (!this.legendTextures[this.eQ - 1].isLoaded()) {
                                this.legendTextures[this.eQ - 1].load(MyUtility.getString(String.format("i%03d_p.png", this.eQ - 1)), MyUtility.getString(String.format("%03d_p.imgcut", this.eQ - 1)));
                            }
                            this.aJ.load(MyUtility.getString(String.format("%03d_p.mamodel", this.eQ - 1)));
                            for (int i8 = 0; i8 < getLength(this.legendAnims); i8++) {
                                this.legendAnims[i8].load(MyUtility.getString(String.format("%03d_p%02d.maanim", this.eQ - 1, i8)));
                            }
                            this.aJ.setTextures(this.legendTextures);
                            this.aJ.setAction();
                            break;
                        }
                    }
                    break;
                case BATTLE: // battle
                    if (this.settingsMenuTexture[1].isLoaded()) {
                        this.settingsMenuTexture[1].reset();
                    }
                    if (!this.settingsMenuTexture[1].isLoaded()) {
                        this.settingsMenuTexture[1].load(MyUtility.getString(String.format("img%03d.png", 100)), MyUtility.getString(String.format("img%03d.imgcut", 100)));
                    }
                    if (this.uiTextures[0].isLoaded()) {
                        this.uiTextures[0].reset();
                    }
                    if (!this.uiTextures[0].isLoaded()) {
                        this.uiTextures[0].load(MyUtility.getString(String.format("bg%03d.png", this.bV[4] + 0)), MyUtility.getString(String.format("bg%03d.imgcut", this.bV[4])));
                    }
                    if (this.uiTextures[1].isLoaded()) {
                        this.uiTextures[1].reset();
                    }
                    if (!this.uiTextures[1].isLoaded()) {
                        this.uiTextures[1].load(MyUtility.getString(String.format("fc%03d.png", 0)), MyUtility.getString(String.format("fc%03d.imgcut", 0)));
                    }
                    if (this.uiTextures[2].isLoaded()) {
                        this.uiTextures[2].reset();
                    }
                    if (!this.uiTextures[2].isLoaded()) {
                        this.uiTextures[2].load(MyUtility.getString(String.format("ec%03d.png", this.battleData[20])), MyUtility.getString(String.format("ec%03d.imgcut", this.battleData[20])));
                    }
                    if (this.catBaseTexture[0].isLoaded()) {
                        this.catBaseTexture[0].reset();
                    }
                    if (!this.catBaseTexture[0].isLoaded()) {
                        this.catBaseTexture[0].load(MyUtility.getString(String.format("i%03d_a.png", 0)), MyUtility.getString(String.format("%03d_a.imgcut", 0)));
                        this.catBaseModel[0].load(MyUtility.getString(String.format("%03d_a.mamodel", 0)));
                        for (int i9 = 0; i9 < 1; i9++) {
                            this.catBaseAnim[0][i9].load(MyUtility.getString(String.format("%03d_a%02d.maanim", 0, i9)));
                        }
                        this.catBaseModel[1].load(MyUtility.getString(String.format("%03d_a.mamodel", 1)));
                        for (int i10 = 0; i10 < 2; i10++) {
                            this.catBaseAnim[1][i10].load(MyUtility.getString(String.format("%03d_a%02d.maanim", 1, i10)));
                        }
                        for (int i11 = 0; i11 < 2; i11++) {
                            this.catBaseModel[i11].setTextures(this.catBaseTexture);
                            this.catBaseModel[i11].setAction();
                        }
                    }
                    if (this.uiTextures[4].isLoaded()) {
                        this.uiTextures[4].reset();
                    }
                    if (!this.uiTextures[4].isLoaded()) {
                        this.uiTextures[4].load(MyUtility.getString(String.format("img%03d.png", 1)), MyUtility.getString(String.format("img%03d.imgcut", 1)));
                    }
                    if (this.uiTextures[15].isLoaded()) {
                        this.uiTextures[15].reset();
                    }
                    if (!this.uiTextures[15].isLoaded()) {
                        this.uiTextures[15].load(MyUtility.getString(String.format("img%03d.png", 2)), MyUtility.getString(String.format("img%03d.imgcut", 2)));
                    }
                    if (this.uiTextures[16].isLoaded()) {
                        this.uiTextures[16].reset();
                    }
                    if (!this.uiTextures[16].isLoaded()) {
                        this.uiTextures[16].load(MyUtility.getString(String.format("ec%03d_s.png", this.battleData[20])), MyUtility.getString(String.format("ec%03d_s.imgcut", this.battleData[20])));
                    }
                    if (this.uiTextures[17].isLoaded()) {
                        this.uiTextures[17].reset();
                    }
                    if (!this.uiTextures[17].isLoaded()) {
                        this.uiTextures[17].load(MyUtility.getString(String.format("ec%03d_n_%s.png", this.battleData[20], MyUtility.getString("lang"))), MyUtility.getString(String.format("ec%03d_n_%s.imgcut", this.battleData[20], MyUtility.getString("lang"))));
                    }
                    if (this.uiTextures[18].isLoaded()) {
                        this.uiTextures[18].reset();
                    }
                    if (!this.uiTextures[18].isLoaded()) {
                        this.uiTextures[18].load(MyUtility.getString(String.format("img%03d.png", 3)), MyUtility.getString(String.format("img%03d.imgcut", 3)));
                    }
                    if (this.uiTextures[19].isLoaded()) {
                        this.uiTextures[19].reset();
                    }
                    if (!this.uiTextures[19].isLoaded()) {
                        this.uiTextures[19].load(MyUtility.getString(String.format("img%03d.png", 4)), MyUtility.getString(String.format("img%03d.imgcut", 4)));
                    }
                    if (this.uiTextures[20].isLoaded()) {
                        this.uiTextures[20].reset();
                    }
                    if (!this.uiTextures[20].isLoaded()) {
                        this.uiTextures[20].load(MyUtility.getString(String.format("img%03d.png", 43)), MyUtility.getString(String.format("img%03d.imgcut", 43)));
                    }
                    if (this.uiTextures[21].isLoaded()) {
                        this.uiTextures[21].reset();
                    }
                    if (!this.uiTextures[21].isLoaded()) {
                        this.uiTextures[21].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
                    }
                    if (this.uiTextures[23].isLoaded()) {
                        this.uiTextures[23].reset();
                    }
                    if (!this.uiTextures[23].isLoaded()) {
                        this.uiTextures[23].load(MyUtility.getString(String.format("img%03d.png", 40)), MyUtility.getString(String.format("img%03d.imgcut", 40)));
                    }
                    if (this.uiTextures[24].isLoaded()) {
                        this.uiTextures[24].reset();
                    }
                    if (!this.uiTextures[24].isLoaded()) {
                        this.uiTextures[24].load(MyUtility.getString(String.format("img%03d.png", 41)), MyUtility.getString(String.format("img%03d.imgcut", 41)));
                    }
                    if (this.uiTextures[25].isLoaded()) {
                        this.uiTextures[25].reset();
                    }
                    if (!this.uiTextures[25].isLoaded()) {
                        this.uiTextures[25].load(MyUtility.getString(String.format("img%03d.png", 42)), MyUtility.getString(String.format("img%03d.imgcut", 42)));
                    }
                    if (this.godTexture[0].isLoaded()) {
                        this.godTexture[0].reset();
                    }
                    if (!this.godTexture[0].isLoaded()) {
                        this.godTexture[0].load(MyUtility.getString(String.format("i%03d_g.png", 0)), MyUtility.getString(String.format("%03d_g.imgcut", 0)));
                    }
                    this.godModel[0][0].load(MyUtility.getString(String.format("%03d_g%02d_%d.mamodel", 0, 0, 1)));
                    this.godAnim[0][0].load(MyUtility.getString(String.format("%03d_g%02d_%d.maanim", 0, 0, 1)));
                    this.godModel[0][0].setTextures(this.godTexture);
                    this.godModel[0][0].setAction();
                    this.godModel[0][1].load(MyUtility.getString(String.format("%03d_g%02d_%d.mamodel", 0, 0, 2)));
                    this.godAnim[0][1].load(MyUtility.getString(String.format("%03d_g%02d_%d.maanim", 0, 0, 2)));
                    this.godModel[0][1].setTextures(this.godTexture);
                    this.godModel[0][1].setAction();
                    this.godModel[1][0].load(MyUtility.getString(String.format("%03d_g%02d_%d.mamodel", 0, 1, 1)));
                    this.godAnim[1][0].load(MyUtility.getString(String.format("%03d_g%02d_%d.maanim", 0, 1, 1)));
                    this.godModel[1][0].setTextures(this.godTexture);
                    this.godModel[1][0].setAction();
                    this.godModel[1][1].load(MyUtility.getString(String.format("%03d_g%02d_%d.mamodel", 0, 1, 2)));
                    this.godAnim[1][1].load(MyUtility.getString(String.format("%03d_g%02d_%d.maanim", 0, 1, 2)));
                    this.godModel[1][1].setTextures(this.godTexture);
                    this.godModel[1][1].setAction();
                    this.godModel[2][0].load(MyUtility.getString(String.format("%03d_g%02d_%d.mamodel", 0, 2, 1)));
                    this.godAnim[2][0].load(MyUtility.getString(String.format("%03d_g%02d_%d.maanim", 0, 2, 1)));
                    this.godModel[2][0].setTextures(this.godTexture);
                    this.godModel[2][0].setAction();
                    this.godModel[2][1].load(MyUtility.getString(String.format("%03d_g%02d_%d.mamodel", 0, 2, 2)));
                    this.godAnim[2][1].load(MyUtility.getString(String.format("%03d_g%02d_%d.maanim", 0, 2, 2)));
                    this.godModel[2][1].setTextures(this.godTexture);
                    this.godModel[2][1].setAction();
                    this.godModel[3][0].load(MyUtility.getString(String.format("%03d_g%02d.mamodel", 0, 3)));
                    this.godAnim[3][0].load(MyUtility.getString(String.format("%03d_g%02d.maanim", 0, 3)));
                    this.godModel[3][0].setTextures(this.godTexture);
                    this.godModel[3][0].setAction();
                    for (int slotID = 0; slotID < 10; slotID++) {
                        if (this.uiTextures[slotID + 5].isLoaded()) {
                            this.uiTextures[slotID + 5].reset();
                        }
                    }
                    for (int slotIndex = 0; slotIndex < 10; slotIndex++) {
                        if (this.slotCatIDs[slotIndex] == -1) {
                            this.uiTextures[slotIndex + 5].load(MyUtility.getString(String.format("uni.png", new Object[0])), MyUtility.getString(String.format("uni.imgcut", new Object[0])));
                        } else if (this.slotFormIDs[slotIndex] == 0) {
                            if (!this.uiTextures[slotIndex + 5].isLoaded()) {
                                this.uiTextures[slotIndex + 5].load(MyUtility.getString(String.format("uni%03d_f%02d.png", this.slotCatIDs[slotIndex] - 2, 0)), MyUtility.getString(String.format("uni%03d_f%02d.imgcut", this.slotCatIDs[slotIndex] - 2, 0)));
                            }
                        } else if (this.slotFormIDs[slotIndex] == 1 && !this.uiTextures[slotIndex + 5].isLoaded()) {
                            this.uiTextures[slotIndex + 5].load(MyUtility.getString(String.format("uni%03d_c%02d.png", this.slotCatIDs[slotIndex] - 2, 0)), MyUtility.getString(String.format("uni%03d_c%02d.imgcut", this.slotCatIDs[slotIndex] - 2, 0)));
                        }
                    }
                    for (int slotIndex = 0; slotIndex < 10; slotIndex++) {
                        if (this.slotCatIDs[slotIndex] != -1) {
                            if (this.slotFormIDs[slotIndex] == 0) {
                                if (!this.unitTexturesF[this.slotCatIDs[slotIndex] - 2].isLoaded()) {
                                    this.unitTexturesF[this.slotCatIDs[slotIndex] - 2].load(MyUtility.getString(String.format("i%03d_f.png", this.slotCatIDs[slotIndex] - 2)), MyUtility.getString(String.format("%03d_f.imgcut", this.slotCatIDs[slotIndex] - 2)));
                                    this.unitSlotModels[slotIndex].load(MyUtility.getString(String.format("%03d_f.mamodel", this.slotCatIDs[slotIndex] - 2)));
                                    for (int animIndex = 0; animIndex < getLength(this.unitSlotAnims[slotIndex]); animIndex++) {
                                        this.unitSlotAnims[slotIndex][animIndex].load(MyUtility.getString(String.format("%03d_f%02d.maanim", this.slotCatIDs[slotIndex] - 2, animIndex)));
                                    }
                                    this.unitSlotModels[slotIndex].setTextures(this.unitTexturesF);
                                    this.unitSlotModels[slotIndex].setAction();
                                }
                            } else if (this.slotFormIDs[slotIndex] == 1 && !this.unitTexturesC[this.slotCatIDs[slotIndex] - 2].isLoaded()) {
                                this.unitTexturesC[this.slotCatIDs[slotIndex] - 2].load(MyUtility.getString(String.format("i%03d_c.png", this.slotCatIDs[slotIndex] - 2)), MyUtility.getString(String.format("%03d_c.imgcut", this.slotCatIDs[slotIndex] - 2)));
                                this.unitSlotModels[slotIndex].load(MyUtility.getString(String.format("%03d_c.mamodel", this.slotCatIDs[slotIndex] - 2)));
                                for (int animIndex = 0; animIndex < getLength(this.unitSlotAnims[slotIndex]); animIndex++) {
                                    this.unitSlotAnims[slotIndex][animIndex].load(MyUtility.getString(String.format("%03d_c%02d.maanim", this.slotCatIDs[slotIndex] - 2, animIndex)));
                                }
                                this.unitSlotModels[slotIndex].setTextures(this.unitTexturesC);
                                this.unitSlotModels[slotIndex].setAction();
                            }
                        }
                    }
                    for (int enemyID = 0; enemyID < getLength(this.enemyTextures); enemyID++) {
                        if (this.enemyTextures[enemyID].isLoaded()) {
                            this.enemyTextures[enemyID].reset();
                        }
                    }
                    for (int enemySlotIndex = 0; enemySlotIndex < 10; enemySlotIndex++) {
                        if (this.slotEnemyIDs[enemySlotIndex] != -1 && this.slotEnemyIDs[enemySlotIndex] > 0 && !this.enemyTextures[this.slotEnemyIDs[enemySlotIndex] - 2].isLoaded()) {
                            if (this.slotEnemyIDs[enemySlotIndex] - 2 == 21) {
                                this.enemyTextures[this.slotEnemyIDs[enemySlotIndex] - 2].load(MyUtility.getString(String.format("i%03d_e.png", this.slotEnemyIDs[enemySlotIndex] - 2)), MyUtility.getString(String.format("i%03d_e.imgcut", this.slotEnemyIDs[enemySlotIndex] - 2)));
                            } else {
                                this.enemyTextures[this.slotEnemyIDs[enemySlotIndex] - 2].load(MyUtility.getString(String.format("i%03d_e.png", this.slotEnemyIDs[enemySlotIndex] - 2)), MyUtility.getString(String.format("%03d_e.imgcut", this.slotEnemyIDs[enemySlotIndex] - 2)));
                            }
                            this.enemySlotModels[enemySlotIndex].load(MyUtility.getString(String.format("%03d_e.mamodel", this.slotEnemyIDs[enemySlotIndex] - 2)));
                            for (int animIndex = 0; animIndex < getLength(this.enemySlotAnims[enemySlotIndex]); animIndex++) {
                                this.enemySlotAnims[enemySlotIndex][animIndex].load(MyUtility.getString(String.format("%03d_e%02d.maanim", this.slotEnemyIDs[enemySlotIndex] - 2, animIndex)));
                            }
                            this.enemySlotModels[enemySlotIndex].setTextures(this.enemyTextures);
                            this.enemySlotModels[enemySlotIndex].setAction();
                        }
                    }
                    break;
            }
            MyUtility.getInstance().addAlertCloser();
            if (this.initState == 2) {
                setScene(SceneType.OPENING);
            }
            this.initState = 0;
        }
        if (MyUtility.getInstance().i()) {
            return;
        }
        if (this.h) {
            this.h = false;
            MyUtility.getInstance().addButton(MyUtility.getString("catfoodbuy_txt"));
        }
        if (this.i == 0) {
            if (this.j) {
                this.j = false;
                screenTransition();
                if (this.menuType == 0) {
                    if (!MyUtility.isConnected()) {
                        MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                        this.i = 0;
                        return;
                    }
                    this.i = 1;
                    String[] strArr = new String[4];
                    aStringBuffer astringbuffer = new aStringBuffer();
                    for (int i20 = 0; i20 < strArr.length; i20++) {
                        aResourceFileStream aresourcefilestream = new aResourceFileStream();
                        aresourcefilestream.openRead(aString.format("nekokan_buy_%s%d.html", MyUtility.getString("lang"), i20));
                        strArr[i20] = aresourcefilestream.c();
                        aresourcefilestream.close();
                    }
                    astringbuffer.append(strArr[0]);
                    astringbuffer.append(strArr[3]);
                    for (int i21 = 0; i21 < 8; i21++) {
                        astringbuffer.append(aString.format(strArr[1], m[i21], l[m[i21]], MyUtility.getString("nekokan_bonus_msg" + (m[i21] + 1)), m[i21], MyUtility.getString("nekokan_buy_msg" + (m[i21] + 1))));
                    }
                    astringbuffer.append(strArr[2]);
                    aBrowserOption abrowseroption = new aBrowserOption();
                    abrowseroption.addButton(1, 0, "button_iphone4.png");
                    abrowseroption.setBackgroundImage("bar_iphone4.png");
                    MyUtility.getInstance().a(astringbuffer.toString(), abrowseroption);
                    return;
                } else if (this.menuType == 1) {
                    if (!MyUtility.isConnected()) {
                        MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                        this.i = 0;
                        return;
                    } else if (!aScoreUploader.getInstance().d()) {
                        MyUtility.getInstance().addButton(MyUtility.getString("gamecenter_noauth"));
                        this.i = 0;
                        return;
                    } else {
                        //aAd.b().f();
                        this.i = 1;
                        this.e = aScoreUploader.getInstance().getID();
                        if (this.e != null) {
                            String format = aString.format("type=top&pid=%s&lang=%s", this.e, MyUtility.getString("lang"));
                            String format2 = aString.format("%s/battlecats/friend.php?%s&check=%s", MyUtility.getAppli(), format, MyUtility.md5(aString.format("%s&check=adlmn", format)));
                            aBrowserOption abrowseroption2 = new aBrowserOption();
                            abrowseroption2.addButton(1, 0, "button_iphone4.png");
                            abrowseroption2.setBackgroundImage("bar_iphone4.png");
                            MyUtility.getInstance().addJSDialog(format2, abrowseroption2);
                            return;
                        }
                        return;
                    }
                } else if (this.menuType == 2) {
                    if (!MyUtility.isConnected()) {
                        MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                        this.i = 0;
                        return;
                    }
                    this.i = 1;
                    String format3 = String.format("%s/battlecats/%s/help.html", MyUtility.getAppli(), MyUtility.getString("lang"));
                    aBrowserOption abrowseroption3 = new aBrowserOption();
                    abrowseroption3.addButton(1, 0, "button_iphone4.png");
                    abrowseroption3.setBackgroundImage("bar_iphone4.png");
                    MyUtility.getInstance().addJSDialog(format3, abrowseroption3);
                } else if (this.menuType == 3) {
                    if (!MyUtility.isConnected()) {
                        MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                        this.i = 0;
                        return;
                    }
                    this.i = 1;
                    String format4 = String.format("%s/battlecats/%s/credit.html", MyUtility.getAppli(), MyUtility.getString("lang"));
                    aBrowserOption abrowseroption4 = new aBrowserOption();
                    abrowseroption4.addButton(1, 0, "button_iphone4.png");
                    abrowseroption4.setBackgroundImage("bar_iphone4.png");
                    MyUtility.getInstance().addJSDialog(format4, abrowseroption4);
                } else if (this.menuType == 5) {
                    if (!MyUtility.isConnected()) {
                        MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                        this.i = 0;
                        return;
                    }
                    this.i = 1;
                    String format5 = String.format("%s/battlecats/page.php?type=facebook&lang=%s", MyUtility.getAppli(), MyUtility.getString("lang"));
                    aBrowserOption abrowseroption5 = new aBrowserOption();
                    abrowseroption5.addButton(1, 0, "button_iphone4.png");
                    abrowseroption5.setBackgroundImage("bar_iphone4.png");
                    MyUtility.getInstance().addJSDialog(format5, abrowseroption5);
                }
            }
        } else if (this.i == 1) {
            screenTransition();
            return;
        } else if (this.i == 2) {
            return;
        }
        if (this.t) {
            if (this.r.a() == 1) {
                MyUtility.getInstance().addAlertCloser();
                this.t = false;
                if (this.o) {
                    MyUtility.getInstance().addJSDialog();
                } else {
                    MyUtility.getInstance().n();
                }
                this.o = false;
            } else if (this.r.a() == 2) {
                MyUtility.getInstance().addAlertCloser();
                this.t = false;
                MyUtility.getInstance().addButton(MyUtility.getString("error"));
                this.o = false;
            }
        } else if (this.n) {
            this.n = false;
        } else if (this.v) {
            if (this.s.b() != 0) {
                if (this.s.b() == 1) {
                    this.v = false;
                    return;
                } else if (this.s.b() == 2) {
                    this.v = false;
                    this.u = true;
                    A.a().aSave();
                    return;
                } else {
                    return;
                }
            }
            this.v = false;
            if (!MyUtility.isConnected()) {
                MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                return;
            }
            this.u = true;
            A.a().aSave();
            this.t = true;
            MyUtility.getInstance().addProgressDialog(MyUtility.getString("connecting"));
            MyUtility.getInstance().addAlertAppliPage("review", this.r);
        } else {
            this.calendar = Calendar.getInstance();
            if (!this.gu) {
                c(this.calendar.get(1), this.calendar.get(2), this.calendar.get(5), this.calendar.get(11), this.calendar.get(12), this.calendar.get(13));
            }
            this.hs++;
            if (this.hs / 30 >= 1) {
                this.hs = 0;
                this.hv++;
                if (this.hv >= 999999999) {
                    this.hv = 999999999;
                }
            }
            if (!this.gu && !this.gU) {
                switch (getSceneType()) {
                    case OPENING:
                        int[] iArr = this.blinkFrame;
                        iArr[0] = iArr[0] + 1;
                        if (this.dz >= 1) {
                            int[] iArr2 = this.dw;
                            iArr2[0] = iArr2[0] + this.dw[1];
                            if (this.dw[0] <= 0) {
                                this.dw[1] = aMath.rand(10) + 3;
                                this.dw[0] = 0;
                                this.dx = aMath.rand(30) + 15;
                            }
                            if (this.dw[0] / 10 > this.dx) {
                                this.dw[1] = -this.dw[1];
                            }
                        }
                        for (int i22 = 0; i22 < 50; i22++) {
                            int[] iArr3 = this.ci[i22];
                            iArr3[0] = iArr3[0] + 1;
                            for (int i23 = 0; i23 < 8; i23++) {
                                int[] iArr4 = this.cg[i22][1];
                                iArr4[i23] = iArr4[i23] - this.ci[i22][1];
                            }
                            if (this.cg[i22][1][0] <= 5000) {
                                for (int i24 = 0; i24 < 8; i24++) {
                                    if (i24 == 0) {
                                        this.cg[i22][0][i24] = ((i22 * 48) + (aMath.rand(48) % getWidth())) * 100;
                                        this.cg[i22][1][i24] = (aMath.rand(50) + 640) * 100;
                                    } else {
                                        this.cg[i22][0][i24] = this.cg[i22][0][0];
                                        this.cg[i22][1][i24] = this.cg[i22][1][0];
                                    }
                                }
                                this.ci[i22][0] = 0;
                                this.ci[i22][1] = (aMath.rand(50) + 3) * 10;
                                this.ci[i22][2] = (aMath.rand(18) + 3) * 100;
                                this.ci[i22][3] = aMath.rand(8) + 1;
                            }
                        }
                        if (this.dz == 0) {
                            this.dA++;
                            if (this.dA >= 100) {
                                this.dz = 1;
                                this.dA = 0;
                                this.dy = 0;
                            }
                        } else {
                            this.dy++;
                            if (this.dz == 1) {
                                if (3560 - this.dy <= 285) {
                                    this.dz = 2;
                                    this.dA = 0;
                                }
                            } else if (this.dz == 2) {
                                this.dA++;
                                if (this.dA >= 160) {
                                    setScene(SceneType.MAIN);
                                    return;
                                }
                            }
                        }
                        if (this.fx[0] >= 1) {
                            int[] iArr5 = this.fx;
                            iArr5[0] = iArr5[0] + 1;
                            if (this.fx[0] > getLength(dv) - 1) {
                                this.eb = true;
                                this.ed = 0;
                                this.fx[0] = 0;
                            }
                        } else {
                            if (this.dz <= 1 && !this.eb) {
                                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                                    this.gp[0] = false;
                                } else if (!this.gp[0] && !this.eb) {
                                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                    this.gp[0] = true;
                                }
                            }
                            if (this.dz <= 1 && !this.eb) {
                                if (isPointerUp() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                    int[] iArr6 = this.fx;
                                    iArr6[0] = iArr6[0] + 1;
                                } else if (isBackPressed()) {
                                    this.eb = true;
                                    this.ed = 0;
                                    this.fx[0] = 0;
                                }
                            }
                        }
                        if (g(this.ed)) {
                            int[] iArr7 = this.blinkFrame;
                            iArr7[5] = iArr7[5] + 1;
                            break;
                        } else {
                            return;
                        }
                        //break;
                    case ENDING:
                        int[] iArr8 = this.blinkFrame;
                        iArr8[1] = iArr8[1] + 1;
                        int[] iArr9 = this.blinkFrame;
                        iArr9[3] = iArr9[3] + 1;
                        if (this.blinkFrame[3] >= 255) {
                            this.blinkFrame[3] = 255;
                            if (this.dE == 0) {
                                this.dE = 1;
                            }
                        }
                        if (this.dE <= 1 && ((this.bj >= 1 || this.eg == 2) && !this.eE[0])) {
                            if (this.fx[0] >= 1) {
                                int[] iArr10 = this.fx;
                                iArr10[0] = iArr10[0] + 1;
                                if (this.fx[0] > getLength(dv) - 1) {
                                    this.dF = 0;
                                    this.fx[0] = 0;
                                    this.eE[0] = true;
                                    if (this.dE == 0) {
                                        this.dE = 1;
                                    }
                                }
                            } else {
                                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                                    this.gp[0] = false;
                                } else if (!this.gp[0]) {
                                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                    this.gp[0] = true;
                                }
                                if (isPointerUp() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                    int[] iArr11 = this.fx;
                                    iArr11[0] = iArr11[0] + 1;
                                } else if (isBackPressed() && this.eg == 2) {
                                    this.dF = 0;
                                    this.fx[0] = 0;
                                    this.eE[0] = true;
                                    if (this.dE == 0) {
                                        this.dE = 1;
                                    }
                                }
                            }
                        }
                        if (this.dE == 1) {
                            if (this.eE[0]) {
                                int[] iArr12 = this.blinkFrame;
                                iArr12[0] = iArr12[0] + 10;
                                if (this.blinkFrame[0] >= 255) {
                                    if (this.eg == 2) {
                                        this.dE = 7;
                                    } else {
                                        this.dE = 4;
                                    }
                                    this.eE[0] = false;
                                    this.dF = 0;
                                    this.blinkFrame[0] = 0;
                                    aSound.getInstance().stop(-1);
                                }
                            }
                            if (this.blinkFrame[3] >= 255) {
                                this.dG++;
                            }
                            int a = (((getLength(this.endingText) * 40) + 640) + (this.eZ * 3)) - this.dG;
                            if (a <= 230) {
                                this.dG = (230 - a) + this.dG;
                                this.dE = 2;
                                this.dF = 0;
                            }
                        } else if (this.dE == 2) {
                            if (!this.eE[0]) {
                                this.dF++;
                                if (this.dF >= 150) {
                                    this.dE = 3;
                                    this.dF = 0;
                                }
                            } else if (this.eE[0]) {
                                int[] iArr13 = this.blinkFrame;
                                iArr13[0] = iArr13[0] + 10;
                                if (this.blinkFrame[0] >= 255) {
                                    this.dE = 4;
                                    this.eE[0] = false;
                                    this.dF = 0;
                                    this.blinkFrame[0] = 0;
                                    aSound.getInstance().stop(-1);
                                }
                            }
                        } else if (this.dE == 3) {
                            this.dF++;
                            if (this.dF >= 255) {
                                this.dF = 0;
                                if (this.eg == 2) {
                                    this.dE = 7;
                                } else {
                                    this.dE = 4;
                                }
                                aSound.getInstance().stop(-1);
                            }
                        } else if (this.dE == 4) {
                            if (this.eg != 2) {
                                for (int i25 = 0; i25 < getLength(this.unitBuyStats); i25++) {
                                    if (this.unitBuyStats[i25][15] == this.eQ && this.unitBuyStats[i25][0] == this.battleData[31]) {
                                        this.bC[this.unitBuyStats[i25][13]] = 0;
                                    }
                                }
                                if (this.battleData[32] != -1) {
                                    this.gu = true;
                                    this.gw = 0;
                                    this.gx = 1000;
                                    this.by[1] = 1;
                                    return;
                                }
                                for (int i26 = 0; i26 < getLength(this.unitBuyStats); i26++) {
                                    if (this.unitBuyStats[i26][1] != 0 && this.unitBuyStats[i26][15] == this.eQ && this.unitBuyStats[i26][0] == this.battleData[31]) {
                                        this.gu = true;
                                        this.gw = 0;
                                        this.gx = 999;
                                        this.by[1] = 1;
                                        this.battleData[31] = -1;
                                        return;
                                    }
                                }
                                this.gx = 0;
                                this.dE = 5;
                            } else {
                                this.dE = 5;
                            }
                        } else if (this.dE == 5) {
                            if (this.eg == 2) {
                                this.dE = 7;
                            } else if (this.aX < 2) {
                                this.gu = true;
                                this.gw = 0;
                                this.gx = 0;
                                return;
                            } else {
                                this.dE = 6;
                            }
                        } else if (this.dE == 6) {
                            if (this.eg == 2) {
                                this.dE = 7;
                            } else if (this.aX >= 1 && this.aX < 2) {
                                this.gu = true;
                                this.gw = 0;
                                this.gx = 0;
                                return;
                            } else {
                                this.dE = 7;
                            }
                        } else if (this.dE == 7 && this.bc[2] == 0 && this.eg != 2) {
                            if (this.bc[2] == 0) {
                                this.gu = true;
                                this.gw = 0;
                                return;
                            }
                        } else if (this.dE >= 7) {
                            if (!this.eb && this.eg != 2) {
                                this.aX++;
                                if (this.aX >= 2) {
                                    this.aX = 2;
                                }
                                if (this.aX >= 2) {
                                    this.bi = ((this.aX - 1) * 10) + 10;
                                } else {
                                    this.bi = 10;
                                }
                            }
                            this.ed = 1;
                            this.eb = true;
                        }
                        for (int i27 = 0; i27 < 50; i27++) {
                            int[] iArr14 = this.ci[i27];
                            iArr14[0] = iArr14[0] + 1;
                            for (int i28 = 0; i28 < 8; i28++) {
                                int[] iArr15 = this.cg[i27][1];
                                iArr15[i28] = iArr15[i28] - this.ci[i27][1];
                            }
                            if (this.cg[i27][1][0] <= 5000) {
                                for (int i29 = 0; i29 < 8; i29++) {
                                    if (i29 == 0) {
                                        this.cg[i27][0][i29] = ((i27 * 48) + (aMath.rand(48) % getWidth())) * 100;
                                        this.cg[i27][1][i29] = (aMath.rand(50) + 640) * 100;
                                    } else {
                                        this.cg[i27][0][i29] = this.cg[i27][0][0];
                                        this.cg[i27][1][i29] = this.cg[i27][1][0];
                                    }
                                }
                                this.ci[i27][0] = 0;
                                this.ci[i27][1] = (aMath.rand(50) + 3) * 10;
                                this.ci[i27][2] = (aMath.rand(18) + 3) * 100;
                                this.ci[i27][3] = aMath.rand(8) + 1;
                            }
                        }
                        if (g(this.ed)) {
                            int[] iArr16 = this.blinkFrame;
                            iArr16[5] = iArr16[5] + 1;
                            break;
                        } else {
                            return;
                        }
                        //break;
                    case MAIN:
                        if (this.screenLoadState == -1) {
                            switch (getScreenType()) {
                                case TITLE:
                                    titleLoad();
                                    break;
                                case CAT_BASE:
                                    catBaseLoad();
                                    break;
                                case MAP:
                                    mapLoad();
                                    break;
                                case POWER_UP:
                                    powerUpLoad();
                                    break;
                                case EQUIP:
                                    equipLoad();
                                    break;
                                case TREASURE:
                                    treasureLoad();
                                    break;
                                case ENEMY_GUIDE:
                                    enemyGuideLoad();
                                    break;
                                case MAP2:
                                    Z();
                                    break;
                                case ITEM_SHOP:
                                    itemShopLoad();
                                    break;
                                case STAMP:
                                    stampLoad();
                                    break;
                                case LEGEND:
                                    legendLoad();
                                    break;
                                }
                                this.screenLoadState = 1;
                        }
                        if (this.screenLoadState > 0) {
                            switch (getScreenType()) {
                                case TITLE:
                                    if (!titleProcess()) {
                                        return;
                                    }
                                    break;
                                case CAT_BASE:
                                    if (!catBaseProcess()) {
                                        return;
                                    }
                                    break;
                                case MAP:
                                    if (!mapProcess()) {
                                        return;
                                    }
                                    break;
                                case POWER_UP:
                                    if (!powerUpProcess()) {
                                        return;
                                    }
                                    break;
                                case EQUIP:
                                    if (!equipProcess()) {
                                        return;
                                    }
                                    break;
                                case TREASURE:
                                    if (!treasureProcess()) {
                                        return;
                                    }
                                    break;
                                case ENEMY_GUIDE:
                                    if (!enemyGuideProcess()) {
                                        return;
                                    }
                                    break;
                                case MAP2:
                                    if (!aa()) {
                                        return;
                                    }
                                    break;
                                case ITEM_SHOP:
                                    if (!itemShopProcess()) {
                                        return;
                                    }
                                    break;
                                case STAMP:
                                    if (!stampProcess()) {
                                        return;
                                    }
                                    break;
                                case LEGEND:
                                    if (!legendProcess()) {
                                        return;
                                    }
                                    break;
                            }
                        }
                        if (!g(this.ed)) {
                            return;
                        }
                        break;
                    case BATTLE:
                        if (!this.ee && !this.gU && !this.ha[0]) {
                            this.a2.translate((this.excessWidth / 2) + 0, 520.0f);
                            this.b2.scale(this.zoomLevel / 100, this.zoomLevel / 100);
                            this.a2.merge(this.b2);
                            this.b2.translate(0 - (this.excessWidth / 2), -520.0f);
                            this.a2.merge(this.b2);
                            this.zoom.zoom();
                            this.gameStats1[1] = this.zoomLevel / 100;
                            float f = this.gameStats1[1] / 100.0f;
                            if (this.battleData[12] != 0) {
                                if (this.battleData[12] == 1) {
                                    int ah = ((int) (((this.bV[0] * f) - (getWidth() * 10)) / f)) - this.battleData[5];
                                    if (this.battleData[14] == 0) {
                                        if (ah / 2 <= 40) {
                                            this.battleData[5] = this.bV[0] - 9600;
                                            this.battleData[12] = 0;
                                        } else {
                                            int[] iArr17 = this.battleData;
                                            iArr17[5] = (ah / 2) + iArr17[5];
                                        }
                                    } else if (ah / 2 > 40 || this.zoomLevel / 100 != 100) {
                                        int[] iArr18 = this.battleData;
                                        iArr18[5] = (ah / 2) + iArr18[5];
                                        if (((int) (((this.bV[0] * f) - (getWidth() * 10)) / f)) - this.battleData[5] <= 0) {
                                            this.eX = true;
                                        }
                                        if (this.eX) {
                                            this.battleData[5] = this.bV[0] - 9600;
                                        }
                                    } else {
                                        this.battleData[5] = this.bV[0] - 9600;
                                        this.battleData[12] = 0;
                                    }
                                } else if (this.battleData[12] == 2) {
                                    int i30 = this.battleData[5];
                                    if (this.battleData[14] == 0) {
                                        if (i30 / 2 <= 40) {
                                            this.battleData[5] = 0;
                                            this.battleData[12] = 0;
                                        } else {
                                            int[] iArr19 = this.battleData;
                                            iArr19[5] = iArr19[5] - (i30 / 2);
                                        }
                                    } else if (i30 / 2 > 40 || this.zoomLevel / 100 != 100) {
                                        int[] iArr20 = this.battleData;
                                        iArr20[5] = iArr20[5] - (i30 / 2);
                                    } else {
                                        this.battleData[5] = 0;
                                        this.battleData[12] = 0;
                                    }
                                } else if (this.battleData[12] == 3) {
                                    int i31 = 0;
                                    for (int i32 = 0; i32 < getLength(this.unitBattleStats[1]); i32++) {
                                        if (this.unitBattleStats[1][i32][0] != 0) {
                                            int i33 = this.unitBattleStats[1][i32][1];
                                            if (this.unitBattleStats[1][i32][3] > i31) {
                                                i31 = this.unitBattleStats[1][i32][3];
                                            }
                                        }
                                    }
                                    if (i31 < 4800) {
                                        i31 = 4800;
                                    } else if (i31 > this.bV[0] - 4800) {
                                        i31 = this.bV[0] - 4800;
                                    }
                                    if (i31 >= this.battleData[5] + 4800) {
                                        int i34 = i31 - (this.battleData[5] + 4800);
                                        if (i34 > 4800) {
                                            int[] iArr21 = this.battleData;
                                            iArr21[5] = iArr21[5] + 600;
                                        } else {
                                            int[] iArr22 = this.battleData;
                                            iArr22[5] = (i34 / 4) + iArr22[5];
                                        }
                                    } else {
                                        int i35 = (this.battleData[5] + 4800) - i31;
                                        if (i35 >= 4800) {
                                            this.battleData[5] -= 600;
                                        } else {
                                            int[] iArr23 = this.battleData;
                                            iArr23[5] = iArr23[5] - (i35 / 4);
                                        }
                                    }
                                }
                            }
                            if (this.battleData[14] == 1) {
                                if (!this.eb && !h()) {
                                    return;
                                }
                            } else if (this.battleData[14] == 2) {
                                if (!this.eb && !i()) {
                                    return;
                                }
                            } else if (this.battleData[14] == 3) {
                                int[] iArr24 = this.blinkFrame;
                                iArr24[0] = iArr24[0] + 1;
                                if (!this.eb) {
                                    if (this.aZ == 0) {
                                        this.eP++;
                                        if (this.eP == 1) {
                                            aSound.getInstance().play(SoundType.POPUP);
                                        }
                                        if (this.eP > getLength(eO) - 1) {
                                            this.eP = getLength(eO) - 1;
                                        }
                                        if (this.eP >= getLength(eO) - 1) {
                                            int[] iArr25 = this.blinkFrame;
                                            iArr25[10] = iArr25[10] + 1;
                                            if (this.blinkFrame[10] >= 30) {
                                                this.blinkFrame[10] = 30;
                                                if (isPointerUp()) {
                                                    this.blinkFrame[10] = 0;
                                                    this.eP = 0;
                                                    this.battleData[14] = 0;
                                                    this.blinkFrame[0] = 0;
                                                }
                                            }
                                        }
                                    } else if (!this.eb) {
                                        this.eP = 0;
                                        this.battleData[14] = 0;
                                        this.blinkFrame[0] = 0;
                                    }
                                }
                            } else if (this.battleData[14] == 4) {
                                if (!this.eb && !j()) {
                                    return;
                                }
                            } else if (this.battleData[14] != 5) {
                                if (this.aZ == 0 && this.hH == 0) {
                                    int[] iArr26 = this.gV;
                                    iArr26[0] = iArr26[0] + 1;
                                    if (this.gV[0] >= 24) {
                                        screenTransition();
                                        this.gU = true;
                                        for (int i36 = 0; i36 < getLength(this.gV); i36++) {
                                            this.gV[i36] = 0;
                                        }
                                        this.hH = 1;
                                        this.gV[0] = 0;
                                        if (this.cj[0] == 0) {
                                            aSound.getInstance().setVolume(50);
                                            return;
                                        }
                                        return;
                                    }
                                } else if (this.bB[1] == 0 && this.battleData[10] >= this.unitStats[this.slotCatIDs[0]][this.slotFormIDs[0]][6] + (((this.unitStats[this.slotCatIDs[0]][this.slotFormIDs[0]][6] * this.eQ) * 50) / 100)) {
                                    screenTransition();
                                    this.bB[1] = 1;
                                    this.gV[0] = 0;
                                    this.gU = true;
                                    for (int i37 = 0; i37 < getLength(this.gV); i37++) {
                                        this.gV[i37] = 0;
                                    }
                                    if (this.cj[0] == 0) {
                                        aSound.getInstance().setVolume(50);
                                        return;
                                    }
                                    return;
                                } else {
                                    if (this.bB[0] == 0 && this.bB[1] != 0) {
                                        if (this.battleData[11] + 1 >= 8) {
                                            if (this.battleData[10] >= (((this.battleData[11] + 1) - 7) * 2000) + 10000 + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0])) {
                                                int[] iArr27 = this.gV;
                                                iArr27[0] = iArr27[0] + 1;
                                                if (this.gV[0] >= 210) {
                                                    screenTransition();
                                                    this.gU = true;
                                                    this.bB[0] = 1;
                                                    this.gV[0] = 0;
                                                    for (int i38 = 0; i38 < getLength(this.gV); i38++) {
                                                        this.gV[i38] = 0;
                                                    }
                                                    if (this.cj[0] == 0) {
                                                        aSound.getInstance().setVolume(50);
                                                        return;
                                                    }
                                                    return;
                                                }
                                            }
                                        } else if (this.battleData[10] >= ((this.battleData[11] + 1) * 1000) + 3000 + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0])) {
                                            int[] iArr28 = this.gV;
                                            iArr28[0] = iArr28[0] + 1;
                                            if (this.gV[0] >= 210) {
                                                screenTransition();
                                                this.gU = true;
                                                this.bB[0] = 1;
                                                this.gV[0] = 0;
                                                for (int i39 = 0; i39 < getLength(this.gV); i39++) {
                                                    this.gV[i39] = 0;
                                                }
                                                if (this.cj[0] == 0) {
                                                    aSound.getInstance().setVolume(50);
                                                    return;
                                                }
                                                return;
                                            }
                                        }
                                    }
                                    if (this.bB[2] == 0) {
                                        if ((isPointerDown() || isPointerDownNow() || isPointerUp()) && this.unitBattleStats[0][0][12] == 0 && this.unitBattleStats[0][0][9] == 0) {
                                            screenTransition();
                                            this.bB[2] = 1;
                                            this.gV[0] = 0;
                                            this.gU = true;
                                            for (int i40 = 0; i40 < getLength(this.gV); i40++) {
                                                this.gV[i40] = 0;
                                            }
                                            if (this.cj[0] == 0) {
                                                aSound.getInstance().setVolume(50);
                                                return;
                                            }
                                            return;
                                        } else if (this.unitBattleStats[0][0][12] == 0 && this.unitBattleStats[0][0][9] == 0) {
                                            int[] iArr29 = this.gV;
                                            iArr29[0] = iArr29[0] + 1;
                                            if (this.gV[0] >= 24) {
                                                this.bB[2] = 1;
                                                this.gV[0] = 0;
                                                this.gU = true;
                                                for (int i41 = 0; i41 < getLength(this.gV); i41++) {
                                                    this.gV[i41] = 0;
                                                }
                                                if (this.cj[0] == 0) {
                                                    aSound.getInstance().setVolume(50);
                                                }
                                            }
                                        }
                                    }
                                    if (this.bB[3] == 0) {
                                        int i42 = 0;
                                        for (int i43 = 0; i43 < getLength(this.slotCatIDs); i43++) {
                                            if (this.slotCatIDs[i43] != -1) {
                                                i42++;
                                            }
                                            if (i42 >= 6) {
                                                if (isPointerDown() || isPointerDownNow() || isPointerUp()) {
                                                    screenTransition();
                                                    this.bB[3] = 1;
                                                    this.gV[0] = 0;
                                                    this.gU = true;
                                                    for (int i44 = 0; i44 < getLength(this.gV); i44++) {
                                                        this.gV[i44] = 0;
                                                    }
                                                    if (this.cj[0] == 0) {
                                                        aSound.getInstance().setVolume(50);
                                                        return;
                                                    }
                                                    return;
                                                }
                                                int[] iArr30 = this.gV;
                                                iArr30[0] = iArr30[0] + 1;
                                                if (this.gV[0] >= 24) {
                                                    screenTransition();
                                                    this.bB[3] = 1;
                                                    this.gV[0] = 0;
                                                    this.gU = true;
                                                    for (int i45 = 0; i45 < getLength(this.gV); i45++) {
                                                        this.gV[i45] = 0;
                                                    }
                                                    if (this.cj[0] == 0) {
                                                        aSound.getInstance().setVolume(50);
                                                        return;
                                                    }
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (this.dH <= 47 && this.bB[4] == 0 && this.bd >= 1) {
                                    if (isPointerDown() || isPointerDownNow() || isPointerUp()) {
                                        screenTransition();
                                        this.bB[4] = 1;
                                        this.gV[0] = 0;
                                        this.gU = true;
                                        for (int i46 = 0; i46 < getLength(this.gV); i46++) {
                                            this.gV[i46] = 0;
                                        }
                                        if (this.cj[0] == 0) {
                                            aSound.getInstance().setVolume(50);
                                            return;
                                        }
                                        return;
                                    }
                                    int[] iArr31 = this.gV;
                                    iArr31[0] = iArr31[0] + 1;
                                    if (this.gV[0] >= 24) {
                                        screenTransition();
                                        this.bB[4] = 1;
                                        this.gV[0] = 0;
                                        this.gU = true;
                                        for (int i47 = 0; i47 < getLength(this.gV); i47++) {
                                            this.gV[i47] = 0;
                                        }
                                        if (this.cj[0] == 0) {
                                            aSound.getInstance().setVolume(50);
                                            return;
                                        }
                                        return;
                                    }
                                }
                                this.gameStats1[0] = 0;
                                int i48 = 0;
                                while (true) {
                                    if (i48 < getLength(this.eM)) {
                                        if (this.eM[i48]) {
                                            this.gameStats1[0] = 1;
                                        } else {
                                            i48++;
                                        }
                                    }
                                    else {
                                        break;
                                    }
                                }
                                if (this.gameStats1[0] == 1 && this.bB[5] == 0) {
                                    if (isPointerDown() || isPointerDownNow() || isPointerUp()) {
                                        screenTransition();
                                        this.bB[5] = 1;
                                        this.gV[0] = 0;
                                        this.gU = true;
                                        for (int i49 = 0; i49 < getLength(this.gV); i49++) {
                                            this.gV[i49] = 0;
                                        }
                                        if (this.cj[0] == 0) {
                                            aSound.getInstance().setVolume(50);
                                            return;
                                        }
                                        return;
                                    }
                                    int[] iArr32 = this.gV;
                                    iArr32[0] = iArr32[0] + 1;
                                    if (this.gV[0] >= 24) {
                                        screenTransition();
                                        this.bB[5] = 1;
                                        this.gV[0] = 0;
                                        this.gU = true;
                                        for (int i50 = 0; i50 < getLength(this.gV); i50++) {
                                            this.gV[i50] = 0;
                                        }
                                        if (this.cj[0] == 0) {
                                            aSound.getInstance().setVolume(50);
                                            return;
                                        }
                                        return;
                                    }
                                }
                                if (this.hk[0] >= 1) {
                                    int[] iArr33 = this.hk;
                                    iArr33[0] = iArr33[0] + 1;
                                    if (this.hk[0] > getLength(dv) - 1) {
                                        this.hk[0] = 0;
                                        if (this.dH <= 47) {
                                            screenTransition();
                                            this.ha[0] = true;
                                            aSound.getInstance().play(SoundType.BATTLE_34);
                                            int i51 = this.cj[0];
                                            return;
                                        }
                                    }
                                } else if (this.fx[3] >= 1) {
                                    int[] iArr34 = this.fx;
                                    iArr34[3] = iArr34[3] + 1;
                                    if (this.fx[3] > getLength(dv) - 1) {
                                        this.fx[3] = 0;
                                        screenTransition();
                                        this.ee = true;
                                        if (this.cj[0] == 0) {
                                            aSound.getInstance().setVolume(50);
                                            return;
                                        }
                                        return;
                                    }
                                } else if (this.eK[0] >= 1) {
                                    int[] iArr35 = this.eK;
                                    iArr35[0] = iArr35[0] + 1;
                                    if (this.eK[0] > getLength(dv) - 1) {
                                        this.eK[0] = 0;
                                        if (this.eL[0] == 0) {
                                            this.eL[0] = 1;
                                        } else if (this.eL[0] == 1) {
                                            this.eL[0] = 0;
                                        }
                                    }
                                } else if (this.eK[1] >= 1) {
                                    int[] iArr36 = this.eK;
                                    iArr36[1] = iArr36[1] + 1;
                                    if (this.eK[1] > getLength(dv) - 1) {
                                        this.eK[1] = 0;
                                        if (this.eL[1] == 0) {
                                            this.eL[1] = 1;
                                        } else if (this.eL[1] == 1) {
                                            this.eL[1] = 0;
                                        }
                                    }
                                } else if (this.eK[2] >= 1) {
                                    int[] iArr37 = this.eK;
                                    iArr37[2] = iArr37[2] + 1;
                                    if (this.eK[2] > getLength(dv) - 1) {
                                        this.eK[2] = 0;
                                        if (this.eL[2] == 0) {
                                            this.eL[2] = 1;
                                        } else if (this.eL[2] == 1) {
                                            this.eL[2] = 0;
                                        }
                                    }
                                } else if (this.eK[3] >= 1) {
                                    int[] iArr38 = this.eK;
                                    iArr38[3] = iArr38[3] + 1;
                                    if (this.eK[3] > getLength(dv) - 1) {
                                        this.eK[3] = 0;
                                        if (this.eL[3] == 0) {
                                            this.eL[3] = 1;
                                        } else if (this.eL[3] == 1) {
                                            this.eL[3] = 0;
                                        }
                                    }
                                } else if (this.eK[4] >= 1) {
                                    int[] iArr39 = this.eK;
                                    iArr39[4] = iArr39[4] + 1;
                                    if (this.eK[4] > getLength(dv) - 1) {
                                        this.eK[4] = 0;
                                        if (this.eL[4] == 0) {
                                            this.eL[4] = 1;
                                        } else if (this.eL[4] == 1) {
                                            this.eL[4] = 0;
                                        }
                                    }
                                } else if (this.eK[5] >= 1) {
                                    int[] iArr40 = this.eK;
                                    iArr40[5] = iArr40[5] + 1;
                                    if (this.eK[5] > getLength(dv) - 1) {
                                        this.eK[5] = 0;
                                        if (this.eL[5] == 0) {
                                            this.eL[5] = 1;
                                        } else if (this.eL[5] == 1) {
                                            this.eL[5] = 0;
                                        }
                                    }
                                } else if (this.fy[0] >= 1) {
                                    int[] iArr41 = this.fy;
                                    iArr41[0] = iArr41[0] + 1;
                                    if (this.fy[0] > getLength(dv) - 1) {
                                        this.fy[0] = 0;
                                        if (this.eD[0] == 0) {
                                            c(0);
                                        } else if (this.eD[0] == 1) {
                                            c(5);
                                        }
                                    }
                                } else if (this.fy[1] >= 1) {
                                    int[] iArr42 = this.fy;
                                    iArr42[1] = iArr42[1] + 1;
                                    if (this.fy[1] > getLength(dv) - 1) {
                                        this.fy[1] = 0;
                                        if (this.eD[0] == 0) {
                                            c(1);
                                        } else if (this.eD[0] == 1) {
                                            c(6);
                                        }
                                    }
                                } else if (this.fy[2] >= 1) {
                                    int[] iArr43 = this.fy;
                                    iArr43[2] = iArr43[2] + 1;
                                    if (this.fy[2] > getLength(dv) - 1) {
                                        this.fy[2] = 0;
                                        if (this.eD[0] == 0) {
                                            c(2);
                                        } else if (this.eD[0] == 1) {
                                            c(7);
                                        }
                                    }
                                } else if (this.fy[3] >= 1) {
                                    int[] iArr44 = this.fy;
                                    iArr44[3] = iArr44[3] + 1;
                                    if (this.fy[3] > getLength(dv) - 1) {
                                        this.fy[3] = 0;
                                        if (this.eD[0] == 0) {
                                            c(3);
                                        } else if (this.eD[0] == 1) {
                                            c(8);
                                        }
                                    }
                                } else if (this.fy[4] >= 1) {
                                    int[] iArr45 = this.fy;
                                    iArr45[4] = iArr45[4] + 1;
                                    if (this.fy[4] > getLength(dv) - 1) {
                                        this.fy[4] = 0;
                                        if (this.eD[0] == 0) {
                                            c(4);
                                        } else if (this.eD[0] == 1) {
                                            c(9);
                                        }
                                    }
                                } else {
                                    if (!this.dV) {
                                        handleBattleZoom();
                                    }
                                    if (this.fT) {
                                        if (this.ct >= 1) {
                                            this.fU = 0;
                                        }
                                        if (this.fU == 0) {
                                            for (int i52 = 0; i52 < 10; i52++) {
                                                this.gb[i52] = -1;
                                            }
                                            for (int i53 = 0; i53 < 10; i53++) {
                                                if (this.slotCatIDs[i53] == -1) {
                                                    this.fW[i53] = -1;
                                                } else if (this.rechargeTimes[i53] == 0) {
                                                    this.fW[i53] = i53;
                                                } else {
                                                    this.fW[i53] = -1;
                                                }
                                            }
                                            if (aMath.rand(100) >= 30 && this.ct != 1) {
                                                int i54 = 0;
                                                for (int i55 = 0; i55 < 10; i55++) {
                                                    if (this.fW[i55] != -1) {
                                                        this.gb[i54] = i55;
                                                        i54++;
                                                    }
                                                }
                                                if (i54 == 0) {
                                                    this.fU = 0;
                                                } else if (this.ct == 0) {
                                                    this.fV = aMath.rand(i54);
                                                    this.fU = 3;
                                                }
                                                if (this.fU == 0) {
                                                    if (this.bN[0] == 7) {
                                                        this.fU = 0;
                                                    } else if (this.battleData[11] + 1 >= 8) {
                                                        this.fU = 2;
                                                    }
                                                } else if (this.battleData[9] < this.unitStats[this.slotCatIDs[this.gb[this.fV]]][this.slotFormIDs[this.gb[this.fV]]][6] + (((this.unitStats[this.slotCatIDs[this.gb[this.fV]]][this.slotFormIDs[this.gb[this.fV]]][6] * this.eQ) * 50) / 100)) {
                                                    if (this.bN[0] != 7) {
                                                        this.fU = 2;
                                                    } else {
                                                        this.fU = 0;
                                                    }
                                                }
                                            } else if (this.bN[0] != 7) {
                                                this.fU = 2;
                                            } else {
                                                int i56 = 0;
                                                for (int i57 = 0; i57 < 10; i57++) {
                                                    if (this.fW[i57] != -1 && this.slotCatIDs[i57] != -1 && this.battleData[9] >= this.unitStats[this.slotCatIDs[i57]][this.slotFormIDs[i57]][6] + (((this.unitStats[this.slotCatIDs[i57]][this.slotFormIDs[i57]][6] * this.eQ) * 50) / 100)) {
                                                        this.gb[i56] = i57;
                                                        i56++;
                                                    }
                                                }
                                                if (i56 == 0) {
                                                    this.fU = 0;
                                                } else if (this.ct == 0) {
                                                    this.fV = aMath.rand(i56);
                                                    this.fU = 3;
                                                }
                                            }
                                        }
                                        if (this.unitBattleStats[0][0][12] == 0 && this.unitBattleStats[0][0][9] == 0) {
                                            this.gameStats1[1] = ((this.unitBattleStats[0][0][3] - this.battleData[5]) / 10) + 27;
                                            for (int i58 = 1; i58 < getLength(this.unitBattleStats[1]); i58++) {
                                                if (this.unitBattleStats[1][i58][0] != 0 && this.unitBattleStats[1][i58][1] != 4) {
                                                    this.gameStats1[2] = (this.unitBattleStats[1][i58][3] - this.battleData[5]) / 10;
                                                    if (this.gameStats1[2] > ((this.gameStats1[1] - (this.unitBattleStats[0][0][6] * cw)) + 30) - 92 && this.fZ == 0) {
                                                        this.fZ = 1;
                                                    }
                                                }
                                            }
                                            for (int i59 = 1; i59 < getLength(this.unitBattleStats[1]); i59++) {
                                                this.gameStats1[1] = ((this.unitBattleStats[0][0][3] - this.battleData[5]) / 10) + 27;
                                                if (this.unitBattleStats[1][i59][0] != 0) {
                                                    this.gameStats1[2] = (this.unitBattleStats[1][i59][3] - this.battleData[5]) / 10;
                                                    if (this.gameStats1[2] > this.gameStats1[1] - 200) {
                                                        this.fU = 1;
                                                        this.fZ = 0;
                                                    }
                                                }
                                            }
                                        }
                                        if (this.fZ == 1) {
                                            this.ga[0] = aMath.rand(150);
                                            this.fZ = 2;
                                        } else if (this.fZ == 2) {
                                            this.ga[0] -= 1;
                                            if (this.ga[0] <= 0) {
                                                this.fZ = aMath.rand(2) + 3;
                                            }
                                        } else if (this.fZ == 3) {
                                            if (this.unitBattleStats[0][0][12] == 0 && this.unitBattleStats[0][0][9] == 0) {
                                                this.gameStats1[1] = ((this.unitBattleStats[0][0][3] - this.battleData[5]) / 10) + 27;
                                                for (int i60 = 1; i60 < getLength(this.unitBattleStats[1]); i60++) {
                                                    if (this.unitBattleStats[1][i60][0] != 0 && this.unitBattleStats[1][i60][1] != 4) {
                                                        this.gameStats1[2] = (this.unitBattleStats[1][i60][3] - this.battleData[5]) / 10;
                                                        if (this.gameStats1[2] > ((this.gameStats1[1] - (this.unitBattleStats[0][0][6] * cw)) + 30) - 92) {
                                                            this.fU = 1;
                                                        }
                                                    }
                                                }
                                            }
                                            this.fZ = 0;
                                        } else if (this.fZ == 4) {
                                            this.fZ = 0;
                                        }
                                        if (this.gb[this.fV] >= 0 && this.battleData[10] >= this.unitStats[this.slotCatIDs[this.gb[this.fV]]][this.slotFormIDs[this.gb[this.fV]]][6] + (((this.unitStats[this.slotCatIDs[this.gb[this.fV]]][this.slotFormIDs[this.gb[this.fV]]][6] * this.eQ) * 50) / 100) && this.gb[this.fV] >= 0) {
                                            if (this.eD[0] == 0 && this.gb[this.fV] >= 5) {
                                                if (!this.eE[0]) {
                                                    this.el[0] = 1;
                                                    this.eD[6] = 1;
                                                } else if (this.el[0] == 1) {
                                                    if (this.eD[6] == 0) {
                                                        this.el[0] = -1;
                                                    }
                                                } else if (this.el[0] == -1 && this.eD[6] == 1) {
                                                    this.el[0] = 1;
                                                }
                                                this.eE[0] = true;
                                            } else if (this.eD[0] == 1 && this.gb[this.fV] >= 0 && this.gb[this.fV] < 5) {
                                                if (!this.eE[0]) {
                                                    this.el[0] = 1;
                                                    this.eD[6] = 1;
                                                } else if (this.el[0] == 1) {
                                                    if (this.eD[6] == 0) {
                                                        this.el[0] = -1;
                                                    }
                                                } else if (this.el[0] == -1 && this.eD[6] == 1) {
                                                    this.el[0] = 1;
                                                }
                                                this.eE[0] = true;
                                            }
                                        }
                                        if (this.fU >= 3 && this.ct >= 1) {
                                            this.fU = 0;
                                        }
                                        if (this.fU == 1) {
                                            if (this.unitBattleStats[0][0][12] == 0 && this.unitBattleStats[0][0][9] == 0) {
                                                this.unitBattleStats[0][0][12] = this.unitBattleStats[0][0][11];
                                                this.unitBattleStats[0][0][9] = 1;
                                                this.unitBattleStats[0][0][10] = 0;
                                                int[] iArr46 = this.unitBattleStats[0][0];
                                                iArr46[13] = iArr46[13] + 1;
                                                aSound.getInstance().play(SoundType.BATTLE_ACTIVATE);
                                                aSound.getInstance().play(SoundType.CANNON_BEAM);
                                                this.fU = 0;
                                            }
                                        } else if (this.fU == 2) {
                                            if (this.bN[0] == 7) {
                                                this.fU = 0;
                                            } else if (this.battleData[11] + 1 >= 8) {
                                                if (this.battleData[9] < (((this.battleData[11] + 1) - 7) * 2000) + 10000 + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0])) {
                                                    this.fU = 0;
                                                }
                                                if (this.battleData[10] >= (((this.battleData[11] + 1) - 7) * 2000) + 10000 + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0])) {
                                                    this.fU = 0;
                                                    int i61 = 0;
                                                    for (int i62 = 0; i62 < 10; i62++) {
                                                        if (this.slotCatIDs[i62] != -1) {
                                                            i61++;
                                                        }
                                                    }
                                                    this.fY = this.gb[i61 <= 0 ? aMath.rand(i61 + 1) : aMath.rand(i61)];
                                                    int i63 = 0;
                                                    while (true) {
                                                        if (i63 < 10) {
                                                            if (this.slotCatIDs[i63] != -1 && this.fY == this.slotCatIDs[i63] && this.battleData[9] < this.unitStats[this.slotCatIDs[i63]][this.slotFormIDs[i63]][6] + (((this.unitStats[this.slotCatIDs[i63]][this.slotFormIDs[i63]][6] * this.eQ) * 50) / 100)) {
                                                                this.fY = -1;
                                                            } else {
                                                                i63++;
                                                            }
                                                        }
                                                        else {
                                                            break;
                                                        }
                                                    }
                                                    int[] iArr47 = this.battleData;
                                                    iArr47[10] = iArr47[10] - (((((this.battleData[11] + 1) - 7) * 2000) + 10000) + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0]));
                                                    int[] iArr48 = this.bN;
                                                    iArr48[0] = iArr48[0] + 1;
                                                    this.bN[1] = 0;
                                                    this.bN[2] = 0;
                                                    this.battleData[9] = (this.battleData[7] * ((this.bN[0] * 5) + 10)) / 10;
                                                    for (int i64 = 0; i64 < 10; i64++) {
                                                        int[] iArr49 = this.battleData;
                                                        iArr49[9] = iArr49[9] + ((cB[1] * this.bO[i64][1]) / 100);
                                                    }
                                                    this.battleData[8] = (this.battleData[6] * (this.bN[0] + 10)) / 10;
                                                    for (int i65 = 0; i65 < 10; i65++) {
                                                        int[] iArr50 = this.battleData;
                                                        iArr50[8] = iArr50[8] + ((cB[0] * this.bO[i65][0]) / 100);
                                                    }
                                                    this.battleData[25] = 14;
                                                    aSound.getInstance().play(SoundType.BATTLE_ACTIVATE);
                                                }
                                            } else {
                                                if (this.battleData[9] < ((this.battleData[11] + 1) * 1000) + 3000 + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0])) {
                                                    this.fU = 0;
                                                }
                                                if (this.battleData[10] >= ((this.battleData[11] + 1) * 1000) + 3000 + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0])) {
                                                    this.fU = 0;
                                                    int i66 = 0;
                                                    for (int i67 = 0; i67 < 10; i67++) {
                                                        if (this.slotCatIDs[i67] != -1) {
                                                            i66++;
                                                        }
                                                    }
                                                    this.fY = this.gb[i66 <= 0 ? aMath.rand(i66 + 1) : aMath.rand(i66)];
                                                    int i68 = 0;
                                                    while (true) {
                                                        if (i68 < 10) {
                                                            if (this.slotCatIDs[i68] != -1 && this.fY == this.slotCatIDs[i68] && this.battleData[9] < this.unitStats[this.slotCatIDs[i68]][this.slotFormIDs[i68]][6] + (((this.unitStats[this.slotCatIDs[i68]][this.slotFormIDs[i68]][6] * this.eQ) * 50) / 100)) {
                                                                this.fY = -1;
                                                            } else {
                                                                i68++;
                                                            }
                                                        }
                                                        else{
                                                            break;
                                                        }
                                                    }
                                                    int[] iArr51 = this.battleData;
                                                    iArr51[10] = iArr51[10] - ((((this.battleData[11] + 1) * 1000) + 3000) + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0]));
                                                    int[] iArr52 = this.bN;
                                                    iArr52[0] = iArr52[0] + 1;
                                                    this.bN[1] = 0;
                                                    this.bN[2] = 0;
                                                    this.battleData[9] = (this.battleData[7] * ((this.bN[0] * 5) + 10)) / 10;
                                                    for (int i69 = 0; i69 < 10; i69++) {
                                                        int[] iArr53 = this.battleData;
                                                        iArr53[9] = iArr53[9] + ((cB[1] * this.bO[i69][1]) / 100);
                                                    }
                                                    this.battleData[8] = (this.battleData[6] * (this.bN[0] + 10)) / 10;
                                                    for (int i70 = 0; i70 < 10; i70++) {
                                                        int[] iArr54 = this.battleData;
                                                        iArr54[8] = iArr54[8] + ((cB[0] * this.bO[i70][0]) / 100);
                                                    }
                                                    this.battleData[25] = 14;
                                                    aSound.getInstance().play(SoundType.BATTLE_ACTIVATE);
                                                }
                                            }
                                        } else if (this.fU >= 3 && this.battleData[10] >= this.unitStats[this.slotCatIDs[this.gb[this.fV]]][this.slotFormIDs[this.gb[this.fV]]][6] + (((this.unitStats[this.slotCatIDs[this.gb[this.fV]]][this.slotFormIDs[this.gb[this.fV]]][6] * this.eQ) * 50) / 100) && !this.eE[0]) {
                                            if (this.eD[0] == 1 && this.gb[this.fV] >= 5) {
                                                c(this.gb[this.fV]);
                                                this.fU = 0;
                                            } else if (this.eD[0] == 0 && this.gb[this.fV] >= 0 && this.gb[this.fV] < 5) {
                                                c(this.gb[this.fV]);
                                                this.fU = 0;
                                            }
                                        }
                                    }
                                    this.gameStats1[1] = ((((this.bV[0] / 2) - this.battleData[5]) / 10) - 65) + (this.excessWidth / 2);
                                    this.gameStats1[2] = ((((-24) - this.eZ) - this.he[0]) - (dv[this.hk[0]] / 2)) - this.eI[0];
                                    this.a2.applyTransformation(this.gameStats1[1], this.gameStats1[2], this.x);
                                    this.gameStats1[3] = this.x.x;
                                    this.gameStats1[4] = this.x.y;
                                    this.a2.applyTransformation(this.gameStats1[1] + 131, this.gameStats1[2] + 131, this.x);
                                    this.hj[0][0] = this.gameStats1[3];
                                    this.hj[0][1] = this.gameStats1[4];
                                    this.hj[0][2] = this.x.x - this.gameStats1[3];
                                    this.hj[0][3] = this.x.y - this.gameStats1[4];
                                    if (isPointerDown()) {
                                        if (this.eE[0] || this.eE[4]) {
                                            this.eE[1] = true;
                                        }
                                    } else if (!isPointerUp()) {
                                        this.eE[1] = false;
                                    }
                                    if ((this.scrollAmount[0] == 0 && !this.eE[3]) || (this.fT && !this.eE[3] && !this.eE[4] && this.scrollAmount[0] == 0)) {
                                        for (int i71 = 0; i71 < 6; i71++) {
                                            if (isPointerDown() && isTouching(this.eJ[i71][0], this.eJ[i71][1], this.eJ[i71][2], this.eJ[i71][3]) && this.eM[i71]) {
                                                if (this.dW != i71 || !this.dV) {
                                                    this.dW = i71;
                                                    this.textTextures[this.gA[0] + 0].drawText(this.itemNameText[this.dW], "FONT_SYSTEM_BOLD", 30, 1);
                                                    for (int i72 = this.gA[0]; i72 < this.gA[0] + 3; i72++) {
                                                        this.textTextures[i72 + 1].drawText(this.itemExplanationText[this.dW][i72 - this.gA[0]], "FONT_SYSTEM_BOLD", 30, 1);
                                                    }
                                                }
                                                this.dV = true;
                                            }
                                        }
                                        if (this.dV) {
                                            this.gA[1] = 5;
                                        }
                                    }
                                    if (this.scrollAmount[0] == 0 && !this.eE[3]) {
                                        if (!this.fT) {
                                            if (!isPointerDown() || !isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                                                this.gp[0] = false;
                                            } else if (!this.gp[0]) {
                                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                                this.gp[0] = true;
                                            }
                                            if (!isPointerDown() || !isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3])) {
                                                this.gp[1] = false;
                                            } else if (!this.gp[1]) {
                                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                                this.gp[1] = true;
                                            }
                                        }
                                        if (!isPointerDown() || !isTouching(this.buttonCoordinates1[3][0], this.buttonCoordinates1[3][1], this.buttonCoordinates1[3][2], this.buttonCoordinates1[3][3])) {
                                            this.gp[3] = false;
                                        } else if (!this.gp[3]) {
                                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                            this.gp[3] = true;
                                        }
                                        if (isPointerUp() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3]) && !this.dV) {
                                            if (this.unitBattleStats[0][0][12] == 0 && this.unitBattleStats[0][0][9] == 0) {
                                                this.unitBattleStats[0][0][12] = this.unitBattleStats[0][0][11];
                                                this.unitBattleStats[0][0][9] = 1;
                                                this.unitBattleStats[0][0][10] = 0;
                                                int[] iArr55 = this.unitBattleStats[0][0];
                                                iArr55[13] = iArr55[13] + 1;
                                                aSound.getInstance().play(SoundType.BATTLE_ACTIVATE);
                                                aSound.getInstance().play(SoundType.CANNON_BEAM); // cat cannon sound
                                                this.gA[1] = 0;
                                                this.dV = false;
                                                this.fU = 0;
                                            } else {
                                                aSound.getInstance().play(SoundType.CANT_PRESS);
                                            }
                                        } else if (isPointerUp() && isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3]) && !this.dV) {
                                            this.gA[1] = 0;
                                            this.dV = false;
                                            if (this.bN[0] == 7) {
                                                aSound.getInstance().play(SoundType.CANT_PRESS);
                                            } else if (this.battleData[11] + 1 >= 8) {
                                                if (this.battleData[10] >= (((this.battleData[11] + 1) - 7) * 2000) + 10000 + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0])) {
                                                    this.fU = 0;
                                                    int[] iArr56 = this.battleData;
                                                    iArr56[10] = iArr56[10] - (((((this.battleData[11] + 1) - 7) * 2000) + 10000) + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0]));
                                                    int[] iArr57 = this.bN;
                                                    iArr57[0] = iArr57[0] + 1;
                                                    this.bN[1] = 0;
                                                    this.bN[2] = 0;
                                                    this.battleData[9] = (this.battleData[7] * ((this.bN[0] * 5) + 10)) / 10;
                                                    for (int i73 = 0; i73 < 10; i73++) {
                                                        int[] iArr58 = this.battleData;
                                                        iArr58[9] = iArr58[9] + ((cB[1] * this.bO[i73][1]) / 100);
                                                    }
                                                    this.battleData[8] = (this.battleData[6] * (this.bN[0] + 10)) / 10;
                                                    for (int i74 = 0; i74 < 10; i74++) {
                                                        int[] iArr59 = this.battleData;
                                                        iArr59[8] = iArr59[8] + ((cB[0] * this.bO[i74][0]) / 100);
                                                    }
                                                    this.battleData[25] = 14;
                                                    aSound.getInstance().play(SoundType.BATTLE_ACTIVATE);
                                                } else {
                                                    aSound.getInstance().play(SoundType.CANT_PRESS);
                                                }
                                            } else if (this.battleData[10] >= ((this.battleData[11] + 1) * 1000) + 3000 + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0])) {
                                                this.fU = 0;
                                                int[] iArr60 = this.battleData;
                                                iArr60[10] = iArr60[10] - ((((this.battleData[11] + 1) * 1000) + 3000) + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0]));
                                                int[] iArr61 = this.bN;
                                                iArr61[0] = iArr61[0] + 1;
                                                this.bN[1] = 0;
                                                this.bN[2] = 0;
                                                this.battleData[9] = (this.battleData[7] * ((this.bN[0] * 5) + 10)) / 10;
                                                for (int i75 = 0; i75 < 10; i75++) {
                                                    int[] iArr62 = this.battleData;
                                                    iArr62[9] = iArr62[9] + ((cB[1] * this.bO[i75][1]) / 100);
                                                }
                                                this.battleData[8] = (this.battleData[6] * (this.bN[0] + 10)) / 10;
                                                for (int i76 = 0; i76 < 10; i76++) {
                                                    int[] iArr63 = this.battleData;
                                                    iArr63[8] = iArr63[8] + ((cB[0] * this.bO[i76][0]) / 100);
                                                }
                                                this.battleData[25] = 14;
                                                aSound.getInstance().play(SoundType.BATTLE_ACTIVATE);
                                            } else {
                                                aSound.getInstance().play(SoundType.CANT_PRESS);
                                            }
                                        } else if (isPointerUp() && isTouching(this.buttonCoordinates1[3][0], this.buttonCoordinates1[3][1], this.buttonCoordinates1[3][2], this.buttonCoordinates1[3][3]) && !this.dV) {
                                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                            this.gA[1] = 0;
                                            this.dV = false;
                                            int[] iArr64 = this.fx;
                                            iArr64[3] = iArr64[3] + 1;
                                        } else if (isBackPressed()) {
                                            screenTransition();
                                            this.ee = true;
                                            if (this.cj[0] == 0) {
                                                aSound.getInstance().setVolume(50);
                                                return;
                                            }
                                            return;
                                        } else if (isPointerUp() && isTouching(this.eJ[0][0], this.eJ[0][1], this.eJ[0][2], this.eJ[0][3]) && this.eM[0]) {
                                            int[] iArr65 = this.eK;
                                            iArr65[0] = iArr65[0] + 1;
                                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                        } else if ((!isPointerUp() || !isTouching(this.eJ[1][0], this.eJ[1][1], this.eJ[1][2], this.eJ[1][3]) || !this.eM[1]) && (!isPointerUp() || !isTouching(this.eJ[2][0], this.eJ[2][1], this.eJ[2][2], this.eJ[2][3]) || !this.eM[2])) {
                                            if (isPointerUp() && isTouching(this.eJ[3][0], this.eJ[3][1], this.eJ[3][2], this.eJ[3][3]) && this.eM[3]) {
                                                int[] iArr66 = this.eK;
                                                iArr66[3] = iArr66[3] + 1;
                                                aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                            } else if (!isPointerUp() || !isTouching(this.eJ[4][0], this.eJ[4][1], this.eJ[4][2], this.eJ[4][3]) || !this.eM[4]) {
                                                if (isPointerUp() && isTouching(this.eJ[5][0], this.eJ[5][1], this.eJ[5][2], this.eJ[5][3]) && this.eM[5]) {
                                                    int[] iArr67 = this.eK;
                                                    iArr67[5] = iArr67[5] + 1;
                                                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                                } else if (!isPointerUp() || !isTouching(this.hj[0][0], this.hj[0][1], this.hj[0][2], this.hj[0][3]) || this.dH > 47 || this.dV) {
                                                    if (!this.eE[0] && this.scrollAmount[0] == 0 && !this.eE[1] && !this.eE[2]) {
                                                        if (this.eD[0] == 0) {
                                                            this.gameStats1[0] = 0;
                                                        } else if (this.eD[0] == 1) {
                                                            this.gameStats1[0] = 5;
                                                        }
                                                        if (!isPointerDown() || !isTouching(fb[this.gameStats1[0] + 0] + (this.excessWidth / 2), this.eZ + 543, 110, 88)) {
                                                            this.gp[4] = false;
                                                        } else if (!this.gp[4]) {
                                                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                                            this.gp[4] = true;
                                                        }
                                                        if (!isPointerDown() || !isTouching(fb[this.gameStats1[0] + 1] + (this.excessWidth / 2), this.eZ + 543, 110, 88)) {
                                                            this.gp[5] = false;
                                                        } else if (!this.gp[5]) {
                                                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                                            this.gp[5] = true;
                                                        }
                                                        if (!isPointerDown() || !isTouching(fb[this.gameStats1[0] + 2] + (this.excessWidth / 2), this.eZ + 543, 110, 88)) {
                                                            this.gp[6] = false;
                                                        } else if (!this.gp[6]) {
                                                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                                            this.gp[6] = true;
                                                        }
                                                        if (!isPointerDown() || !isTouching(fb[this.gameStats1[0] + 3] + (this.excessWidth / 2), this.eZ + 543, 110, 88)) {
                                                            this.gp[7] = false;
                                                        } else if (!this.gp[7]) {
                                                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                                            this.gp[7] = true;
                                                        }
                                                        if (!isPointerDown() || !isTouching(fb[this.gameStats1[0] + 4] + (this.excessWidth / 2), this.eZ + 543, 110, 88)) {
                                                            this.gp[8] = false;
                                                        } else if (!this.gp[8]) {
                                                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                                            this.gp[8] = true;
                                                        }
                                                        if (isPointerUp() && isTouching(fb[this.gameStats1[0] + 0] + (this.excessWidth / 2), this.eZ + 543, 110, 88) && !this.dV) {
                                                            this.gA[1] = 0;
                                                            this.dV = false;
                                                            int[] iArr68 = this.fy;
                                                            iArr68[0] = iArr68[0] + 1;
                                                        }
                                                        if (isPointerUp() && isTouching(fb[this.gameStats1[0] + 1] + (this.excessWidth / 2), this.eZ + 543, 110, 88) && !this.dV) {
                                                            this.gA[1] = 0;
                                                            this.dV = false;
                                                            int[] iArr69 = this.fy;
                                                            iArr69[1] = iArr69[1] + 1;
                                                        }
                                                        if (isPointerUp() && isTouching(fb[this.gameStats1[0] + 2] + (this.excessWidth / 2), this.eZ + 543, 110, 88) && !this.dV) {
                                                            this.gA[1] = 0;
                                                            this.dV = false;
                                                            int[] iArr70 = this.fy;
                                                            iArr70[2] = iArr70[2] + 1;
                                                        }
                                                        if (isPointerUp() && isTouching(fb[this.gameStats1[0] + 3] + (this.excessWidth / 2), this.eZ + 543, 110, 88) && !this.dV) {
                                                            this.gA[1] = 0;
                                                            this.dV = false;
                                                            int[] iArr71 = this.fy;
                                                            iArr71[3] = iArr71[3] + 1;
                                                        }
                                                        if (isPointerUp() && isTouching(fb[this.gameStats1[0] + 4] + (this.excessWidth / 2), this.eZ + 543, 110, 88) && !this.dV) {
                                                            this.gA[1] = 0;
                                                            this.dV = false;
                                                            int[] iArr72 = this.fy;
                                                            iArr72[4] = iArr72[4] + 1;
                                                        }
                                                    }
                                                } else if (this.bd >= 1) {
                                                    this.gA[1] = 0;
                                                    this.dV = false;
                                                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                                    int[] iArr73 = this.hk;
                                                    iArr73[0] = iArr73[0] + 1;
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if (!this.eb && !k()) {
                                return;
                            }
                            if (this.eL[0] == 0) {
                                this.eG = 1;
                            } else {
                                this.eG = 2;
                            }
                            if (this.eL[3] == 0) {
                                this.fT = false;
                            } else {
                                this.fT = true;
                            }
                            if (this.hm[0] == 1) {
                                this.unitBattleStats[0][0][8] = this.unitBattleStats[0][0][7];
                                for (int i77 = 1; i77 < getLength(this.unitBattleStats[0]); i77++) {
                                    if (this.unitBattleStats[0][i77][0] != 0 && this.unitBattleStats[0][i77][8] != 0) {
                                        this.unitBattleStats[0][i77][8] = this.unitBattleStats[0][i77][7];
                                    }
                                }
                                this.hm[0] = 0;
                            }
                            if (this.hm[3] == 1) {
                                this.eN++;
                                for (int i78 = 0; i78 < getLength(this.rechargeTimes); i78++) {
                                    this.rechargeTimes[i78] = 0;
                                }
                                if (this.eN / 30 >= 60) {
                                    this.hm[3] = 0;
                                    this.eN = 0;
                                }
                            }
                            if (this.battleData[14] != 0) {
                                this.eG = 1;
                                this.fT = false;
                                this.hm[3] = 0;
                                this.eN = 0;
                            }
                            f(this.eD[6]);
                            if (this.zoomLevel < this.battleData[28] * 100) {
                                this.zoomLevel = this.battleData[28] * 100;
                            } else if (this.zoomLevel > 10000) {
                                this.zoomLevel = 10000;
                            }
                            this.gameStats1[1] = this.zoomLevel / 100;
                            float f2 = this.gameStats1[1] / 100.0f;
                            if (this.battleData[5] < 0) {
                                this.battleData[5] = 0;
                                if (this.battleData[14] == 0) {
                                    this.battleData[12] = 0;
                                }
                                this.scrollAmount[0] = 0;
                            } else if (this.battleData[5] > ((int) (((this.bV[0] * f2) - 9600) / f2))) {
                                this.battleData[5] = (int) (((this.bV[0] * f2) - 9600) / f2);
                                if (this.battleData[14] == 0) {
                                    this.battleData[12] = 0;
                                }
                                this.scrollAmount[0] = 0;
                            }
                            int i79 = 1;
                            while (true) {
                                if (i79 < getLength(this.unitBattleStats[0])) {
                                    if (this.unitBattleStats[0][i79][0] != 0) {
                                        this.ct = 1;
                                        i79++;
                                    } else {
                                        this.ct = 0;
                                        i79++;
                                    }
                                }
                                else {
                                    break;
                                }
                            }
                            for (int i80 = 0; i80 < this.eG; i80++) {
                                float[] fArr = this.ep;
                                fArr[0] = fArr[0] + 6.0f;
                                if (this.battleData[14] != 3) {
                                    int[] iArr74 = this.battleData;
                                    iArr74[1] = iArr74[1] + 1;
                                    if (this.battleData[14] == 0) {
                                        int[] iArr75 = this.battleData;
                                        iArr75[30] = iArr75[30] + 1;
                                        if (this.battleData[30] >= 30000) {
                                            this.battleData[30] = 30000;
                                        }
                                    }
                                    if (this.battleData[14] == 0) {
                                        this.bP--;
                                        for (int i81 = 0; i81 < getLength(this.stageStats); i81++) {
                                            if (this.stageStats[i81][0] != 0) {
                                                this.gameStats1[0] = (this.unitBattleStats[1][0][7] * this.stageStats[i81][5]) / 100;
                                                if (this.unitBattleStats[1][0][8] > this.gameStats1[0]) {
                                                    this.bQ[i81][0] = 1;
                                                } else if (this.stageStats[i81][1] == 0 || this.bQ[i81][1] < this.stageStats[i81][1]) {
                                                    this.bQ[i81][0] -= 1;
                                                }
                                            }
                                        }
                                        if (this.bP <= 0) {
                                            int i82 = 0;
                                            for (int i83 = 1; i83 < getLength(this.unitBattleStats[1]); i83++) {
                                                if (this.unitBattleStats[1][i83][0] != 0) {
                                                    i82++;
                                                }
                                            }
                                            if (i82 < this.bV[5]) {
                                                int a2 = getLength(this.stageStats) - 1;
                                                while (true) {
                                                    if (a2 >= 0) {
                                                        if (this.stageStats[a2][0] == 0 || this.bQ[a2][0] > 0) {
                                                            a2--;
                                                        } else if (a(1, this.stageStats[a2][0], 0, this.stageStats[a2][6], this.stageStats[a2][7], 0) >= 0) {
                                                            this.bP = aMath.rand((this.bV[3] - this.bV[2]) + 1) + this.bV[2];
                                                            this.bQ[a2][0] = aMath.rand((this.stageStats[a2][4] - this.stageStats[a2][3]) + 1) + this.stageStats[a2][3];
                                                            int[] iArr76 = this.bQ[a2];
                                                            iArr76[1] = iArr76[1] + 1;
                                                            if (this.bt[this.stageStats[a2][0] - 2] == 0) {
                                                                this.bt[this.stageStats[a2][0] - 2] = 1;
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    for (int i84 = 0; i84 < getLength(this.unitBattleStats[0]); i84++) {
                                        if (this.unitBattleStats[0][i84][0] != 0) {
                                            this.unitBattleStats[0][i84][19] = 0;
                                            if (i84 == 0) {
                                                if (this.unitBattleStats[0][0][9] == 1) {
                                                    int[] iArr77 = this.unitBattleStats[0][0];
                                                    iArr77[10] = iArr77[10] + 1;
                                                    if (this.unitBattleStats[0][0][10] > 16) {
                                                        this.unitBattleStats[0][0][9] = 2;
                                                        this.unitBattleStats[0][0][10] = 0;
                                                        aSound.getInstance().stop(25);
                                                    }
                                                } else if (this.unitBattleStats[0][0][9] == 2) {
                                                    int[] iArr78 = this.unitBattleStats[0][0];
                                                    iArr78[10] = iArr78[10] + 1;
                                                    if (this.unitBattleStats[0][0][10] % 4 == 0) {
                                                        int i85 = 0;
                                                        while (true) {
                                                            if (i85 < getLength(this.bT)) {
                                                                if (this.bT[i85][0] == 0) {
                                                                    if (this.battleData[14] == 0) {
                                                                        aSound.getInstance().play(SoundType.CANNON_BLAST);
                                                                    }
                                                                    this.bT[i85][0] = getLength(cx);
                                                                    this.bT[i85][1] = (this.unitBattleStats[0][0][3] + 270) - (((this.unitBattleStats[0][0][10] / 4) * cw) * 10);
                                                                    this.bT[i85][2] = this.unitBattleStats[0][0][13];
                                                                    if (this.unitBattleStats[0][0][10] / 4 >= this.unitBattleStats[0][0][6]) {
                                                                        this.unitBattleStats[0][0][9] = 0;
                                                                        this.unitBattleStats[0][0][10] = 0;
                                                                    }
                                                                } else {
                                                                    i85++;
                                                                }
                                                            }
                                                            else {
                                                                break;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (this.unitBattleStats[0][0][8] <= 0) {
                                                    this.unitBattleStats[0][0][1] = 2;
                                                    int i86 = this.battleData[1] % 5;
                                                    this.bS[0][i86 + 50][0] = 12;
                                                    this.bS[0][i86 + 50][1] = ((this.unitBattleStats[0][0][3] + 800) - 687) + ((aMath.rand(241) - 120) * 10);
                                                    this.bS[0][i86 + 50][2] = (this.unitBattleStats[0][0][4] - 587) - (aMath.rand(323) * 10);
                                                } else if (this.unitBattleStats[0][0][1] == 1) {
                                                    this.unitBattleStats[0][0][2] -= 1;
                                                    if (this.unitBattleStats[0][0][2] <= 0) {
                                                        this.unitBattleStats[0][0][1] = 0;
                                                        this.unitBattleStats[0][0][2] = 0;
                                                    }
                                                }
                                                if (this.unitBattleStats[0][0][5] > 0) {
                                                    this.unitBattleStats[0][0][5] -= 1;
                                                }
                                            } else {
                                                if (this.unitBattleStats[0][i84][18] > 0) {
                                                    this.unitBattleStats[0][i84][18] -= 1;
                                                }
                                                this.unitBattleStats[0][i84][23] = 0;
                                                if (this.unitBattleStats[0][i84][1] == 0) {
                                                    int i87 = 0;
                                                    while (true) {
                                                        if (i87 >= getLength(this.unitBattleStats[1])) {
                                                            z2 = false;
                                                            break;
                                                        } else if (a(0, i84, i87) == 1) {
                                                            z2 = true;
                                                            break;
                                                        } else {
                                                            i87++;
                                                        }
                                                    }
                                                    if (!z2) {
                                                        int[] iArr79 = this.unitBattleStats[0][i84];
                                                        iArr79[3] = iArr79[3] - this.unitBattleStats[0][i84][10];
                                                        a(i84);
                                                    }
                                                } else if (this.unitBattleStats[0][i84][1] == 3) {
                                                    a(i84);
                                                    if (this.unitBattleStats[0][i84][2] == 0) {
                                                        this.unitBattleStats[0][i84][1] = 0;
                                                        if (this.unitBattleStats[0][i84][8] == 0) {
                                                            aSound.getInstance().play(SoundType.UNIT_KILLED);
                                                            this.unitBattleStats[0][i84][1] = 4;
                                                            this.unitBattleStats[0][i84][2] = 0;
                                                            this.unitBattleStats[0][i84][10] = (aMath.rand(6) + 5) * 10 * 3;
                                                            this.unitBattleStats[0][i84][24] = 1000 - (aMath.rand(40) * 10);
                                                            this.unitBattleStats[0][i84][25] = 255;
                                                            this.unitBattleStats[0][i84][26] = (this.unitBattleStats[0][i84][10] / 10) + aMath.rand(10);
                                                            this.unitBattleStats[0][i84][27] = aMath.rand(40) + 20;
                                                            this.unitBattleStats[0][i84][28] = aMath.rand(10) + 5;
                                                            this.unitBattleStats[0][i84][29] = 0;
                                                        }
                                                    } else {
                                                        int[] iArr80 = this.unitBattleStats[0][i84];
                                                        iArr80[3] = iArr80[3] + 60;
                                                        int[] iArr81 = this.unitBattleStats[0][i84];
                                                        iArr81[4] = iArr81[4] + co[this.unitBattleStats[0][i84][2] % getLength(co)];
                                                    }
                                                } else if (this.unitBattleStats[0][i84][1] == 4) {
                                                    a(i84);
                                                    if (this.unitBattleStats[0][i84][2] >= this.catBaseAnim[1][0].a()) {
                                                        this.unitBattleStats[0][i84][0] = 0;
                                                        this.unitBattleStats[0][i84][27] = 0;
                                                        this.unitBattleStats[0][i84][28] = 0;
                                                        this.unitBattleStats[0][i84][29] = 0;
                                                    }
                                                } else if (this.unitBattleStats[0][i84][1] == 5) {
                                                    a(i84);
                                                    if (this.unitBattleStats[0][i84][2] == 0) {
                                                        this.unitBattleStats[0][i84][1] = 0;
                                                    } else {
                                                        int[] iArr82 = this.unitBattleStats[0][i84];
                                                        iArr82[3] = iArr82[3] + 20;
                                                        int[] iArr83 = this.unitBattleStats[0][i84];
                                                        iArr83[4] = iArr83[4] + cp[this.unitBattleStats[0][i84][2]];
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    this.eo = 0;
                                    this.gameStats1[0] = 0;
                                    if (this.eL[5] >= 1) {
                                        if (this.battleData[14] == 0) {
                                            for (int i88 = 1; i88 < getLength(this.unitBattleStats[1]); i88++) {
                                                if (this.unitBattleStats[1][i88][0] != 0 && this.unitBattleStats[1][i88][1] < 3 && this.unitBattleStats[1][i88][3] >= this.gameStats1[0]) {
                                                    this.gameStats1[0] = this.unitBattleStats[1][i88][3];
                                                    this.eo = i88;
                                                }
                                            }
                                            this.gameStats1[1] = ((this.unitBattleStats[0][0][3] - this.battleData[5]) / 10) + 100 + 35 + 68;
                                            this.gameStats1[2] = (int) ((((this.unitBattleStats[0][0][4] / 10) - 323) - 360) + 288 + 26 + (10.0f * aMath.sin(this.ep[0])));
                                            for (int i89 = 0; i89 < 10 && this.slotEnemyIDs[i89] != this.unitBattleStats[1][this.eo][0]; i89++) {
                                            }
                                        }
                                        if (this.eo >= 1) {
                                            this.ep[2] = -(360.0f - aMath.atan2(this.gameStats1[2] - (((this.unitBattleStats[1][this.eo][4] / 10) + (this.unitBattleStats[1][this.eo][5] * 4)) - 58), this.gameStats1[1] - ((this.unitBattleStats[1][this.eo][3] - this.battleData[5]) / 10)));
                                        } else {
                                            this.ep[2] = 0.0f;
                                        }
                                        if (this.ep[2] >= 0.0f) {
                                            this.ep[2] = 0.0f;
                                        }
                                        this.gameStats1[0] = 0;
                                        if (this.ep[1] >= this.ep[2]) {
                                            float[] fArr2 = this.ep;
                                            fArr2[1] = fArr2[1] - 1.0f;
                                            if (this.ep[1] <= this.ep[2]) {
                                                this.ep[1] = this.ep[2];
                                                this.gameStats1[0] = 1;
                                            }
                                        } else if (this.ep[1] <= this.ep[2]) {
                                            float[] fArr3 = this.ep;
                                            fArr3[1] = fArr3[1] + 1.0f;
                                            if (this.ep[1] >= this.ep[2]) {
                                                this.ep[1] = this.ep[2];
                                                this.gameStats1[0] = 1;
                                            }
                                        }
                                        if (this.eo == 0) {
                                            this.gameStats1[0] = 0;
                                        }
                                        this.gameStats1[1] = this.unitBattleStats[0][0][3] + 1770;
                                        this.gameStats1[2] = (int) (((this.unitBattleStats[0][0][4] - 3238) - 3600) + 2880 + (10.0f * aMath.sin(this.ep[0]) * 10.0f));
                                        this.ew++;
                                        if ((this.ew / 30) / 10 >= 1) {
                                            this.ew = 300;
                                        }
                                        if (this.gameStats1[0] == 1 && (this.ew / 30) / 10 >= 1 && !this.ex) {
                                            this.ew = 0;
                                            this.ex = true;
                                            this.ey = 0;
                                        }
                                        if (this.ex) {
                                            this.ey++;
                                            if (this.ey == 2) {
                                                this.ez = -6;
                                            } else if (this.ey == 3) {
                                                this.ez = -10;
                                            } else if (this.ey == 4) {
                                                this.ez = -6;
                                            } else {
                                                this.ez = 0;
                                            }
                                            if (this.ey == 11) {
                                                this.gameStats1[3] = 0;
                                                if (this.ep[1] >= this.ep[2]) {
                                                    if (this.ep[1] <= this.ep[2]) {
                                                        this.gameStats1[3] = 1;
                                                    }
                                                } else if (this.ep[1] <= this.ep[2] && this.ep[1] >= this.ep[2]) {
                                                    this.gameStats1[3] = 1;
                                                }
                                                if (this.gameStats1[3] == 0 || this.unitBattleStats[1][this.eo][0] == 0 || this.unitBattleStats[1][this.eo][1] >= 3 || this.eo == 0) {
                                                    this.gameStats1[0] = 0;
                                                } else {
                                                    this.gameStats1[0] = 1;
                                                }
                                                if (this.gameStats1[0] >= 1) {
                                                    int i90 = 0;
                                                    while (true) {
                                                        if (i90 < 50) {
                                                            if (this.et[i90] || this.et[i90]) {
                                                                i90++;
                                                            } else {
                                                                this.et[i90] = true;
                                                                this.eu[i90] = 1500;
                                                                this.eq[i90] = this.gameStats1[1];
                                                                this.er[i90] = this.gameStats1[2];
                                                                this.ev[i90] = (int) this.ep[2];
                                                                this.es[i90] = this.eo;
                                                                this.ew = 0;
                                                                for (int i91 = 0; i91 < getLength(this.eA); i91++) {
                                                                    this.eA[i91][0] = 0;
                                                                    this.eA[i91][1] = 0;
                                                                    this.eA[i91][3] = 0;
                                                                    this.eA[i91][4] = 0;
                                                                    if (i91 == 0) {
                                                                        this.eA[i91][3] = 30;
                                                                    } else if (i91 == 1) {
                                                                        this.eA[i91][3] = -30;
                                                                    } else if (i91 == 2) {
                                                                        this.eA[i91][4] = 30;
                                                                    } else if (i91 == 3) {
                                                                        this.eA[i91][4] = -30;
                                                                    }
                                                                    this.eA[i91][2] = 0;
                                                                }
                                                                this.eC = true;
                                                            }
                                                        }
                                                        else {
                                                            break;
                                                        }
                                                    }
                                                } else {
                                                    this.ex = false;
                                                    this.ey = 0;
                                                    this.ez = 0;
                                                    this.ew = 300;
                                                }
                                            }
                                            if (this.ey >= 12 && this.eC) {
                                                for (int i92 = 0; i92 < getLength(this.eA); i92++) {
                                                    int[] iArr84 = this.eA[i92];
                                                    iArr84[0] = iArr84[0] + this.eA[i92][3];
                                                    int[] iArr85 = this.eA[i92];
                                                    iArr85[1] = iArr85[1] + this.eA[i92][4];
                                                    this.eA[i92][3] *= 0.5d;
                                                    this.eA[i92][4] *= 0.5d;
                                                    int[] iArr86 = this.eA[i92];
                                                    iArr86[2] = iArr86[2] + 1;
                                                    if (this.eA[i92][2] / 2 >= 5) {
                                                        this.eC = false;
                                                    }
                                                }
                                            }
                                            if (this.ey == 11) {
                                                this.em[0] = 20;
                                            } else if (this.ey == 12) {
                                                this.em[0] = -10;
                                            } else if (this.ey == 13) {
                                                this.em[0] = 5;
                                            } else if (this.ey == 14) {
                                                this.em[0] = -2;
                                            } else if (this.ey == 15) {
                                                this.em[0] = 1;
                                            } else if (this.ey == 16) {
                                                this.em[0] = 0;
                                            }
                                            if (this.ey >= 28) {
                                                this.ex = false;
                                            }
                                        }
                                        for (int i93 = 0; i93 < 50; i93++) {
                                            if (this.et[i93]) {
                                                this.eq[i93] = (int) (this.eq[i93] - (this.eu[i93] * aMath.cos(this.ev[i93])));
                                                this.er[i93] = (int) (this.er[i93] - (this.eu[i93] * aMath.sin(this.ev[i93])));
                                                if (this.er[i93] / 10 >= getHeight()) {
                                                    this.et[i93] = false;
                                                }
                                                if (this.eq[i93] / 10 <= -100) {
                                                    this.et[i93] = false;
                                                }
                                            }
                                        }
                                    } else {
                                        this.eC = false;
                                        this.ex = false;
                                        for (int i94 = 0; i94 < 50; i94++) {
                                            if (this.et[i94]) {
                                                this.et[i94] = false;
                                            }
                                        }
                                    }
                                    this.gameStats1[0] = 0;
                                    for (int i95 = 0; i95 < getLength(this.unitBattleStats[1]); i95++) {
                                        if (this.unitBattleStats[1][i95][0] != 0) {
                                            this.unitBattleStats[1][i95][19] = 0;
                                            if (i95 == 0) {
                                                if (this.unitBattleStats[1][0][8] <= 0) {
                                                    this.unitBattleStats[1][0][1] = 2;
                                                    int i96 = this.battleData[1] % 5;
                                                    this.gameStats1[1] = this.unitBattleStats[1][0][3] - ((((fe[this.battleData[20]][2] * 1180) / 100) + ((fe[this.battleData[20]][0] * fe[this.battleData[20]][2]) / 100)) / 2);
                                                    this.bS[1][50 - i96][0] = 12;
                                                    this.bS[1][50 - i96][1] = (this.gameStats1[1] - 687) + ((aMath.rand(241) - 120) * 10);
                                                    this.bS[1][50 - i96][2] = (this.unitBattleStats[1][0][4] - 587) - (aMath.rand(323) * 10);
                                                } else if (this.unitBattleStats[1][0][1] == 1) {
                                                    this.unitBattleStats[1][0][2] -= 1;
                                                    if (this.unitBattleStats[1][0][2] <= 0) {
                                                        this.unitBattleStats[1][0][1] = 0;
                                                        this.unitBattleStats[1][0][2] = 0;
                                                    }
                                                }
                                                if (this.unitBattleStats[1][0][5] > 0) {
                                                    this.unitBattleStats[1][0][5] -= 1;
                                                }
                                            } else {
                                                if (this.unitBattleStats[1][i95][18] > 0) {
                                                    this.unitBattleStats[1][i95][18] -= 1;
                                                }
                                                this.unitBattleStats[1][i95][23] = 0;
                                                for (int i97 = 0; i97 < 50; i97++) {
                                                    if (this.es[i97] == i95 && this.et[i97]) {
                                                        if (this.unitBattleStats[1][i95][1] <= 2) {
                                                            if (this.unitBattleStats[1][i95][3] >= this.eq[i97]) {
                                                                this.et[i97] = false;
                                                                int[] iArr87 = this.unitBattleStats[1][i95];
                                                                iArr87[19] = iArr87[19] + (this.unitBattleStats[0][0][7] / 20);
                                                                this.unitBattleStats[1][i95][23] = 1;
                                                                this.eB[i97][0][0] = 12;
                                                                this.eB[i97][0][1] = (this.unitBattleStats[1][i95][3] - 687) - ((aMath.rand(100) - 50) * 10);
                                                                this.eB[i97][0][2] = (this.unitBattleStats[1][i95][4] - 1175) + ((aMath.rand(60) - 30) * 10);
                                                                this.eB[i97][1][0] = 12;
                                                                this.eB[i97][1][1] = (this.unitBattleStats[1][i95][3] - 687) - ((aMath.rand(100) - 50) * 10);
                                                                this.eB[i97][1][2] = (this.unitBattleStats[1][i95][4] - 1175) + ((aMath.rand(60) - 30) * 10);
                                                            }
                                                        } else if (this.unitBattleStats[1][i95][3] >= this.eq[i97]) {
                                                            this.et[i97] = false;
                                                            this.eB[i97][0][0] = 12;
                                                            this.eB[i97][0][1] = (this.unitBattleStats[1][i95][3] - 687) - ((aMath.rand(100) - 50) * 10);
                                                            this.eB[i97][0][2] = (this.unitBattleStats[1][i95][4] - 1175) + ((aMath.rand(60) - 30) * 10);
                                                            this.eB[i97][1][0] = 12;
                                                            this.eB[i97][1][1] = (this.unitBattleStats[1][i95][3] - 687) - ((aMath.rand(100) - 50) * 10);
                                                            this.eB[i97][1][2] = (this.unitBattleStats[1][i95][4] - 1175) + ((aMath.rand(60) - 30) * 10);
                                                        }
                                                    }
                                                }
                                                if (this.hm[1] == 1 && this.unitBattleStats[1][i95][1] <= 2) {
                                                    int[] iArr88 = this.unitBattleStats[1][i95];
                                                    iArr88[19] = iArr88[19] + (this.unitBattleStats[0][0][16] * 3);
                                                    this.unitBattleStats[1][i95][23] = 1;
                                                }
                                                if (this.unitBattleStats[1][i95][1] == 0) {
                                                    int i98 = 0;
                                                    while (true) {
                                                        if (i98 >= getLength(this.unitBattleStats[1])) {
                                                            z = false;
                                                            break;
                                                        } else if (a(1, i95, i98) == 1) {
                                                            z = true;
                                                            break;
                                                        } else {
                                                            i98++;
                                                        }
                                                    }
                                                    if (!z) {
                                                        int[] iArr89 = this.unitBattleStats[1][i95];
                                                        iArr89[3] = iArr89[3] + this.unitBattleStats[1][i95][10];
                                                        b(i95);
                                                    }
                                                } else if (this.unitBattleStats[1][i95][1] == 3) {
                                                    b(i95);
                                                    if (this.unitBattleStats[1][i95][2] == 0) {
                                                        this.unitBattleStats[1][i95][1] = 0;
                                                        if (this.unitBattleStats[1][i95][8] == 0) {
                                                            aSound.getInstance().play(SoundType.ENEMY_KILLED);
                                                            this.unitBattleStats[1][i95][1] = 4;
                                                            this.unitBattleStats[1][i95][2] = 0;
                                                            this.unitBattleStats[1][i95][10] = (aMath.rand(12) + 10) * 10;
                                                            this.unitBattleStats[1][i95][24] = 1000 - (aMath.rand(40) * 10);
                                                            this.unitBattleStats[1][i95][25] = 255;
                                                            this.unitBattleStats[1][i95][26] = (this.unitBattleStats[1][i95][10] / 10) + aMath.rand(10);
                                                            this.unitBattleStats[1][i95][27] = aMath.rand(40) + 20;
                                                            this.unitBattleStats[1][i95][28] = aMath.rand(10) + 5;
                                                            this.unitBattleStats[1][i95][29] = 0;
                                                            int i99 = this.enemyStats[this.unitBattleStats[1][i95][0]][6];
                                                            int i100 = 0;
                                                            for (int i101 = 0; i101 < 10; i101++) {
                                                                i100 += (cB[5] * this.bO[i101][5]) / 100;
                                                            }
                                                            int i102 = ad[8] + (this.bx[8] * 5) + i100;
                                                            int[] iArr90 = this.battleData;
                                                            iArr90[10] = ((i102 * i99) / 100) + iArr90[10];
                                                            if (this.battleData[10] > this.battleData[9]) {
                                                                this.battleData[10] = this.battleData[9];
                                                            }
                                                        }
                                                    } else {
                                                        this.unitBattleStats[1][i95][3] -= 60;
                                                        int[] iArr91 = this.unitBattleStats[1][i95];
                                                        iArr91[4] = iArr91[4] + co[this.unitBattleStats[1][i95][2] % getLength(co)];
                                                        int i103 = 0;
                                                        while (true) {
                                                            if (i103 >= 10) {
                                                                i103 = 0;
                                                                break;
                                                            } else if (this.slotEnemyIDs[i103] != this.unitBattleStats[1][i95][0]) {
                                                                i103++;
                                                            }
                                                            else{
                                                                break;
                                                            }
                                                        }
                                                        this.enemySlotModels[i103].getModelCollision(0).a().a(this.enemySlotModels[i103], this.enemySlotModels[i103].getModelCollision(0).b(), this.enemySlotModels[i103].getModelCollision(0).c(), this.x);
                                                        this.unitBattleStats[1][i95][30] = (this.x.x * 10) + 0;
                                                        if (this.unitBattleStats[1][i95][30] >= this.unitBattleStats[1][i95][3]) {
                                                            this.unitBattleStats[1][i95][3] = this.unitBattleStats[1][i95][30];
                                                        }
                                                    }
                                                } else if (this.unitBattleStats[1][i95][1] == 4) {
                                                    b(i95);
                                                    if (this.unitBattleStats[1][i95][2] >= this.catBaseAnim[1][0].a()) {
                                                        this.unitBattleStats[1][i95][0] = 0;
                                                        this.unitBattleStats[1][i95][27] = 0;
                                                        this.unitBattleStats[1][i95][28] = 0;
                                                        this.unitBattleStats[1][i95][29] = 0;
                                                    }
                                                } else if (this.unitBattleStats[1][i95][1] == 5) {
                                                    b(i95);
                                                    if (this.unitBattleStats[1][i95][2] == 0) {
                                                        this.unitBattleStats[1][i95][1] = 0;
                                                    } else {
                                                        this.unitBattleStats[1][i95][3] -= 20;
                                                        int[] iArr92 = this.unitBattleStats[1][i95];
                                                        iArr92[4] = iArr92[4] + cp[this.unitBattleStats[1][i95][2]];
                                                        int i104 = 0;
                                                        while (true) {
                                                            if (i104 >= 10) {
                                                                i104 = 0;
                                                                break;
                                                            } else if (this.slotEnemyIDs[i104] != this.unitBattleStats[1][i95][0]) {
                                                                i104++;
                                                            }
                                                        }
                                                        this.enemySlotModels[i104].getModelCollision(0).a().a(this.enemySlotModels[i104], this.enemySlotModels[i104].getModelCollision(0).b(), this.enemySlotModels[i104].getModelCollision(0).c(), this.x);
                                                        this.unitBattleStats[1][i95][30] = (this.x.x * 10) + 0;
                                                        if (this.unitBattleStats[1][i95][30] >= this.unitBattleStats[1][i95][3]) {
                                                            this.unitBattleStats[1][i95][3] = this.unitBattleStats[1][i95][30];
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    int i105 = 0;
                                    while (i105 < getLength(this.unitBattleStats)) {
                                        for (int i106 = 1; i106 < getLength(this.unitBattleStats[0]); i106++) {
                                            if (this.unitBattleStats[i105][i106][0] != 0 && this.unitBattleStats[i105][i106][1] == 0) {
                                                int i107 = 0;
                                                while (true) {
                                                    if (i107 >= getLength(this.unitBattleStats[i105 == 0 ? (char) 1 : (char) 0])) {
                                                        break;
                                                    } else if (a(i105, i106, i107) == 1) {
                                                        this.unitBattleStats[i105][i106][1] = 1;
                                                        this.unitBattleStats[i105][i106][2] = 0;
                                                        i107++;
                                                    } else {
                                                        i107++;
                                                    }
                                                }
                                            }
                                        }
                                        i105++;
                                    }
                                    if (this.hm[1] == 1) {
                                        this.hm[1] = 0;
                                    }
                                    for (int i108 = 1; i108 < getLength(this.unitBattleStats[0]); i108++) {
                                        if (this.unitBattleStats[0][i108][0] != 0) {
                                            if (this.unitBattleStats[0][i108][1] == 1) {
                                                a(i108);
                                                boolean z3 = false;
                                                int i109 = 0;
                                                while (true) {
                                                    if (i109 < getLength(this.unitBattleStats[1])) {
                                                        if (a(0, i108, i109) == 1) {
                                                            if (this.unitBattleStats[0][i108][18] == 0) {
                                                                this.unitBattleStats[0][i108][1] = 2;
                                                                this.unitBattleStats[0][i108][2] = 0;
                                                                z3 = true;
                                                            } else {
                                                                z3 = true;
                                                            }
                                                        }
                                                        i109++;
                                                    }
                                                    else {
                                                        break;
                                                    }
                                                }
                                                if (!z3) {
                                                    this.unitBattleStats[0][i108][1] = 0;
                                                    this.unitBattleStats[0][i108][2] = 0;
                                                }
                                            }
                                            if (this.unitBattleStats[0][i108][1] == 2) {
                                                a(i108);
                                                if (this.unitBattleStats[0][i108][2] == 0) {
                                                    this.unitBattleStats[0][i108][1] = 1;
                                                } else if (this.unitBattleStats[0][i108][2] == this.unitBattleStats[0][i108][21]) {
                                                    this.unitBattleStats[0][i108][18] = this.unitBattleStats[0][i108][12];
                                                    this.ca = 0;
                                                    for (int i110 = 0; i110 < getLength(this.unitBattleStats[1]); i110++) {
                                                        if (a(0, i108, i110) == 1) {
                                                            this.bZ[this.ca][0] = i110;
                                                            this.bZ[this.ca][1] = this.unitBattleStats[1][i110][3] - this.unitBattleStats[1][i110][14];
                                                            this.ca++;
                                                        }
                                                    }
                                                    if (this.ca > 0) {
                                                        if (this.unitBattleStats[0][i108][20] == 0) {
                                                            for (int i111 = 0; i111 < this.ca - 1; i111++) {
                                                                int i112 = this.bZ[i111][1];
                                                                int i113 = i111;
                                                                for (int i114 = i111 + 1; i114 < this.ca; i114++) {
                                                                    if (this.bZ[i114][1] > i112) {
                                                                        i112 = this.bZ[i114][1];
                                                                        i113 = i114;
                                                                    }
                                                                }
                                                                for (int i115 = 0; i115 < 2; i115++) {
                                                                    this.bZ[51][i115] = this.bZ[i111][i115];
                                                                    this.bZ[i111][i115] = this.bZ[i113][i115];
                                                                    this.bZ[i113][i115] = this.bZ[51][i115];
                                                                }
                                                            }
                                                            int i116 = this.bZ[0][1];
                                                            int i117 = 0;
                                                            for (int i118 = 0; i118 < this.ca && this.bZ[i118][1] == i116; i118++) {
                                                                i117++;
                                                            }
                                                            int rand = aMath.rand(i117);
                                                            if (this.unitBattleStats[0][i108][17] != 0 && this.unitBattleStats[0][i108][17] == this.unitBattleStats[1][this.bZ[rand][0]][16]) {
                                                                int[] iArr93 = this.unitBattleStats[1][this.bZ[rand][0]];
                                                                iArr93[19] = iArr93[19] + ((this.unitBattleStats[0][i108][11] * 5) / 10);
                                                            } else if (this.unitBattleStats[0][i108][16] == 0 || this.unitBattleStats[0][i108][16] != this.unitBattleStats[1][this.bZ[rand][0]][17]) {
                                                                int[] iArr94 = this.unitBattleStats[1][this.bZ[rand][0]];
                                                                iArr94[19] = iArr94[19] + this.unitBattleStats[0][i108][11];
                                                            } else {
                                                                int[] iArr95 = this.unitBattleStats[1][this.bZ[rand][0]];
                                                                iArr95[19] = iArr95[19] + ((this.unitBattleStats[0][i108][11] * 15) / 10);
                                                            }
                                                        } else {
                                                            for (int i119 = 0; i119 < this.ca; i119++) {
                                                                if (this.unitBattleStats[0][i108][17] != 0 && this.unitBattleStats[0][i108][17] == this.unitBattleStats[1][this.bZ[i119][0]][16]) {
                                                                    int[] iArr96 = this.unitBattleStats[1][this.bZ[i119][0]];
                                                                    iArr96[19] = iArr96[19] + ((this.unitBattleStats[0][i108][11] * 5) / 10);
                                                                } else if (this.unitBattleStats[0][i108][16] == 0 || this.unitBattleStats[0][i108][16] != this.unitBattleStats[1][this.bZ[i119][0]][17]) {
                                                                    int[] iArr97 = this.unitBattleStats[1][this.bZ[i119][0]];
                                                                    iArr97[19] = iArr97[19] + this.unitBattleStats[0][i108][11];
                                                                } else {
                                                                    int[] iArr98 = this.unitBattleStats[1][this.bZ[i119][0]];
                                                                    iArr98[19] = iArr98[19] + ((this.unitBattleStats[0][i108][11] * 15) / 10);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    for (int i120 = 1; i120 < getLength(this.unitBattleStats[1]); i120++) {
                                        if (this.unitBattleStats[1][i120][0] != 0) {
                                            if (this.unitBattleStats[1][i120][1] == 1) {
                                                b(i120);
                                                boolean z4 = false;
                                                int i121 = 0;
                                                while (true) {
                                                    if (i121 < getLength(this.unitBattleStats[0])) {
                                                        if (a(1, i120, i121) == 1) {
                                                            if (this.unitBattleStats[1][i120][18] == 0) {
                                                                this.unitBattleStats[1][i120][1] = 2;
                                                                this.unitBattleStats[1][i120][2] = 0;
                                                                z4 = true;
                                                            } else {
                                                                z4 = true;
                                                            }
                                                        }
                                                        i121++;
                                                    }
                                                    else {
                                                        break;
                                                    }
                                                }
                                                if (!z4) {
                                                    this.unitBattleStats[1][i120][1] = 0;
                                                    this.unitBattleStats[1][i120][2] = 0;
                                                }
                                            }
                                            if (this.unitBattleStats[1][i120][1] == 2) {
                                                b(i120);
                                                if (this.unitBattleStats[1][i120][2] == 0) {
                                                    this.unitBattleStats[1][i120][1] = 1;
                                                } else if (this.unitBattleStats[1][i120][2] == this.unitBattleStats[1][i120][21]) {
                                                    this.unitBattleStats[1][i120][18] = this.unitBattleStats[1][i120][12];
                                                    this.ca = 0;
                                                    for (int i122 = 0; i122 < getLength(this.unitBattleStats[0]); i122++) {
                                                        if (a(1, i120, i122) == 1) {
                                                            this.bZ[this.ca][0] = i122;
                                                            this.bZ[this.ca][1] = this.unitBattleStats[0][i122][3] + this.unitBattleStats[0][i122][14];
                                                            this.ca++;
                                                        }
                                                    }
                                                    if (this.ca > 0) {
                                                        if (this.unitBattleStats[1][i120][20] == 0) {
                                                            for (int i123 = 0; i123 < this.ca - 1; i123++) {
                                                                int i124 = this.bZ[i123][1];
                                                                int i125 = i123;
                                                                for (int i126 = i123 + 1; i126 < this.ca; i126++) {
                                                                    if (this.bZ[i126][1] < i124) {
                                                                        i124 = this.bZ[i126][1];
                                                                        i125 = i126;
                                                                    }
                                                                }
                                                                for (int i127 = 0; i127 < 2; i127++) {
                                                                    this.bZ[51][i127] = this.bZ[i123][i127];
                                                                    this.bZ[i123][i127] = this.bZ[i125][i127];
                                                                    this.bZ[i125][i127] = this.bZ[51][i127];
                                                                }
                                                            }
                                                            int i128 = this.bZ[0][1];
                                                            int i129 = 0;
                                                            for (int i130 = 0; i130 < this.ca && this.bZ[i130][1] == i128; i130++) {
                                                                i129++;
                                                            }
                                                            int rand2 = aMath.rand(i129);
                                                            if (this.unitBattleStats[1][i120][17] != 0 && this.unitBattleStats[1][i120][17] == this.unitBattleStats[0][this.bZ[rand2][0]][16]) {
                                                                int[] iArr99 = this.unitBattleStats[0][this.bZ[rand2][0]];
                                                                iArr99[19] = iArr99[19] + ((this.unitBattleStats[1][i120][11] * 5) / 10);
                                                            } else if (this.unitBattleStats[1][i120][16] == 0 || this.unitBattleStats[1][i120][16] != this.unitBattleStats[0][this.bZ[rand2][0]][17]) {
                                                                int[] iArr100 = this.unitBattleStats[0][this.bZ[rand2][0]];
                                                                iArr100[19] = iArr100[19] + this.unitBattleStats[1][i120][11];
                                                            } else {
                                                                int[] iArr101 = this.unitBattleStats[0][this.bZ[rand2][0]];
                                                                iArr101[19] = iArr101[19] + ((this.unitBattleStats[1][i120][11] * 15) / 10);
                                                            }
                                                        } else {
                                                            for (int i131 = 0; i131 < this.ca; i131++) {
                                                                if (this.unitBattleStats[1][i120][17] != 0 && this.unitBattleStats[1][i120][17] == this.unitBattleStats[0][this.bZ[i131][0]][16]) {
                                                                    int[] iArr102 = this.unitBattleStats[0][this.bZ[i131][0]];
                                                                    iArr102[19] = iArr102[19] + ((this.unitBattleStats[1][i120][11] * 5) / 10);
                                                                } else if (this.unitBattleStats[1][i120][16] == 0 || this.unitBattleStats[1][i120][16] != this.unitBattleStats[0][this.bZ[i131][0]][17]) {
                                                                    int[] iArr103 = this.unitBattleStats[0][this.bZ[i131][0]];
                                                                    iArr103[19] = iArr103[19] + this.unitBattleStats[1][i120][11];
                                                                } else {
                                                                    int[] iArr104 = this.unitBattleStats[0][this.bZ[i131][0]];
                                                                    iArr104[19] = iArr104[19] + ((this.unitBattleStats[1][i120][11] * 15) / 10);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    for (int i132 = 0; i132 < getLength(this.bT); i132++) {
                                        if (this.bT[i132][0] > 0) {
                                            this.bT[i132][0] -= 1;
                                            if (this.bT[i132][0] == 4) {
                                                for (int i133 = 1; i133 < getLength(this.unitBattleStats[1]); i133++) {
                                                    if (this.unitBattleStats[1][i133][0] != 0 && this.unitBattleStats[1][i133][1] <= 3 && this.unitBattleStats[1][i133][22] < this.bT[i132][2] && this.unitBattleStats[1][i133][3] - this.unitBattleStats[1][i133][14] >= this.bT[i132][1]) {
                                                        this.unitBattleStats[1][i133][22] = this.bT[i132][2];
                                                        if (this.unitBattleStats[1][i133][1] <= 2) {
                                                            int[] iArr105 = this.unitBattleStats[1][i133];
                                                            iArr105[19] = iArr105[19] + this.unitBattleStats[0][0][16];
                                                            this.unitBattleStats[1][i133][23] = 1;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    boolean isUnitHit = false;
                                    for (int unitType = 0; unitType < 2; unitType++) {
                                        int unitID = 0;
                                        while (unitID < getLength(this.unitBattleStats[unitType])) {
                                            if (this.unitBattleStats[unitType][unitID][0] != 0 && this.unitBattleStats[unitType][unitID][19] != 0) {
                                                this.bS[unitType][unitID][0] = 12;
                                                if (unitID == 0) {
                                                    this.bS[unitType][0][1] = (this.unitBattleStats[unitType][0][3] - 687) + ((aMath.rand(46) - 25) * 10);
                                                    this.bS[unitType][0][2] = (this.unitBattleStats[unitType][0][4] - 1175) - (aMath.rand(25) * 10);
                                                    this.unitBattleStats[unitType][0][5] = 1;
                                                    if (this.unitBattleStats[unitType][0][1] == 0 || this.unitBattleStats[unitType][0][1] == 1) {
                                                        this.unitBattleStats[unitType][0][1] = 1;
                                                        this.unitBattleStats[unitType][0][2] = 4;
                                                        isUnitHit = true; // cat
                                                    } else {
                                                        isUnitHit = false; // enemy base
                                                    }
                                                } else {
                                                    if (!isUnitHit) {
                                                        isUnitHit = true; // cannon
                                                    }
                                                    this.bS[unitType][unitID][1] = (this.unitBattleStats[unitType][unitID][3] - 687) - ((aMath.rand(46) - 25) * 10);
                                                    this.bS[unitType][unitID][2] = (this.unitBattleStats[unitType][unitID][4] - 1175) + ((aMath.rand(31) - 15) * 10);
                                                }
                                                int i136 = this.unitBattleStats[unitType][unitID][8];
                                                int[] iArr106 = this.unitBattleStats[unitType][unitID];
                                                iArr106[8] = iArr106[8] - this.unitBattleStats[unitType][unitID][19];
                                                if (this.unitBattleStats[unitType][unitID][8] <= 0) {
                                                    this.unitBattleStats[unitType][unitID][8] = 0;
                                                }
                                                if (unitID >= 1) {
                                                    int i137 = this.unitBattleStats[unitType][unitID][7] / this.unitBattleStats[unitType][unitID][9];
                                                    int i138 = 0;
                                                    while (i138 < this.unitBattleStats[unitType][unitID][9] && this.unitBattleStats[unitType][unitID][8] > i137 * i138) {
                                                        i138++;
                                                    }
                                                    int i139 = 0;
                                                    while (i139 < this.unitBattleStats[unitType][unitID][9] && i136 > i137 * i139) {
                                                        i139++;
                                                    }
                                                    if (i138 != this.unitBattleStats[unitType][unitID][9] && i138 != i139) {
                                                        this.unitBattleStats[unitType][unitID][1] = 3;
                                                        this.unitBattleStats[unitType][unitID][2] = 0;
                                                    } else if (this.unitBattleStats[unitType][unitID][23] == 1) {
                                                        this.unitBattleStats[unitType][unitID][1] = 5;
                                                        this.unitBattleStats[unitType][unitID][2] = 0;
                                                    }
                                                } else if (this.unitBattleStats[unitType][unitID][8] == 0 && this.battleData[14] == 0) {
                                                    this.battleData[15] = 0;
                                                    this.battleData[16] = 0;
                                                    this.cj[0] = 0;
                                                    this.cj[1] = 0;
                                                    this.cj[2] = 0;
                                                    this.cj[3] = -1;
                                                    if (unitType == 0) {
                                                        this.battleData[12] = 1;
                                                        aSound.getInstance().play(SoundType.BATTLE_LOSE);
                                                        for (int i140 = 1; i140 < getLength(this.unitBattleStats[0]); i140++) {
                                                            if (this.unitBattleStats[0][i140][0] != 0 && this.unitBattleStats[0][i140][1] != 4) {
                                                                this.unitBattleStats[0][i140][1] = 4;
                                                                this.unitBattleStats[0][i140][2] = 0;
                                                                this.unitBattleStats[0][i140][8] = 0;
                                                                this.unitBattleStats[0][i140][10] = (aMath.rand(12) + 10) * 10;
                                                                this.unitBattleStats[0][i140][24] = 1000 - (aMath.rand(40) * 10);
                                                                this.unitBattleStats[0][i140][25] = 255;
                                                                this.unitBattleStats[0][i140][26] = (this.unitBattleStats[0][i140][10] / 10) + aMath.rand(10);
                                                                this.unitBattleStats[0][i140][27] = aMath.rand(40) + 20;
                                                                this.unitBattleStats[0][i140][28] = aMath.rand(10) + 5;
                                                                this.unitBattleStats[0][i140][29] = 0;
                                                            }
                                                        }
                                                        if (this.battleData[0] != 48) {
                                                            this.battleData[14] = 2;
                                                            this.battleData[24] = 0;
                                                        } else {
                                                            this.battleData[14] = 5;
                                                            this.battleData[22] = 0;
                                                            this.battleData[23] = 0;
                                                            if (this.aU < this.battleData[22]) {
                                                                this.aU = this.battleData[22];
                                                                this.battleData[23] = 1;
                                                            }
                                                            if (this.aW < this.battleData[22]) {
                                                                this.aW = this.battleData[22];
                                                            }
                                                            aSave();
                                                        }
                                                    } else if (unitType == 1) {
                                                        this.battleData[12] = 2;
                                                        aSound.getInstance().stop(-1);
                                                        aSound.getInstance().play(SoundType.BATTLE_VICTORY);
                                                        for (int i141 = 1; i141 < getLength(this.unitBattleStats[1]); i141++) {
                                                            if (this.unitBattleStats[1][i141][0] != 0 && this.unitBattleStats[1][i141][1] != 4) {
                                                                this.unitBattleStats[1][i141][1] = 4;
                                                                this.unitBattleStats[1][i141][2] = 0;
                                                                this.unitBattleStats[1][i141][8] = 0;
                                                                this.unitBattleStats[1][i141][10] = (aMath.rand(12) + 10) * 10;
                                                                this.unitBattleStats[1][i141][24] = 1000 - (aMath.rand(40) * 10);
                                                                this.unitBattleStats[1][i141][25] = 255;
                                                                this.unitBattleStats[1][i141][26] = (this.unitBattleStats[1][i141][10] / 10) + aMath.rand(10);
                                                                this.unitBattleStats[1][i141][27] = aMath.rand(40) + 20;
                                                                this.unitBattleStats[1][i141][28] = aMath.rand(10) + 5;
                                                                this.unitBattleStats[1][i141][29] = 0;
                                                            }
                                                        }
                                                        if (this.battleData[0] != 48) {
                                                            this.battleData[14] = 1;
                                                            int i142 = (((this.battleData[0] * 300) + 1000) * ((this.eQ * 0) + 10)) / 10;
                                                            this.battleData[17] = i142 - (((Math.min(this.br[this.eQ][this.battleData[0]], 7)) * i142) / 8);
                                                            int i143 = 0;
                                                            for (int i144 = 0; i144 < 10; i144++) {
                                                                i143 += (cB[3] * this.bO[i144][3]) / 100;
                                                            }
                                                            this.battleData[17] = (((ad[9] + (this.bx[9] * 5)) + i143) * this.battleData[17]) / 100;
                                                            if (this.eL[4] == 1) {
                                                                this.battleData[17] = (this.battleData[17] * 15) / 10;
                                                            }
                                                            this.aY += this.battleData[17];
                                                            if (this.aY >= 99999999) {
                                                                this.aY = 99999999;
                                                            }
                                                            this.battleData[21] = 0;
                                                            this.battleData[33] = 0;
                                                            if (this.bq[this.eQ] == this.battleData[0]) {
                                                                if (this.battleData[0] == 6) {
                                                                    this.battleData[33] = 1;
                                                                }
                                                                int[] iArr107 = this.bq;
                                                                int i145 = this.eQ;
                                                                iArr107[i145] = iArr107[i145] + 1;
                                                                this.battleData[31] = this.bq[this.eQ];
                                                                this.battleData[32] = -1;
                                                                int[] iArr108 = this.bp;
                                                                int i146 = this.eQ;
                                                                iArr108[i146] = iArr108[i146] + 1;
                                                                this.bI = -1;
                                                                if (this.bq[this.eQ] == 48) {
                                                                    this.battleData[21] = 1;
                                                                    this.bp[this.eQ] = 47;
                                                                    unitID = 0;
                                                                    while (unitID < getLength(this.unitBuyStats)) {
                                                                        if (this.unitBuyStats[unitID][15] == this.eQ && this.unitBuyStats[unitID][0] == this.battleData[31] && this.unitBuyStats[unitID][1] == 0) {
                                                                            this.battleData[32] = unitID;
                                                                        }
                                                                        unitID++;
                                                                    }
                                                                }
                                                            } else {
                                                                this.battleData[31] = -1;
                                                            }
                                                            int[] iArr109 = this.br[this.eQ];
                                                            int i147 = this.battleData[0];
                                                            iArr109[i147] = iArr109[i147] + 1;
                                                            if (this.br[this.eQ][this.battleData[0]] > 999) {
                                                                this.br[this.eQ][this.battleData[0]] = 999;
                                                            }
                                                        } else {
                                                            this.battleData[14] = 4;
                                                            int i148 = this.battleData[30];
                                                            this.battleData[22] = (30000 - i148) * (30000 - i148);
                                                            this.battleData[23] = 0;
                                                            if (this.aU < this.battleData[22]) {
                                                                this.aU = this.battleData[22];
                                                                this.battleData[23] = 1;
                                                            }
                                                            if (this.aW < this.battleData[22]) {
                                                                this.aW = this.battleData[22];
                                                            }
                                                            aSave();
                                                        }
                                                    }
                                                } else if (unitType == 1) {
                                                    this.gameStats1[0] = 0;
                                                    int i149 = 0;
                                                    while (true) {
                                                        if (i149 < 10) {
                                                            if (this.eQ == i149 && this.battleData[0] == 47) {
                                                                this.gameStats1[0] = i149;
                                                            } else {
                                                                i149++;
                                                            }
                                                        }
                                                        else {
                                                            break;
                                                        }
                                                    }
                                                    if (this.gameStats1[0] >= 1) {
                                                        int[] iArr110 = this.gameStats1;
                                                        iArr110[0] = iArr110[0] + 1;
                                                    }
                                                    if (cn[((this.battleData[0] + this.gameStats1[0]) * 3) + 1] > 0 && cn[((this.battleData[0] + this.gameStats1[0]) * 3) + 1] <= 99 && i136 > (i = (this.unitBattleStats[unitType][unitID][7] * cn[((this.battleData[0] + this.gameStats1[0]) * 3) + 1]) / 100) && this.unitBattleStats[unitType][unitID][8] <= i) {
                                                        this.cj[0] = 1;
                                                        this.cj[1] = 0;
                                                        this.cj[2] = 45;
                                                        this.cj[3] = cn[((this.battleData[0] + this.gameStats1[0]) * 3) + 2];
                                                        this.cj[4] = 1;
                                                    }
                                                }
                                            }
                                            unitID++;
                                        }
                                    }
                                    if (this.battleData[14] == 0) {
                                        if (isUnitHit) {
                                            int randomHit = aMath.rand(2);
                                            if (randomHit == 0) {
                                                aSound.getInstance().play(SoundType.HIT_1);
                                            }
                                            else {
                                                aSound.getInstance().play(SoundType.HIT_2);
                                            }
                                        } else if (isUnitHit) {
                                            aSound.getInstance().play(SoundType.BASE_HIT);
                                        }
                                        for (int slotID = 0; slotID < 10; slotID++) {
                                            if (this.rechargeTimes[slotID] > 0) {
                                                this.rechargeTimes[slotID] -= 1;
                                                if (this.rechargeTimes[slotID] == 0) {
                                                    aSound.getInstance().play(SoundType.CAT_RECHARGE);
                                                }
                                            }
                                        }
                                        int[] iArr111 = this.battleData;
                                        iArr111[10] = iArr111[10] + this.battleData[8];
                                        if (this.battleData[10] > this.battleData[9]) {
                                            this.battleData[10] = this.battleData[9];
                                        }
                                        if (this.unitBattleStats[0][0][12] > 0) {
                                            this.unitBattleStats[0][0][12] -= 1;
                                            if (this.unitBattleStats[0][0][12] == 0) {
                                                aSound.getInstance().play(SoundType.CANNON_RECHARGE);
                                            }
                                        }
                                    }
                                    if (this.battleData[25] > 0) {
                                        this.battleData[25] -= 1;
                                    }
                                    for (int i151 = 0; i151 < getLength(this.eB); i151++) {
                                        for (int i152 = 0; i152 < getLength(this.eB[i151]); i152++) {
                                            if (this.eB[i151][i152][0] > 0) {
                                                this.eB[i151][i152][0]  -= 1;
                                            }
                                        }
                                    }
                                    for (int i153 = 0; i153 < getLength(this.bS); i153++) {
                                        for (int i154 = 0; i154 < getLength(this.bS[i153]); i154++) {
                                            if (this.bS[i153][i154][0] > 0) {
                                                this.bS[i153][i154][0] -=1;
                                            }
                                        }
                                    }
                                }
                            }
                            if (this.bV[4] == 2) {
                                for (int i155 = 0; i155 < getLength(this.cc); i155++) {
                                    int[] iArr112 = this.cc[i155];
                                    iArr112[2] = iArr112[2] + this.cc[i155][3];
                                    if (this.cc[i155][2] >= 400) {
                                        this.cc[i155][0] = ((i155 * 192) + aMath.rand(192)) % ((this.bV[0] / 10) + (this.excessWidth * 4));
                                        this.cc[i155][1] = aMath.rand(((100 - this.battleData[28]) * 20) + 200) - ((100 - this.battleData[28]) * 20);
                                        this.cc[i155][2] = 0;
                                        this.cc[i155][3] = aMath.rand(20) + 5;
                                        this.cc[i155][4] = aMath.rand(7);
                                    }
                                }
                            } else if (this.bV[4] == 3) {
                                for (int i156 = 0; i156 < getLength(this.ce); i156++) {
                                    this.ce[i156][0] += (int) (aMath.cos(this.ce[i156][2]) * this.ce[i156][3]);
                                    this.ce[i156][0] = (this.ce[i156][0] + ((this.bV[0] * 10) + ((this.excessWidth * 100) * 4))) % ((this.bV[0] * 10) + ((this.excessWidth * 100) * 4));
                                    this.ce[i156][1] += (int) (aMath.sin(this.ce[i156][2]) * this.ce[i156][3]);
                                    if (this.ce[i156][1] >= 66000 + ((640 - (((100 - this.battleData[28]) * 120) / 100)) * 100)) {
                                        this.ce[i156][1] = -((100 - this.battleData[28]) * 2000);
                                        this.ce[i156][2] = 175 - aMath.rand(85);
                                        this.ce[i156][3] = aMath.rand(600) + 200;
                                    }
                                }
                            }
                            int[] iArr113 = this.fd;
                            iArr113[0] = iArr113[0] + 1;
                            int[] iArr114 = this.fc;
                            iArr114[0] = iArr114[0] + 1;
                            if (this.fc[0] == 3) {
                                this.fc[1] = 1;
                            } else if (this.fc[0] >= 6) {
                                this.fc[0] = 0;
                                this.fc[1] = 0;
                            }
                            if (this.cj[0] == 0) {
                                this.cj[0] = 0;
                                this.cj[1] = 0;
                                this.cj[2] = 0;
                                this.cj[3] = -1;
                            } else if (this.cj[0] == 1) {
                                int[] iArr115 = this.cj;
                                iArr115[1] = iArr115[1] + 1;
                                if (this.cj[1] == this.cj[2]) {
                                    aSound.getInstance().stop(-1);
                                    if (this.cj[3] != -1) {
                                        aSound.getInstance().play(this.cj[3]);
                                    }
                                    this.cj[0] = 0;
                                    this.cj[1] = 0;
                                    this.cj[2] = 0;
                                    this.cj[3] = -1;
                                } else
                                    aSound.getInstance().setVolume(Math.max(((this.cj[2] - this.cj[1]) * 100) / this.cj[2], 0));
                            }
                            float[] fArr4 = this.hb;
                            fArr4[0] = fArr4[0] + 0.5f;
                            float[] fArr5 = this.hb;
                            fArr5[2] = fArr5[2] + 0.5f;
                        } else if (this.ee && !this.eb) {
                            float[] fArr6 = this.hb;
                            fArr6[2] = fArr6[2] + 0.5f;
                            if (this.fC[1] >= 1) {
                                int[] iArr116 = this.fC;
                                iArr116[1] = iArr116[1] + 1;
                                if (this.fC[1] > getLength(dv) - 1) {
                                    this.fC[1] = 0;
                                    if (MyUtility.isConnected()) {
                                        this.t = true;
                                        MyUtility.getInstance().addProgressDialog(MyUtility.getString("connecting"));
                                        MyUtility.getInstance().addAlertAppliPage("facebook", this.r);
                                    } else {
                                        MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                                    }
                                }
                            } else if (this.fC[2] >= 1) {
                                int[] iArr117 = this.fC;
                                iArr117[2] = iArr117[2] + 1;
                                if (this.fC[2] > getLength(dv) - 1) {
                                    this.fC[2] = 0;
                                    //if (aFacebook.getInstance().e()) {
                                    //    aFacebook.getInstance().d();
                                    //} else {
                                    //    aFacebook.getInstance().c();
                                    //}
                                }
                            } else if (this.fC[3] >= 1) {
                                int[] iArr118 = this.fC;
                                iArr118[3] = iArr118[3] + 1;
                                if (this.fC[3] > getLength(dv) - 1) {
                                    this.fC[3] = 0;
                                    if (aSound.getInstance().isMutedBGM()) {
                                        aSound.getInstance().muteBGM(false);
                                        aSound.getInstance().reloadSounds();
                                    } else {
                                        aSound.getInstance().muteBGM(true);
                                    }
                                }
                            } else if (this.fC[4] >= 1) {
                                int[] iArr119 = this.fC;
                                iArr119[4] = iArr119[4] + 1;
                                if (this.fC[4] > getLength(dv) - 1) {
                                    this.fC[4] = 0;
                                    if (aSound.getInstance().isMutedSE()) {
                                        aSound.getInstance().muteSE(false);
                                    } else {
                                        aSound.getInstance().muteSE(true);
                                    }
                                }
                            } else if (this.fC[5] >= 1) {
                                int[] iArr120 = this.fC;
                                iArr120[5] = iArr120[5] + 1;
                                if (this.fC[5] > getLength(dv) - 1) {
                                    this.fC[5] = 0;
                                    this.ee = false;
                                    this.ef = false;
                                    if (this.cj[0] == 0) {
                                        aSound.getInstance().setVolume(100);
                                    }
                                }
                            } else if (this.fC[6] >= 1) {
                                int[] iArr121 = this.fC;
                                iArr121[6] = iArr121[6] + 1;
                                if (this.fC[6] > getLength(dv) - 1) {
                                    this.fC[6] = 0;
                                    this.ef = true;
                                    aSound.getInstance().play(SoundType.POPUP);
                                }
                            } else if (this.fC[7] >= 1) {
                                int[] iArr122 = this.fC;
                                iArr122[7] = iArr122[7] + 1;
                                if (this.fC[7] > getLength(dv) - 1) {
                                    this.fC[7] = 0;
                                    screenTransition();
                                    this.j = true;
                                    this.menuType = 2;
                                    return;
                                }
                            } else if (this.fC[8] >= 1) {
                                int[] iArr123 = this.fC;
                                iArr123[8] = iArr123[8] + 1;
                                if (this.fC[8] > getLength(dv) - 1) {
                                    this.fC[8] = 0;
                                    this.ee = false;
                                    this.ef = false;
                                    if (this.cj[0] == 0) {
                                        aSound.getInstance().setVolume(100);
                                    }
                                    if (this.dH <= 47) {
                                        screenTransition();
                                        this.ha[0] = true;
                                        aSound.getInstance().play(SoundType.BATTLE_34);
                                        int i157 = this.cj[0];
                                        return;
                                    }
                                }
                            } else if (this.fC[9] >= 1) {
                                int[] iArr124 = this.fC;
                                iArr124[9] = iArr124[9] + 1;
                                if (this.fC[9] > getLength(dv) - 1) {
                                    this.fC[9] = 0;
                                }
                            } else if (this.fC[10] >= 1) {
                                int[] iArr125 = this.fC;
                                iArr125[10] = iArr125[10] + 1;
                                if (this.fC[10] > getLength(dv) - 1) {
                                    this.fC[10] = 0;
                                    this.eb = true;
                                    this.ed = 1;
                                }
                            } else if (this.fC[11] >= 1) {
                                int[] iArr126 = this.fC;
                                iArr126[11] = iArr126[11] + 1;
                                if (this.fC[11] > getLength(dv) - 1) {
                                    this.fC[11] = 0;
                                    this.ef = false;
                                }
                            } else if (this.fC[12] >= 1) {
                                int[] iArr127 = this.fC;
                                iArr127[12] = iArr127[12] + 1;
                                if (this.fC[12] > getLength(dv) - 1) {
                                    this.fC[12] = 0;
                                    if (MyUtility.isConnected()) {
                                        this.o = true;
                                        this.t = true;
                                        MyUtility.getInstance().addProgressDialog(MyUtility.getString("connecting"));
                                        MyUtility.getInstance().addAlertAppliPage("facebook", this.r);
                                    } else {
                                        MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                                    }
                                }
                            } else {
                                if (this.ef) {
                                    if (!isPointerDown() || !isTouching(this.fB[10][0], this.fB[10][1], this.fB[10][2], this.fB[10][3])) {
                                        this.gp[10] = false;
                                    } else if (!this.gp[10]) {
                                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                        this.gp[10] = true;
                                    }
                                    if (!isPointerDown() || !isTouching(this.fB[11][0], this.fB[11][1], this.fB[11][2], this.fB[11][3])) {
                                        this.gp[11] = false;
                                    } else if (!this.gp[11]) {
                                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                        this.gp[11] = true;
                                    }
                                } else {
                                    for (int i158 = 0; i158 < 10; i158++) {
                                        if (i158 != 0 && i158 != 2 && i158 != 5 && ((i158 != 8 || (this.bd != 0 && this.dH < 48)) && i158 != 9)) {
                                            if (!isPointerDown() || !isTouching(this.fB[i158][0], this.fB[i158][1], this.fB[i158][2], this.fB[i158][3])) {
                                                this.gp[i158] = false;
                                            } else if (!this.gp[i158]) {
                                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                                this.gp[i158] = true;
                                            }
                                        }
                                    }
                                }
                                if (!isPointerDown() || !isTouching(this.fB[5][0], this.fB[5][1], this.fB[5][2], this.fB[5][3])) {
                                    this.gp[5] = false;
                                } else if (!this.gp[5]) {
                                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                    this.gp[5] = true;
                                }
                                if (this.ef) {
                                    if (isPointerUp() && isTouching(this.fB[10][0], this.fB[10][1], this.fB[10][2], this.fB[10][3])) {
                                        int[] iArr128 = this.fC;
                                        iArr128[10] = iArr128[10] + 1;
                                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                    } else if (isPointerUp() && isTouching(this.fB[11][0], this.fB[11][1], this.fB[11][2], this.fB[11][3])) {
                                        int[] iArr129 = this.fC;
                                        iArr129[11] = iArr129[11] + 1;
                                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                    } else if (isPointerUp() && isTouching(this.fB[5][0], this.fB[5][1], this.fB[5][2], this.fB[5][3])) {
                                        int[] iArr130 = this.fC;
                                        iArr130[5] = iArr130[5] + 1;
                                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                    } else if (isBackPressed()) {
                                        if (this.ef) {
                                            this.ef = false;
                                        } else {
                                            this.ee = false;
                                            this.ef = false;
                                            if (this.cj[0] == 0) {
                                                aSound.getInstance().setVolume(100);
                                            }
                                        }
                                    }
                                } else if ((!isPointerUp() || !isTouching(this.fB[0][0], this.fB[0][1], this.fB[0][2], this.fB[0][3])) && (!isPointerUp() || !isTouching(this.fB[1][0], this.fB[1][1], this.fB[1][2], this.fB[1][3]))) {
                                    if (isPointerUp() && isTouching(this.fB[2][0], this.fB[2][1], this.fB[2][2], this.fB[2][3])) {
                                        int[] iArr131 = this.fC;
                                        iArr131[2] = iArr131[2] + 1;
                                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                    } else if (isPointerUp() && isTouching(this.fB[3][0], this.fB[3][1], this.fB[3][2], this.fB[3][3])) {
                                        int[] iArr132 = this.fC;
                                        iArr132[3] = iArr132[3] + 1;
                                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                    } else if (isPointerUp() && isTouching(this.fB[4][0], this.fB[4][1], this.fB[4][2], this.fB[4][3])) {
                                        int[] iArr133 = this.fC;
                                        iArr133[4] = iArr133[4] + 1;
                                    } else if (isPointerUp() && isTouching(this.fB[6][0], this.fB[6][1], this.fB[6][2], this.fB[6][3])) {
                                        int[] iArr134 = this.fC;
                                        iArr134[6] = iArr134[6] + 1;
                                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                    } else if (isPointerUp() && isTouching(this.fB[7][0], this.fB[7][1], this.fB[7][2], this.fB[7][3])) {
                                        int[] iArr135 = this.fC;
                                        iArr135[7] = iArr135[7] + 1;
                                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                    } else if (isPointerUp() && isTouching(this.fB[12][0], this.fB[12][1], this.fB[12][2], this.fB[12][3])) {
                                        int[] iArr136 = this.fC;
                                        iArr136[12] = iArr136[12] + 1;
                                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                    } else if (isPointerUp() && isTouching(this.fB[8][0], this.fB[8][1], this.fB[8][2], this.fB[8][3])) {
                                        if (this.dH <= 47 && this.bd >= 1) {
                                            int[] iArr137 = this.fC;
                                            iArr137[8] = iArr137[8] + 1;
                                            this.gA[1] = 0;
                                            this.dV = false;
                                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                        }
                                    } else if (isPointerUp() && isTouching(this.fB[5][0], this.fB[5][1], this.fB[5][2], this.fB[5][3])) {
                                        int[] iArr138 = this.fC;
                                        iArr138[5] = iArr138[5] + 1;
                                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                    } else if (isBackPressed()) {
                                        if (this.ef) {
                                            this.ef = false;
                                        } else {
                                            this.ee = false;
                                            this.ef = false;
                                            if (this.cj[0] == 0) {
                                                aSound.getInstance().setVolume(100);
                                            }
                                        }
                                    }
                                }
                            }
                        } else if (this.ha[0] && !q()) {
                            return;
                        }
                        int[] iArr139 = this.blinkFrame;
                        iArr139[5] = iArr139[5] + 1;
                        if (!g(this.ed)) {
                            return;
                        }
                        this.gA[1] -= 1;
                        if (this.gA[1] <= 0) {
                            this.gA[1] = 0;
                            break;
                        }
                        break;
                }
            }
            if (this.gU) {
                G();
            } else {
                x();
            }
            screenTransition();
        }
    }

    void loadUnitStats(int catID) {
        // if (!aString.isEqual(aAssetTextStream.getHash(String.format("unit%03d.csv", catID + 1)), new String[]{"c1270af3244e3bcbee86ee907b6620d6", "5e2d37c28d9e40a9f8782a8e27795f3d", "460611b2de02427382067dcc3d0cc814", "402c64570c5e2c4e8215e4931cf977b2", "b839b84eae1717435ca8f3f2e7e1a854", "4f51f1ddc6d279b46256015a8bf80a4c", "988ce06e07fc9a37a3e5c15f0a28524e", "b9dbe2183b5499818190caa0b9c3f71c", "9b04a3c0dd286686a75278299ffd1a3e", "a31375f8f95246ac8216e68036811d2b", "3d6cb7f95624b4bb8ad7fa2550778882", "aaa281d59c8d7df53f507048492a6cc0", "d96417e8192416632355f20e812aa7bd", "cdc09e9ee36c50c6c4eba2dcb3a3333f", "fb7ecb5101a43146354e1cc05742db04", "d1cb69d162b974483778f35c6f9b6b95", "06259e2354febd4a8f2ec5a790b4cb4d", "ae541a88640505aa18dba6b13dcacf70", "defde8fb3562f29a1439db6904cb1f4d", "09cd101bfb8fd4932177c0a55fc0fe16", "210e495fbe7f5b5df2d08f6754b32e28", "68954abe7e5c084b14876b38a4bcb463", "1550f363ff89f2d491beb020dbc8ac8a", "d1cb69d162b974483778f35c6f9b6b95", "9596d33e9868e98d6f2ffd76a8efac2f", "cc0a57073a5038c5017d11f7077ad570"}[catID])) {
        //     this.D = 0;
        //     setScene(SceneType.ERROR);
        //     return;
        // }
        aResourceFileStream aresourcefilestream = new aResourceFileStream();
        aresourcefilestream.openRead(String.format("unit%03d.csv", catID + 1));
        for (int formID = 0; formID < getLength(this.unitStats[catID + 2]); formID++) {
            aresourcefilestream.readLine();
            for (int statID = 0; statID < getLength(this.unitStats[catID + 2][formID]); statID++) {
                this.unitStats[catID + 2][formID][statID] = 0;
                this.unitStats[catID + 2][formID][statID] = aresourcefilestream.getInt(statID);
            }
            this.unitStats[catID + 2][formID][2] = (this.unitStats[catID + 2][formID][2] * 4) / 2;
            this.unitStats[catID + 2][formID][4] = this.unitStats[catID + 2][formID][4] * 2;
            this.unitStats[catID + 2][formID][5] = this.unitStats[catID + 2][formID][5] * 4;
            this.unitStats[catID + 2][formID][7] = this.unitStats[catID + 2][formID][7] * 2;
            this.unitStats[catID + 2][formID][9] = this.unitStats[catID + 2][formID][9] * 4;
        }
        for (int formID = 0; formID < getLength(this.unitStats[catID + 2]); formID++) {
            int[] stats = this.unitStats[catID + 2][formID];
            stats[6] = stats[6] * 100;
        }
        aresourcefilestream.close();
    }

    void e(aTextureRenderer atexturerenderer) {
        if (this.battleData[15] >= 1) {
            int i = this.battleData[16];
            if (this.battleData[15] != 1) {
                i = getLength(cs) - 1;
            } else if (i > getLength(cs) - 1) {
                i = getLength(cs) - 1;
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[19], (getWidth() / 2) - 152, cs[i] - 50, 3);
        }
        if (this.battleData[15] >= 2) {
            atexturerenderer.setBlendMode(3);
            atexturerenderer.setColor(40, 40, 77);
            atexturerenderer.drawRectangle(0, 315, getWidth(), 55);
            atexturerenderer.setBlendMode(0);
            int i2 = 10;
            int i3 = 0;
            while (i2 <= this.battleData[22]) {
                i2 *= 10;
                i3--;
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[19], ((((getWidth() / 2) - 14) - 144) + (i3 * 14)) - 20, 324, 5);
            int i4 = this.battleData[23];
            for (int i5 = i2 / 10; i5 >= 1; i5 /= 10) {
                atexturerenderer.drawScaledImagef(this.uiTextures[4], ((getWidth() / 2) - 14) + (i3 * 14), 321, (this.battleData[22] / i5) % 10);
                i3 += 2;
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[19], (i3 * 16) + ((getWidth() / 2) - 16) + 20, 323, 4);
        }
    }

    @Override // jp.co.ponos.battlecats.Game
    public void screenTransition() {
        int i;
        aTextureRenderer.getInstance().clearScreen();
        aTextureRenderer texRenderer = aTextureRenderer.getInstance();
        texRenderer.resetProjection();
        texRenderer.removeAnimTransformer();
        texRenderer.setOffset(0, this.eZ);
        switch (getScene2Type()) {
            case ERROR: // error
                texRenderer.setColor(0, 0, 0);
                texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                break;
            case OPENING: // opening
                texRenderer.setColor(0, 0, 0);
                texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                texRenderer.setColor(0, 0, 0);
                texRenderer.setImageAlpha(255);
                this.openingModel[0].setAction(this.openingAnim[0], this.blinkFrame[0]);
                this.openingModel[0].getBasePart().setScale((this.openingModel[0].getScaleUnit() * getWidth()) / 960, (int) (this.openingModel[0].getScaleUnit() * (getWidth() / 960.0f)));
                texRenderer.setTextures(this.openingModel[0], 0, (int) (-((((getWidth() / 960) * 720) - 640) / 2)));
                int i2 = 0;
                while (true) {
                    int i3 = i2;
                    if (i3 >= 50) {
                        texRenderer.setColor(255, 255, 255);
                        texRenderer.setAlpha(255);
                        texRenderer.setColor(255, 255, 255);
                        for (int i4 = 0; i4 < 73; i4++) {
                            texRenderer.drawScaledImage(this.textTextures[i4], getWidth() / 2, (getHeight() + (i4 * 40)) - this.dy, 1);
                        }
                        int[] iArr = this.dB;
                        this.dB[1] = 0;
                        iArr[0] = 0;
                        int[] iArr2 = this.dB;
                        int[] iArr3 = this.dB;
                        int ah = getWidth();
                        iArr3[3] = ah;
                        iArr2[2] = ah;
                        int[] iArr4 = this.dC;
                        this.dC[3] = 100;
                        iArr4[0] = 100;
                        int[] iArr5 = this.dC;
                        this.dC[2] = 300;
                        iArr5[1] = 300;
                        int[] iArr6 = this.dD;
                        this.dD[3] = -16777216;
                        iArr6[0] = -16777216;
                        int[] iArr7 = this.dD;
                        this.dD[2] = 0;
                        iArr7[1] = 0;
                        texRenderer.a(this.dB, this.dC, this.dD, 4);
                        texRenderer.setColor(0, 0, 0);
                        texRenderer.setAlpha(255);
                        texRenderer.drawRectangle(0, 0 - this.eZ, getWidth(), this.eZ + 100);
                        if (this.dz == 0) {
                            texRenderer.setBlendMode(3);
                            texRenderer.setColor((this.dA * 255) / 100, (this.dA * 255) / 100, (this.dA * 255) / 100);
                            texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                            texRenderer.setBlendMode(0);
                        }
                        texRenderer.drawScaledImage(this.settingsMenuTexture[2], (788 - (dv[this.fx[0]] / 2)) + this.excessWidth, (564 - (dv[this.fx[0]] / 2)) + this.eZ, dv[this.fx[0]] + 168, dv[this.fx[0]] + 72, 0);
                        texRenderer.drawScaledImage(this.uiTextures[2], (797 - (dv[this.fx[0]] / 2)) + this.excessWidth, (572 - (dv[this.fx[0]] / 2)) + this.eZ, dv[this.fx[0]] + 150, dv[this.fx[0]] + 55, 10);
                        if (isPointerDown() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3]) && this.dz <= 1 && !this.eb) {
                            texRenderer.drawScaledImage(this.settingsMenuTexture[2], this.excessWidth + 788, this.eZ + 564, 168, 72, ((this.blinkFrame[5] % 4) / 2) + 1);
                        }
                        if (this.dz == 2) {
                            texRenderer.setBlendMode(3);
                            texRenderer.setColor(255 - ((this.dA * 159) / 100), 255 - ((this.dA * 159) / 100), 255 - ((this.dA * 159) / 100));
                            texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                            texRenderer.setBlendMode(0);
                        }
                        a(texRenderer, this.ed);
                        break;
                    } else {
                        for (int i5 = 0; i5 < 8; i5++) {
                            this.ch[i3][0][i5] = (int) (((this.cg[i3][0][i5] + (this.ci[i3][2] * aMath.cos((this.ci[i3][0] * this.ci[i3][3]) % 360))) / 100.0f) + (8.0f * aMath.cos(i5 * 45)));
                            this.ch[i3][1][i5] = (int) ((this.cg[i3][1][i5] / 100) + (8.0f * aMath.sin(i5 * 45)));
                        }
                        texRenderer.setBlendMode(1);
                        texRenderer.setColor(255, 0, 0, 35);
                        texRenderer.drawVertices(this.ch[i3][0], this.ch[i3][1], 8);
                        texRenderer.setBlendMode(0);
                        i2 = i3 + 1;
                    }
                }
                break;
            case ENDING: // ending
                texRenderer.setColor(100, 100, 100);
                texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                float ah2 = (((getWidth() / 960) * 720) - 640) / 2;
                if (this.blinkFrame[1] % 16 == 0 || this.blinkFrame[1] % 16 == 1 || this.blinkFrame[1] % 16 == 2 || this.blinkFrame[1] % 16 == 3) {
                    texRenderer.drawScaledImage(this.uiTextures[0], 0, (int) (-ah2), getWidth(), (int) (720.0f * (getWidth() / 960.0f)), 0);
                } else if (this.blinkFrame[1] % 16 == 4 || this.blinkFrame[1] % 16 == 5 || this.blinkFrame[1] % 16 == 6 || this.blinkFrame[1] % 16 == 7) {
                    texRenderer.drawScaledImage(this.uiTextures[0], 0, (int) (-ah2), getWidth(), (int) (720.0f * (getWidth() / 960.0f)), 0);
                    texRenderer.setImageAlpha(127);
                    texRenderer.drawScaledImage(this.uiTextures[3], 0, (int) (-ah2), getWidth(), (int) (720.0f * (getWidth() / 960.0f)), 0);
                    texRenderer.setImageAlpha(255);
                } else if (this.blinkFrame[1] % 16 == 8 || this.blinkFrame[1] % 16 == 9 || this.blinkFrame[1] % 16 == 10 || this.blinkFrame[1] % 16 == 11) {
                    texRenderer.drawScaledImage(this.uiTextures[3], 0, (int) (-ah2), getWidth(), (int) (720.0f * (getWidth() / 960.0f)), 0);
                } else {
                    texRenderer.drawScaledImage(this.uiTextures[3], 0, (int) (-ah2), getWidth(), (int) (720.0f * (getWidth() / 960.0f)), 0);
                    texRenderer.setImageAlpha(127);
                    texRenderer.drawScaledImage(this.uiTextures[0], 0, (int) (-ah2), getWidth(), (int) (720.0f * (getWidth() / 960.0f)), 0);
                    texRenderer.setImageAlpha(255);
                }
                int i6 = 0;
                while (true) {
                    int i7 = i6;
                    if (i7 >= 50) {
                        texRenderer.setOrientation(1);
                        texRenderer.setImageColor(100, 100, 100);
                        texRenderer.drawScaledImage(this.uiTextures[1], -58, this.eZ + 379, 355, 355, 0);
                        texRenderer.setImageColor(255, 255, 255);
                        texRenderer.setOrientation(0);
                        texRenderer.setColor(0, 0, 0);
                        texRenderer.setAlpha(255 - this.blinkFrame[3]);
                        texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                        if (this.dE >= 1) {
                            texRenderer.setColor(255, 255, 255);
                            for (int i8 = 0; i8 < getLength(this.endingText); i8++) {
                                if (aString.isEqual(this.endingText[i8], "＠")) {
                                    texRenderer.drawScaledImagef(this.uiTextures[3], (this.excessWidth / 2) + 0, (getHeight() + (i8 * 40)) - this.dG, 1);
                                } else {
                                    texRenderer.drawScaledImage(this.textTextures[i8], getWidth() / 2, (getHeight() + (i8 * 40)) - this.dG, 1);
                                }
                            }
                        }
                        if (this.bj >= 1 || this.eg == 2) {
                            texRenderer.drawScaledImage(this.settingsMenuTexture[2], (788 - (dv[this.fx[0]] / 2)) + this.excessWidth, (564 - (dv[this.fx[0]] / 2)) + this.eZ, dv[this.fx[0]] + 168, dv[this.fx[0]] + 72, 0);
                            texRenderer.drawScaledImage(this.uiTextures[2], (797 - (dv[this.fx[0]] / 2)) + this.excessWidth, (572 - (dv[this.fx[0]] / 2)) + this.eZ, dv[this.fx[0]] + 150, dv[this.fx[0]] + 55, 10);
                            if (this.dE <= 1 && !this.eE[0] && isPointerDown() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3]) && !this.eb) {
                                texRenderer.drawScaledImage(this.settingsMenuTexture[2], this.excessWidth + 788, this.eZ + 564, 168, 72, ((this.blinkFrame[5] % 4) / 2) + 1);
                            }
                        }
                        if ((this.dE == 1 || this.dE == 2) && this.eE[0]) {
                            texRenderer.setColor(0, 0, 0);
                            texRenderer.setAlpha(this.blinkFrame[0]);
                            texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                        }
                        if (this.dE == 3) {
                            texRenderer.setColor(0, 0, 0);
                            texRenderer.setAlpha(this.dF);
                            texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                        }
                        if (this.dE >= 4) {
                            texRenderer.setColor(0, 0, 0);
                            texRenderer.setAlpha(255);
                            texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                        }
                        a(texRenderer, this.ed);
                        break;
                    } else {
                        for (int i9 = 0; i9 < 8; i9++) {
                            this.ch[i7][0][i9] = (int) (((this.cg[i7][0][i9] + (this.ci[i7][2] * aMath.cos((this.ci[i7][0] * this.ci[i7][3]) % 360))) / 100.0f) + (8.0f * aMath.cos(i9 * 45)));
                            this.ch[i7][1][i9] = (int) ((this.cg[i7][1][i9] / 100) + (8.0f * aMath.sin(i9 * 45)));
                        }
                        texRenderer.setBlendMode(1);
                        texRenderer.setColor(255, 0, 0, 35);
                        texRenderer.drawVertices(this.ch[i7][0], this.ch[i7][1], 8);
                        texRenderer.setBlendMode(0);
                        i6 = i7 + 1;
                    }
                }
                break;
            case MAIN: // main menu
                texRenderer.setColor(255, 255, 255);
                texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                switch (getScreenType()) {
                    case TITLE:
                        titleDraw(texRenderer);
                        break;
                    case CAT_BASE:
                        catBaseDraw(texRenderer);
                        break;
                    case MAP:
                        mapDraw(texRenderer);
                        break;
                    case POWER_UP:
                        powerUpDraw(texRenderer);
                        break;
                    case EQUIP:
                        equipDraw(texRenderer);
                        break;
                    case TREASURE:
                        treasureDraw(texRenderer);
                        break;
                    case ENEMY_GUIDE:
                        enemyGuideDraw(texRenderer);
                        break;
                    case MAP2:
                        map2Draw(texRenderer);
                        break;
                    case ITEM_SHOP:
                        itemShopDraw(texRenderer);
                        break;
                    case STAMP:
                        stampDraw(texRenderer);
                        break;
                    case LEGEND:
                        legendDraw(texRenderer);
                        break;
                }
                a(texRenderer, this.ed);
                break;
            case BATTLE: // battle
                if (this.hl == 0) {
                    for (int i10 = 0; i10 < 3; i10++) {
                        if (this.hc[i10 + 7] == 32) {
                            texRenderer.setOffset(0, this.eZ - 40);
                        } else if (this.hc[i10 + 7] == 34) {
                            texRenderer.setOffset(0, this.eZ + 20);
                        } else if (this.hc[i10 + 7] == 36) {
                            texRenderer.setOffset(0, this.eZ - 15);
                        } else if (this.hc[i10 + 7] == 38) {
                            texRenderer.setOffset(0, this.eZ + 10);
                        } else if (this.hc[i10 + 7] == 40) {
                            texRenderer.setOffset(0, this.eZ - 10);
                        } else if (this.hc[i10 + 7] == 42) {
                            texRenderer.setOffset(0, this.eZ + 0);
                        } else if (this.hc[i10 + 7] == 44) {
                            texRenderer.setOffset(0, this.eZ - 10);
                        } else if (this.hc[i10 + 7] == 46) {
                            texRenderer.setOffset(0, this.eZ + 0);
                        } else if (this.hc[i10 + 7] == 48) {
                            texRenderer.setOffset(0, this.eZ - 4);
                        } else if (this.hc[i10 + 7] == 49) {
                            texRenderer.setOffset(0, this.eZ + 0);
                        } else if (this.hc[i10 + 7] == 50) {
                            texRenderer.setOffset(0, this.eZ - 6);
                        } else if (this.hc[i10 + 7] == 51) {
                            texRenderer.setOffset(0, this.eZ + 0);
                        } else if (this.hc[i10 + 7] == 52) {
                            texRenderer.setOffset(0, this.eZ - 4);
                        } else if (this.hc[i10 + 7] == 53) {
                            texRenderer.setOffset(0, this.eZ + 0);
                        } else if (this.hc[i10 + 7] == 54) {
                            texRenderer.setOffset(0, this.eZ - 2);
                        } else if (this.hc[i10 + 7] == 55) {
                            texRenderer.setOffset(0, this.eZ + 0);
                        } else if (this.hc[i10 + 7] == 56) {
                            texRenderer.setOffset(0, this.eZ - 1);
                        } else if (this.hc[i10 + 7] >= 57) {
                            texRenderer.setOffset(0, this.eZ + 0);
                        }
                    }
                } else {
                    texRenderer.setOffset(0, this.eZ + 0);
                }
                texRenderer.setAnimTransformer(this.a2);
                this.a2.translate((this.excessWidth / 2) + 0, 520.0f);
                this.b2.scale(this.zoomLevel / 100, this.zoomLevel / 100);
                this.a2.merge(this.b2);
                this.b2.translate(-((this.excessWidth / 2) + 0), -520.0f);
                this.a2.merge(this.b2);
                texRenderer.setColor(0, 0, 0);
                texRenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                texRenderer.removeAnimTransformer();
                if (this.bV[4] == 0) {
                    texRenderer.setColor(136, 218, 254);
                    texRenderer.drawRectangle(0, -this.eZ, getWidth(), 520);
                } else if (this.bV[4] == 1) {
                    texRenderer.setColor(255, 149, 92);
                    texRenderer.drawRectangle(0, -this.eZ, getWidth(), 520);
                } else if (this.bV[4] == 2) {
                    texRenderer.setColor(31, 41, 153);
                    texRenderer.drawRectangle(0, -this.eZ, getWidth(), 520);
                } else if (this.bV[4] == 3) {
                    texRenderer.setColor(98, 207, 255);
                    texRenderer.drawRectangle(0, -this.eZ, getWidth(), 520);
                } else {
                    texRenderer.drawScaledImage(this.uiTextures[0], 0, -this.eZ, getWidth(), 520, 1);
                }
                if (this.bV[4] == 0) {
                    texRenderer.setColor(135, 98, 59);
                    texRenderer.drawRectangle(0, 520, getWidth(), this.eZ + 200 + 40);
                } else if (this.bV[4] == 1) {
                    texRenderer.setColor(137, 73, 6);
                    texRenderer.drawRectangle(0, 520, getWidth(), this.eZ + 200 + 40);
                } else if (this.bV[4] == 2) {
                    texRenderer.setColor(93, 77, 60);
                    texRenderer.drawRectangle(0, 520, getWidth(), this.eZ + 200 + 40);
                } else if (this.bV[4] == 3) {
                    texRenderer.setColor(135, 98, 59);
                    texRenderer.drawRectangle(0, 520, getWidth(), this.eZ + 200 + 40);
                } else {
                    texRenderer.drawScaledImage(this.uiTextures[0], 0, 520, getWidth(), this.eZ + 200, 2);
                }
                int[] iArr8 = this.gh;
                this.gh[1] = 0;
                iArr8[0] = 0;
                int[] iArr9 = this.gh;
                int[] iArr10 = this.gh;
                int ah3 = getWidth();
                iArr10[3] = ah3;
                iArr9[2] = ah3;
                int[] iArr11 = this.gi;
                int[] iArr12 = this.gi;
                int i11 = (-this.eZ) - 40;
                iArr12[3] = i11;
                iArr11[0] = i11;
                int[] iArr13 = this.gi;
                int[] iArr14 = this.gi;
                int i12 = ((520 - this.eZ) * (100 - (this.zoomLevel / 100))) / 100;
                iArr14[2] = i12;
                iArr13[1] = i12;
                if (this.bV[4] == 0) {
                    int[] iArr15 = this.gj;
                    this.gj[3] = -13818464;
                    iArr15[0] = -13818464;
                    int[] iArr16 = this.gj;
                    this.gj[2] = 8968958;
                    iArr16[1] = 8968958;
                } else if (this.bV[4] == 1) {
                    int[] iArr17 = this.gj;
                    this.gj[3] = -45055;
                    iArr17[0] = -45055;
                    int[] iArr18 = this.gj;
                    this.gj[2] = 16749916;
                    iArr18[1] = 16749916;
                } else if (this.bV[4] == 2) {
                    int[] iArr19 = this.gj;
                    this.gj[3] = -16182973;
                    iArr19[0] = -16182973;
                    int[] iArr20 = this.gj;
                    this.gj[2] = 2042265;
                    iArr20[1] = 2042265;
                } else if (this.bV[4] == 3) {
                    int[] iArr21 = this.gj;
                    this.gj[3] = -984065;
                    iArr21[0] = -984065;
                    int[] iArr22 = this.gj;
                    this.gj[2] = 6475775;
                    iArr22[1] = 6475775;
                }
                texRenderer.a(this.gh, this.gi, this.gj, 4);
                int[] iArr23 = this.gh;
                this.gh[1] = 0;
                iArr23[0] = 0;
                int[] iArr24 = this.gh;
                int[] iArr25 = this.gh;
                int ah4 = getWidth();
                iArr25[3] = ah4;
                iArr24[2] = ah4;
                int[] iArr26 = this.gi;
                int[] iArr27 = this.gi;
                int i13 = 640 - (((100 - (this.zoomLevel / 100)) * 120) / 100);
                iArr27[3] = i13;
                iArr26[0] = i13;
                int[] iArr28 = this.gi;
                int[] iArr29 = this.gi;
                int i14 = this.eZ + 640 + 40;
                iArr29[2] = i14;
                iArr28[1] = i14;
                if (this.bV[4] == 0) {
                    int[] iArr30 = this.gj;
                    this.gj[3] = 8872454;
                    iArr30[0] = 8872454;
                    int[] iArr31 = this.gj;
                    this.gj[2] = -12508154;
                    iArr31[1] = -12508154;
                } else if (this.bV[4] == 1) {
                    int[] iArr32 = this.gj;
                    this.gj[3] = 8997126;
                    iArr32[0] = 8997126;
                    int[] iArr33 = this.gj;
                    this.gj[2] = -14478590;
                    iArr33[1] = -14478590;
                } else if (this.bV[4] == 2) {
                    int[] iArr34 = this.gj;
                    this.gj[3] = 6114620;
                    iArr34[0] = 6114620;
                    int[] iArr35 = this.gj;
                    this.gj[2] = -15199216;
                    iArr35[1] = -15199216;
                } else if (this.bV[4] == 3) {
                    int[] iArr36 = this.gj;
                    this.gj[3] = 8872507;
                    iArr36[0] = 8872507;
                    int[] iArr37 = this.gj;
                    this.gj[2] = -12508154;
                    iArr37[1] = -12508154;
                }
                texRenderer.a(this.gh, this.gi, this.gj, 4);
                texRenderer.setAnimTransformer(this.a2);
                int i15 = (1920 - ((this.battleData[5] / 10) % 960)) - ((this.excessWidth / 2) + 1920);
                texRenderer.drawScaledImage(this.uiTextures[0], i15 - 1920, 0, 960, 640, 0);
                texRenderer.drawScaledImage(this.uiTextures[0], i15 - 960, 0, 960, 640, 0);
                texRenderer.drawScaledImage(this.uiTextures[0], i15, 0, 960, 640, 0);
                texRenderer.drawScaledImage(this.uiTextures[0], i15 + 960, 0, 960, 640, 0);
                texRenderer.drawScaledImage(this.uiTextures[0], i15 + 1920, 0, 960, 640, 0);
                texRenderer.setColor(255, 255, 255);
                if (this.bV[4] == 2) {
                    for (int i16 = 0; i16 < getLength(this.cc); i16++) {
                        int i17 = this.cc[i16][2];
                        if (i17 <= 400) {
                            if (this.cc[i16][4] == 0) {
                                this.gameStats1[0] = 255;
                                this.gameStats1[1] = 255;
                                this.gameStats1[2] = 255;
                                this.gameStats1[3] = (int) (aMath.sin(i17 * 0.45f) * 255.0f);
                            } else if (this.cc[i16][4] == 1) {
                                this.gameStats1[0] = 255;
                                this.gameStats1[1] = 180;
                                this.gameStats1[2] = 180;
                                this.gameStats1[3] = (int) (aMath.sin(i17 * 0.45f) * 255.0f);
                            } else if (this.cc[i16][4] == 2) {
                                this.gameStats1[0] = 180;
                                this.gameStats1[1] = 255;
                                this.gameStats1[2] = 180;
                                this.gameStats1[3] = (int) (aMath.sin(i17 * 0.45f) * 255.0f);
                            } else if (this.cc[i16][4] == 3) {
                                this.gameStats1[0] = 180;
                                this.gameStats1[1] = 180;
                                this.gameStats1[2] = 255;
                                this.gameStats1[3] = (int) (aMath.sin(i17 * 0.45f) * 255.0f);
                            } else if (this.cc[i16][4] == 4) {
                                this.gameStats1[0] = 255;
                                this.gameStats1[1] = 255;
                                this.gameStats1[2] = 180;
                                this.gameStats1[3] = (int) (aMath.sin(i17 * 0.45f) * 255.0f);
                            } else if (this.cc[i16][4] == 5) {
                                this.gameStats1[0] = 255;
                                this.gameStats1[1] = 180;
                                this.gameStats1[2] = 255;
                                this.gameStats1[3] = (int) (aMath.sin(i17 * 0.45f) * 255.0f);
                            } else if (this.cc[i16][4] == 6) {
                                this.gameStats1[0] = 180;
                                this.gameStats1[1] = 255;
                                this.gameStats1[2] = 255;
                                this.gameStats1[3] = (int) (aMath.sin(i17 * 0.45f) * 255.0f);
                            }
                            texRenderer.setColor(this.gameStats1[0], this.gameStats1[1], this.gameStats1[2]);
                            texRenderer.setAlpha(this.gameStats1[3]);
                            texRenderer.drawRectangle((this.cc[i16][0] - (this.battleData[5] / 10)) - this.excessWidth, this.cc[i16][1], 4, 4);
                            texRenderer.setAlpha(255);
                        }
                    }
                }
                this.gameStats1[0] = 0;
                this.bH[this.gameStats1[0]][0] = 0;
                this.bH[this.gameStats1[0]][1] = 0;
                this.bH[this.gameStats1[0]][2] = 0;
                int[] iArr38 = this.gameStats1;
                iArr38[0] = iArr38[0] + 1;
                this.bH[this.gameStats1[0]][0] = 0;
                this.bH[this.gameStats1[0]][1] = 1;
                this.bH[this.gameStats1[0]][2] = 0;
                int[] iArr39 = this.gameStats1;
                iArr39[0] = iArr39[0] + 1;
                for (int i18 = 1; i18 < getLength(this.unitBattleStats[1]); i18++) {
                    if (this.unitBattleStats[1][i18][0] > 0) {
                        this.bH[this.gameStats1[0]][0] = this.unitBattleStats[1][i18][5] + 1;
                        int i19 = 0;
                        while (true) {
                            if (i19 >= 10) {
                                i19 = 0;
                                break;
                            } else if (this.slotEnemyIDs[i19] != this.unitBattleStats[1][i18][0]) {
                                i19++;
                            }
                            else {
                                break;
                            }
                        }
                        this.bH[this.gameStats1[0]][1] = i19 + 10;
                        if (this.unitBattleStats[1][i18][1] == 4) {
                            this.bH[this.gameStats1[0]][1] = 2;
                        }
                        this.bH[this.gameStats1[0]][2] = i18;
                        int[] iArr40 = this.gameStats1;
                        iArr40[0] = iArr40[0] + 1;
                    }
                }
                for (int i20 = 1; i20 < getLength(this.unitBattleStats[0]); i20++) {
                    if (this.unitBattleStats[0][i20][0] > 0) {
                        this.bH[this.gameStats1[0]][0] = this.unitBattleStats[0][i20][5] + 1;
                        int i21 = 0;
                        while (true) {
                            if (i21 >= 10) {
                                i21 = 0;
                                break;
                            } else if (this.slotCatIDs[i21] != this.unitBattleStats[0][i20][0]) {
                                i21++;
                            }
                            else {
                                break;
                            }
                        }
                        this.bH[this.gameStats1[0]][1] = i21 + 100;
                        if (this.unitBattleStats[0][i20][1] == 4) {
                            if (this.unitBattleStats[0][i20][0] - 2 == 16) {
                                this.bH[this.gameStats1[0]][1] = 4;
                            } else {
                                this.bH[this.gameStats1[0]][1] = 3;
                            }
                        }
                        this.bH[this.gameStats1[0]][2] = i20;
                        int[] iArr41 = this.gameStats1;
                        iArr41[0] = iArr41[0] + 1;
                    }
                }
                for (int i22 = 0; i22 < this.gameStats1[0] - 1; i22++) {
                    this.gameStats1[1] = this.bH[i22][0];
                    this.gameStats1[2] = i22;
                    for (int i23 = i22 + 1; i23 < this.gameStats1[0]; i23++) {
                        if (this.bH[i23][0] < this.gameStats1[1]) {
                            this.gameStats1[1] = this.bH[i23][0];
                            this.gameStats1[2] = i23;
                        }
                    }
                    for (int i24 = 0; i24 < getLength(this.bH[i22]); i24++) {
                        this.bH[200][i24] = this.bH[i22][i24];
                        this.bH[i22][i24] = this.bH[this.gameStats1[2]][i24];
                        this.bH[this.gameStats1[2]][i24] = this.bH[200][i24];
                    }
                }
                for (int i25 = 0; i25 < this.gameStats1[0] - 1; i25++) {
                    this.gameStats1[1] = this.bH[i25][0];
                    this.gameStats1[2] = i25;
                    this.gameStats1[3] = this.bH[i25][2];
                    for (int i26 = i25 + 1; i26 < this.gameStats1[0] && this.gameStats1[1] == this.bH[i26][0]; i26++) {
                        if (this.bH[i26][2] < this.gameStats1[3]) {
                            this.gameStats1[3] = this.bH[i26][2];
                            this.gameStats1[2] = i26;
                        }
                    }
                    for (int i27 = 0; i27 < getLength(this.bH[i25]); i27++) {
                        this.bH[200][i27] = this.bH[i25][i27];
                        this.bH[i25][i27] = this.bH[this.gameStats1[2]][i27];
                        this.bH[this.gameStats1[2]][i27] = this.bH[200][i27];
                    }
                }
                int i28 = 0;
                while (true) {
                    int i29 = i28;
                    if (i29 >= this.gameStats1[0]) {
                        if (this.eL[5] >= 1) {
                            this.gameStats1[1] = ((this.unitBattleStats[0][0][3] - this.battleData[5]) / 10) + 100;
                            this.gameStats1[2] = (int) (((float) (((this.unitBattleStats[0][0][4] / 10) - 323) - 360)) + (10.0f * aMath.sin(this.ep[0])));
                            texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + this.em[0] + (this.excessWidth / 2), this.gameStats1[2] + 114.56f, 53.7f, 161.1f, 6);
                            texRenderer.setOrientation(1);
                            texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + 132.46f + this.em[0] + (this.excessWidth / 2), this.gameStats1[2] + 114.56f, 53.7f, 161.1f, 6);
                            texRenderer.setOrientation(0);
                            if (this.ex) {
                                texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + 53.7f + this.em[0] + (this.excessWidth / 2), this.gameStats1[2] + 202.27f + this.ez, 82.34f, 91.29f, 5);
                            } else {
                                texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + 51.91f + this.em[0] + (this.excessWidth / 2), this.gameStats1[2] + 202.27f, 82.34f, 91.29f, 4);
                            }
                            texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + 42.96f + this.em[0] + (this.excessWidth / 2), this.gameStats1[2] + 286.4f, 91.29f, 42.96f, 3);
                            texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + 34.01f + this.em[0] + (this.excessWidth / 2), this.gameStats1[2] + 288.19f, 93.08f, 57.28f, 0, 68, 26, 0, this.ep[1], 2);
                            texRenderer.setColor(0, 0, 0);
                            texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + 34.01f + this.em[0] + (this.excessWidth / 2), this.gameStats1[2] + 268.5f, 118.14f, 59.07f, 1);
                            texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + this.em[0] + (this.excessWidth / 2), this.gameStats1[2], 93.08f, 187.95f, 0);
                            texRenderer.setOrientation(1);
                            texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + 93.08f + this.em[0] + (this.excessWidth / 2), this.gameStats1[2], 93.08f, 187.95f, 0);
                            texRenderer.setOrientation(0);
                            if (this.ex) {
                                texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + 51.91f + this.em[0] + (this.excessWidth / 2), this.gameStats1[2] + 186.16f + this.ez, 89.5f, 69.81f, 9);
                            } else {
                                texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + 50.12f + this.em[0] + (this.excessWidth / 2), this.gameStats1[2] + 193.32f, 89.5f, 69.81f, 9);
                            }
                            this.gameStats1[3] = (int) (47.0f * aMath.cos(this.ep[1]));
                            this.gameStats1[4] = (int) (28.0f * aMath.sin(this.ep[1]));
                            if (this.eC) {
                                int i30 = 0;
                                while (true) {
                                    int i31 = i30;
                                    if (i31 < 4) {
                                        texRenderer.drawScaledImage(this.catBaseTexture[0], (((((this.gameStats1[1] + 35) + this.em[0]) - 68) + 68) - this.gameStats1[3]) + this.eA[i31][0] + (this.excessWidth / 2), ((((this.gameStats1[2] + 288) - 58) + 26) - this.gameStats1[4]) + this.eA[i31][1], 137, 117, (this.eA[i31][2] / 2) + 8);
                                        i30 = i31 + 1;
                                    }
                                    else {
                                        break;
                                    }
                                }
                            }
                            this.gameStats1[1] = ((((this.unitBattleStats[0][0][3] - this.battleData[5]) / 10) + 100) + 93) - 40;
                            this.gameStats1[2] = ((this.unitBattleStats[0][0][4] / 10) - 323) + 370;
                            texRenderer.drawScaledImagef(this.uiTextures[20], this.gameStats1[1] + this.em[0] + (this.excessWidth / 2), this.gameStats1[2], 80.55f, 7.16f, 7);
                            int i32 = 0;
                            while (true) {
                                int i33 = i32;
                                if (i33 >= 50) {
                                    int i34 = 0;
                                    while (true) {
                                        int i35 = i34;
                                        if (i35 < getLength(this.eB)) {
                                            int i36 = 0;
                                            while (true) {
                                                int i37 = i36;
                                                if (i37 >= getLength(this.eB[i35])) {
                                                    break;
                                                }
                                                if (this.eB[i35][i37][0] > 0) {
                                                    this.gameStats1[1] = (this.eB[i35][i37][1] - this.battleData[5]) / 10;
                                                    if ((6 - (this.eB[i35][i37][0] / 2)) - 1 <= 4) {
                                                        texRenderer.drawScaledImage(this.catBaseTexture[0], this.gameStats1[1] + (this.excessWidth / 2), this.eB[i35][i37][2] / 10, 137, 117, ((6 - (this.eB[i35][i37][0] / 2)) - 1) + 8);
                                                    }
                                                }
                                                i36 = i37 + 1;
                                            }
                                            i34 = i35 + 1;
                                        }
                                        else {
                                            break;
                                        }
                                    }
                                    break;
                                } else {
                                    if (this.et[i33]) {
                                        this.gameStats1[1] = (this.eq[i33] - this.battleData[5]) / 10;
                                        texRenderer.drawScaledImage(this.uiTextures[20], this.gameStats1[1] + (this.excessWidth / 2), this.er[i33] / 10, 53, 53, 0, 0, 0, 5, 0.0f, 8);
                                    }
                                    i32 = i33 + 1;
                                }
                            }
                        }
                        int i38 = 0;
                        while (true) {
                            int i39 = i38;
                            if (i39 >= getLength(this.bS)) {
                                if (this.unitBattleStats[0][0][9] == 1) {
                                    this.gameStats1[1] = ((this.unitBattleStats[0][0][3] - this.battleData[5]) / 10) + 27;
                                    this.gameStats1[2] = this.gameStats1[1] - ((((this.unitBattleStats[0][0][6] * cw) - 92) * this.unitBattleStats[0][0][10]) / 16);
                                    this.gameStats1[3] = (this.unitBattleStats[0][0][4] / 10) - 160;
                                    texRenderer.setColor(255, 0, 255);
                                    texRenderer.drawLine(this.gameStats1[1] + (this.excessWidth / 2), this.gameStats1[3], this.gameStats1[2] + (this.excessWidth / 2), 500);
                                    texRenderer.drawLine((this.gameStats1[1] - 5) + (this.excessWidth / 2), this.gameStats1[3], (this.gameStats1[2] - 5) + (this.excessWidth / 2), 500);
                                    texRenderer.drawLine(this.gameStats1[1] + 1 + (this.excessWidth / 2), this.gameStats1[3], this.gameStats1[2] + 1 + (this.excessWidth / 2), 500);
                                    texRenderer.drawLine((this.gameStats1[1] - 6) + (this.excessWidth / 2), this.gameStats1[3], (this.gameStats1[2] - 6) + (this.excessWidth / 2), 500);
                                    texRenderer.setColor(255, 255, 255);
                                    texRenderer.drawLine((this.gameStats1[1] - 1) + (this.excessWidth / 2), this.gameStats1[3], (this.gameStats1[2] - 1) + (this.excessWidth / 2), 500);
                                    texRenderer.drawLine((this.gameStats1[1] - 2) + (this.excessWidth / 2), this.gameStats1[3], (this.gameStats1[2] - 2) + (this.excessWidth / 2), 500);
                                    texRenderer.drawLine((this.gameStats1[1] - 3) + (this.excessWidth / 2), this.gameStats1[3], (this.gameStats1[2] - 3) + (this.excessWidth / 2), 500);
                                    texRenderer.drawLine((this.gameStats1[1] - 4) + (this.excessWidth / 2), this.gameStats1[3], (this.gameStats1[2] - 4) + (this.excessWidth / 2), 500);
                                    texRenderer.drawScaledImage(this.catBaseTexture[0], (this.gameStats1[2] - 30) + (this.excessWidth / 2), 450, 132, 50, ((this.unitBattleStats[0][0][10] % 4) / 2) + 5);
                                }
                                int i40 = 0;
                                while (true) {
                                    int i41 = i40;
                                    if (i41 >= getLength(this.bT)) {
                                        if (this.bV[4] == 3) {
                                            int i42 = this.battleData[5] / 10;
                                            for (int i43 = 0; i43 < getLength(this.ce); i43++) {
                                                for (int i44 = 0; i44 < 8; i44++) {
                                                    this.cf[i43][0][i44] = (int) ((((this.ce[i43][0] / 100) - i42) - this.excessWidth) + (12.0f * aMath.cos(i44 * 45)));
                                                    this.cf[i43][1][i44] = (int) ((this.ce[i43][1] / 100) + (12.0f * aMath.sin(i44 * 45)));
                                                }
                                                texRenderer.setColor(255, 255, 255, 127);
                                                texRenderer.drawVertices(this.cf[i43][0], this.cf[i43][1], 8);
                                            }
                                        }
                                        if (this.dH <= 47 && this.bd >= 1) {
                                            texRenderer.drawScaledImage(this.uiTextures[15], (((((this.bV[0] / 2) - this.battleData[5]) / 10) - 65) - (dv[this.hk[0]] / 2)) + (this.excessWidth / 2), ((((-24) - this.eZ) - this.he[0]) - (dv[this.hk[0]] / 2)) - this.eI[0], dv[this.hk[0]] + 131, dv[this.hk[0]] + 131, 0, 0, 0, 5, this.hb[0], 40);
                                            texRenderer.drawScaledImage(this.uiTextures[15], ((((((this.bV[0] / 2) - this.battleData[5]) / 10) + 27) - 65) - (dv[this.hk[0]] / 2)) + (this.excessWidth / 2), (((1 - this.he[0]) - this.eZ) - (dv[this.hk[0]] / 2)) - this.eI[0], dv[this.hk[0]] + 76, dv[this.hk[0]] + 76, 41);
                                        }
                                        texRenderer.removeAnimTransformer();
                                        texRenderer.setAlpha(255);
                                        if (this.unitBattleStats[0][0][9] == 2 && (this.unitBattleStats[0][0][10] == 1 || this.unitBattleStats[0][0][10] == 2)) {
                                            texRenderer.setColor(255, 255, 255);
                                            texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                                        }
                                        texRenderer.setImageAlpha(255);
                                        texRenderer.drawScaledImagef(this.uiTextures[17], 62, 10 - this.eZ, 0);
                                        this.gameStats1[3] = 0;
                                        if (this.battleData[25] % 4 == 1 || this.battleData[25] % 4 == 2) {
                                            this.gameStats1[3] = 68;
                                        }
                                        this.gameStats1[1] = getWidth() - 4;
                                        this.gameStats1[1] -= 30;
                                        texRenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, this.gameStats1[3] + 11);
                                        this.gameStats1[1] -= 29;
                                        int i45 = this.battleData[9] / 100;
                                        do {
                                            int i46 = i45;
                                            texRenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, (i46 % 10) + this.gameStats1[3]);
                                            i45 = i46 / 10;
                                            this.gameStats1[1] -= 29;
                                        } while (i45 > 0);
                                        texRenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 29, 42, this.gameStats1[3] + 10);
                                        this.gameStats1[1] -= 28;
                                        int i47 = this.battleData[10] / 100;
                                        do {
                                            int i48 = i47;
                                            texRenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, (i48 % 10) + this.gameStats1[3]);
                                            i47 = i48 / 10;
                                            this.gameStats1[1] -= 29;
                                        } while (i47 > 0);
                                        a(texRenderer);
                                        this.gameStats1[1] = 8;
                                        this.gameStats1[2] = 64;
                                        this.gameStats1[3] = 6000 - ((this.eN * 100) / 30);
                                        if (this.hm[3] == 1) {
                                            if (this.gameStats1[3] < 1000) {
                                                texRenderer.setImageColor(255, 0, 0);
                                            } else {
                                                texRenderer.setImageColor(255, 255, 255);
                                            }
                                            if (this.hl == 3) {
                                                texRenderer.setImageAlpha(255 - this.hc[7]);
                                            } else {
                                                texRenderer.setImageAlpha(255);
                                            }
                                            int i49 = this.gameStats1[3] / 6000;
                                            int[] iArr42 = this.gameStats1;
                                            iArr42[1] = iArr42[1] + 24;
                                            int i50 = 2;
                                            int i51 = i49;
                                            while (true) {
                                                texRenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], this.gameStats1[2] - this.eZ, 24, 46, (i51 % 10) + 83);
                                                i51 /= 10;
                                                int i52 = i50 - 1;
                                                if (i52 <= 0) {
                                                    int[] iArr43 = this.gameStats1;
                                                    iArr43[1] = iArr43[1] + 48;
                                                    texRenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], this.gameStats1[2] - this.eZ, 27, 46, 93);
                                                    int[] iArr44 = this.gameStats1;
                                                    iArr44[1] = iArr44[1] + 27;
                                                    if (this.gameStats1[3] % 6000 != 0) {
                                                        i51 = this.gameStats1[3] / 100;
                                                    }
                                                    int i53 = 2;
                                                    int[] iArr45 = this.gameStats1;
                                                    iArr45[1] = iArr45[1] + 24;
                                                    while (true) {
                                                        texRenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], this.gameStats1[2] - this.eZ, 24, 46, (i51 % 10) + 83);
                                                        i51 /= 10;
                                                        i53--;
                                                        if (i53 <= 0) {
                                                            int[] iArr46 = this.gameStats1;
                                                            iArr46[1] = iArr46[1] + 48;
                                                            texRenderer.drawScaledImagef(this.uiTextures[4], this.gameStats1[1], ((this.gameStats1[2] - this.eZ) + 46) - 38.333332f, 22.5f, 38.333332f, 93);
                                                            int[] iArr47 = this.gameStats1;
                                                            iArr47[1] = iArr47[1] + 22;
                                                            int i54 = this.gameStats1[3];
                                                            int i55 = 2;
                                                            int[] iArr48 = this.gameStats1;
                                                            iArr48[1] = iArr48[1] + 20;
                                                            do {
                                                                int i56 = i54;
                                                                texRenderer.drawScaledImagef(this.uiTextures[4], this.gameStats1[1], ((this.gameStats1[2] - this.eZ) + 46) - 38.333332f, 20.0f, 38.333332f, (i56 % 10) + 83);
                                                                i54 = i56 / 10;
                                                                i55--;
                                                                this.gameStats1[1] -= 20;
                                                            } while (i55 > 0);
                                                            break;
                                                        } else {
                                                            this.gameStats1[1]  -= 24;
                                                        }
                                                    }
                                                    break;
                                                } else {
                                                    this.gameStats1[1] -= 24;
                                                    i50 = i52;
                                                }
                                            }
                                        }
                                        texRenderer.setImageColor(255, 255, 255);

                                        texRenderer.drawScaledImage(this.uiTextures[15], (4 - this.eI[0]) - (dv[this.fx[3]] / 2), (4 - this.eZ) - (dv[this.fx[3]] / 2), dv[this.fx[3]] + 58, dv[this.fx[3]] + 58, 2);
                                        if (this.eD[0] == 0) {
                                            this.gameStats1[0] = 0;
                                        } else if (this.eD[0] == 1) {
                                            this.gameStats1[0] = 5;
                                        }
                                        int i57 = 5;
                                        for (int i58 = 5; i58 >= 0; i58--) {
                                            if (this.eM[i58]) {
                                                if (this.eL[i58] == 0) {
                                                    texRenderer.drawScaledImage(this.uiTextures[15], (((i57 * 88) + 447) - (dv[this.eK[i58]] / 2)) + this.excessWidth, ((58 - this.eZ) - this.eI[0]) - (dv[this.eK[i58]] / 2), dv[this.eK[i58]] + 58, dv[this.eK[i58]] + 58, i58 + 33);
                                                } else {
                                                    texRenderer.drawScaledImage(this.uiTextures[15], (((i57 * 88) + 447) - (dv[this.eK[i58]] / 2)) + this.excessWidth, ((58 - this.eZ) - this.eI[0]) - (dv[this.eK[i58]] / 2), dv[this.eK[i58]] + 58, dv[this.eK[i58]] + 58, i58 + 27);
                                                }
                                                i = i57 - 1;
                                            } else {
                                                i = i57;
                                            }
                                            i57 = i;
                                        }
                                        for (int i59 = 0; i59 < 6; i59++) {
                                            if (this.eM[i59]) {
                                                this.gameStats1[0] = 1;
                                            }
                                        }
                                        if ((this.dV || this.gA[1] >= 1) && this.gameStats1[0] == 1) {
                                            int i60 = 5;
                                            for (int i61 = 5; i61 >= 0 && this.dW != i61; i61--) {
                                                if (this.eM[i61]) {
                                                    i60--;
                                                }
                                            }
                                            texRenderer.setColor(255, 255, 255, 216);
                                            texRenderer.fillRect(242.0f + this.excessWidth, 134.0f, 710.0f, 159.0f);
                                            this.gk[0][0] = (i60 * 88) + 447 + 29 + this.excessWidth;
                                            this.gk[0][1] = (i60 * 88) + 447 + 15 + 29 + this.excessWidth;
                                            this.gk[0][2] = (((i60 * 88) + 447) - 15) + 29 + this.excessWidth;
                                            this.gk[1][0] = 118;
                                            this.gk[1][1] = 134;
                                            this.gk[1][2] = 134;
                                            texRenderer.setColor(255, 255, 255, 216);
                                            texRenderer.drawVertices(this.gk[0], this.gk[1], 3);
                                            texRenderer.setColor(0, 0, 0);
                                            for (int i62 = 0; i62 < 4; i62++) {
                                                if (i62 == 0) {
                                                    texRenderer.drawScaledImage(this.textTextures[this.gA[0] + i62], this.excessWidth + 597, ((i62 * 36) + 253) - 108, 1);
                                                } else if (!aString.isEqual(this.itemExplanationText[this.dW][i62 - 1], "＠")) {
                                                    texRenderer.drawScaledImage(this.textTextures[this.gA[0] + i62], this.excessWidth + 597, ((i62 * 36) + 253) - 108, 1);
                                                }
                                            }
                                        }
                                        if (this.battleData[14] != 0) {
                                            this.dV = false;
                                        } else if (!isPointerDown()) {
                                            this.dV = false;
                                        }
                                        if (!this.ha[0]) {
                                            texRenderer.drawScaledImage(this.settingsMenuTexture[2], ((getWidth() / 2) - 190) - (dv[this.fx[0]] / 2), ((640 - this.eI[1]) - (dv[this.fx[0]] / 2)) + this.eZ, dv[this.fx[0]] + 381, dv[this.fx[0]] + 72, 3);
                                            texRenderer.drawScaledImage(this.uiTextures[21], ((((getWidth() / 2) - 190) + 190) - 127) - (dv[this.fx[0]] / 2), ((((640 - this.eI[1]) + 36) - 27) - (dv[this.fx[0]] / 2)) + this.eZ, dv[this.fx[0]] + 254, dv[this.fx[0]] + 55, 1);
                                            texRenderer.drawScaledImage(this.uiTextures[4], (711 - (dv[this.fx[10]] / 2)) + this.excessWidth, ((640 - this.eI[1]) - (dv[this.fx[10]] / 2)) + this.eZ, dv[this.fx[10]] + 68, dv[this.fx[10]] + 68, 99);
                                            if (aTwitter.getInstance().c()) {
                                                texRenderer.drawScaledImage(this.uiTextures[4], (809 - (dv[this.fx[11]] / 2)) + this.excessWidth, ((640 - this.eI[1]) - (dv[this.fx[11]] / 2)) + this.eZ, dv[this.fx[11]] + 68, dv[this.fx[11]] + 68, 100);
                                            }
                                        }
                                        if ((this.battleData[14] == 1 || this.battleData[14] == 4) && this.battleData[15] == 7 && !this.eE[0] && this.scrollAmount[0] == 0 && !this.eE[1] && !this.eE[2] && !this.eE[3] && !this.eb && isPointerDown() && isTouching(this.buttonCoordinates1[4][0], this.buttonCoordinates1[4][1], this.buttonCoordinates1[4][2], this.buttonCoordinates1[4][3])) {
                                            texRenderer.drawScaledImage(this.settingsMenuTexture[2], (getWidth() / 2) - 190, (640 - this.eI[1]) + this.eZ, 381, 72, ((this.blinkFrame[5] % 4) / 2) + 4);
                                        }
                                        if (this.ct > 0 && this.battleData[14] == 0) {
                                            int i63 = 0;
                                            while (true) {
                                                int i64 = i63;
                                                if (i64 >= 5) {
                                                    texRenderer.setColor(255, 255, 0);
                                                    texRenderer.drawScaledImage(this.warningTextures[0], getWidth() / 2, 220, 1);
                                                } else {
                                                    for (int i65 = 0; i65 < 5; i65++) {
                                                        texRenderer.setColor(0, 0, 0);
                                                        texRenderer.drawScaledImage(this.warningTextures[0], ((getWidth() / 2) - 2) + i65, (i64 + 318) - 100, 1);
                                                    }
                                                    i63 = i64 + 1;
                                                }
                                            }
                                        }
                                        if (this.battleData[14] == 1) {
                                            b(texRenderer);
                                        } else if (this.battleData[14] == 2) {
                                            c(texRenderer);
                                        } else if (this.battleData[14] == 3) {
                                            texRenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.eP] * 690) / 100) / 2), 320 - (((eO[this.eP] * 179) / 100) / 2), (eO[this.eP] * 690) / 100, (eO[this.eP] * 179) / 100, 0);
                                            if (this.blinkFrame[0] % 4 == 0 || this.blinkFrame[0] % 4 == 1) {
                                                texRenderer.setColor(255, 255, 255);
                                            } else {
                                                texRenderer.setColor(255, 255, 0);
                                            }
                                            if (this.eP >= getLength(eO) - 1) {
                                                int i66 = 0;
                                                for (int i67 = 0; i67 < getLength(this.stageFirstMessageText[0]) && !aString.isEqual(this.stageFirstMessageText[0][i67], "＠"); i67++) {
                                                    i66--;
                                                }
                                                int i68 = i66 + 1;
                                                for (int i69 = 0; i69 < getLength(this.stageFirstMessageText[0]) && !aString.isEqual(this.stageFirstMessageText[0][i69], "＠"); i69++) {
                                                    texRenderer.drawScaledImage(this.textTextures[i69 + 1], getWidth() / 2, (i68 * 18) + 305, 1);
                                                    i68 += 2;
                                                }
                                            }
                                        } else if (this.battleData[14] == 4) {
                                            d(texRenderer);
                                        } else if (this.battleData[14] == 5) {
                                            e(texRenderer);
                                        }
                                        if (this.ee) {
                                            texRenderer.setColor(0, 0, 0);
                                            texRenderer.setAlpha(178);
                                            texRenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
                                            texRenderer.drawScaledImagef(this.settingsMenuTexture[1], (this.excessWidth / 2) + 248, 84, 0);
                                            texRenderer.drawScaledImagef(this.settingsMenuTexture[1], (this.excessWidth / 2) + 248 + 131, 113, 16);
                                            texRenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 404) - (dv[this.fC[5]] / 2), 48 - (dv[this.fC[5]] / 2), dv[this.fC[5]] + 96, dv[this.fC[5]] + 96, 21);
                                            texRenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 40) - (dv[this.fC[6]] / 2), 464 - (dv[this.fC[6]] / 2), dv[this.fC[6]] + 384, dv[this.fC[6]] + 72, 6);
                                            texRenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 288) + 65) - (dv[this.fC[6]] / 2), 472 - (dv[this.fC[6]] / 2), dv[this.fC[6]] + 254, dv[this.fC[6]] + 55, 10);
                                            //if (!aFacebook.getInstance().f()) {
                                            //    if (aFacebook.getInstance().e()) {
                                            //        texRenderer.a(this.af[1], ((this.w / 2) + 535) - (dv[this.fC[2]] / 2), 299 - (dv[this.fC[2]] / 2), dv[this.fC[2]] + 106, dv[this.fC[2]] + 42, 20);
                                            //    } else {
                                            //        texRenderer.a(this.af[1], ((this.w / 2) + 535) - (dv[this.fC[2]] / 2), 299 - (dv[this.fC[2]] / 2), dv[this.fC[2]] + 106, dv[this.fC[2]] + 42, 19);
                                            //    }
                                            //}
                                            texRenderer.drawScaledImage(this.settingsMenuTexture[1], ((this.excessWidth / 2) + 500) - (dv[this.fC[12]] / 2), 199 - (dv[this.fC[12]] / 2), dv[this.fC[12]] + 172, dv[this.fC[12]] + 68, 3);
                                            if (aSound.getInstance().isMutedBGM()) {
                                                texRenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 252) - (dv[this.fC[3]] / 2), 373 - (dv[this.fC[3]] / 2), dv[this.fC[3]] + 68, dv[this.fC[3]] + 68, 5);
                                            } else {
                                                texRenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 252) - (dv[this.fC[3]] / 2), 373 - (dv[this.fC[3]] / 2), dv[this.fC[3]] + 68, dv[this.fC[3]] + 68, 4);
                                            }
                                            if (aSound.getInstance().isMutedSE()) {
                                                texRenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 356) - (dv[this.fC[4]] / 2), 373 - (dv[this.fC[4]] / 2), dv[this.fC[4]] + 68, dv[this.fC[4]] + 68, 8);
                                            } else {
                                                texRenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 356) - (dv[this.fC[4]] / 2), 373 - (dv[this.fC[4]] / 2), dv[this.fC[4]] + 68, dv[this.fC[4]] + 68, 7);
                                            }
                                            texRenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 40) - (dv[this.fC[7]] / 2), 197 - (dv[this.fC[7]] / 2), dv[this.fC[7]] + 170, dv[this.fC[7]] + 72, 1);
                                            texRenderer.drawScaledImage(this.settingsMenuTexture[1], ((this.excessWidth / 2) + 298) - (dv[this.fC[7]] / 2), 205 - (dv[this.fC[7]] / 2), dv[this.fC[7]] + 150, dv[this.fC[7]] + 55, 13);
                                            if (this.dH <= 47 && this.bd >= 1) {
                                                texRenderer.drawScaledImage(this.uiTextures[15], (309 - (dv[this.fC[8]] / 2)) + (this.excessWidth / 2), (284 - (dv[this.fC[8]] / 2)) + 20, dv[this.fC[8]] + 131, dv[this.fC[8]] + 131, 0, 0, 0, 5, this.hb[2], 40);
                                                texRenderer.drawScaledImage(this.uiTextures[15], (336 - (dv[this.fC[8]] / 2)) + (this.excessWidth / 2), (308 - (dv[this.fC[8]] / 2)) + 20, dv[this.fC[8]] + 76, dv[this.fC[8]] + 76, 41);
                                            }
                                            if (!this.ef) {
                                                if (isPointerDown() && isTouching(this.fB[7][0], this.fB[7][1], this.fB[7][2], this.fB[7][3])) {
                                                    texRenderer.drawScaledImage(this.settingsMenuTexture[1], (this.excessWidth / 2) + 288, 197, 170, 72, ((this.blinkFrame[5] % 4) / 2) + 14);
                                                } else if (isPointerDown() && isTouching(this.fB[6][0], this.fB[6][1], this.fB[6][2], this.fB[6][3])) {
                                                    texRenderer.drawScaledImage(this.settingsMenuTexture[1], (this.excessWidth / 2) + 288, 464, 384, 72, ((this.blinkFrame[5] % 4) / 2) + 17);
                                                }
                                            }
                                            if (this.ef) {
                                                texRenderer.drawScaledImage(this.popupTexture, (this.excessWidth / 2) + 135, 250, 690, 229, 0);
                                                texRenderer.setColor(255, 255, 255);
                                                texRenderer.drawScaledImage(this.textTextures[10], getWidth() / 2, 295, 1);
                                                texRenderer.drawScaledImage(this.settingsMenuTexture[2], (251 - (dv[this.fC[10]] / 2)) + (this.excessWidth / 2), 382 - (dv[this.fC[10]] / 2), dv[this.fC[10]] + 168, dv[this.fC[10]] + 72, 0);
                                                texRenderer.drawScaledImage(this.settingsMenuTexture[2], (541 - (dv[this.fC[11]] / 2)) + (this.excessWidth / 2), 382 - (dv[this.fC[11]] / 2), dv[this.fC[11]] + 168, dv[this.fC[11]] + 72, 0);
                                                texRenderer.drawScaledImage(this.uiTextures[21], (260 - (dv[this.fC[10]] / 2)) + (this.excessWidth / 2), 390 - (dv[this.fC[10]] / 2), dv[this.fC[10]] + 150, dv[this.fC[10]] + 55, 4);
                                                texRenderer.drawScaledImage(this.uiTextures[21], (550 - (dv[this.fC[11]] / 2)) + (this.excessWidth / 2), 390 - (dv[this.fC[11]] / 2), dv[this.fC[11]] + 150, dv[this.fC[11]] + 55, 5);
                                                if (isPointerDown() && isTouching(this.fB[10][0], this.fB[10][1], this.fB[10][2], this.fB[10][3]) && !this.eb && !this.gu) {
                                                    texRenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 250, 381, 168, 72, ((this.blinkFrame[5] % 4) / 2) + 1);
                                                } else if (isPointerDown() && isTouching(this.fB[11][0], this.fB[11][1], this.fB[11][2], this.fB[11][3]) && !this.eb && !this.gu) {
                                                    texRenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 540, 381, 168, 72, ((this.blinkFrame[5] % 4) / 2) + 1);
                                                }
                                            }
                                            if (isPointerDown() && isTouching(this.fB[5][0], this.fB[5][1], this.fB[5][2], this.fB[5][3])) {
                                                texRenderer.drawScaledImage(this.settingsMenuTexture[1], (this.excessWidth / 2) + 248 + 404, 48, 96, 96, ((this.blinkFrame[5] % 4) / 2) + 22);
                                            }
                                        }
                                        if (this.ha[0]) {
                                            h(texRenderer);
                                        }
                                        texRenderer.setBlendMode(0);
                                        texRenderer.setImageAlpha(255);
                                        a(texRenderer, this.ed);
                                        break;
                                    } else {
                                        if (this.bT[i41][0] != 0) {
                                            this.gameStats1[1] = (this.bT[i41][1] - this.battleData[5]) / 10;
                                            this.gameStats1[2] = cx[this.bT[i41][0]];
                                            if (this.gameStats1[2] == 0) {
                                                texRenderer.drawScaledImage(this.catBaseTexture[0], this.gameStats1[1] + (this.excessWidth / 2), 418, 185, 102, this.gameStats1[2]);
                                            } else if (this.gameStats1[2] == 1) {
                                                texRenderer.drawScaledImage(this.catBaseTexture[0], this.gameStats1[1] + (this.excessWidth / 2), 243, 185, 277, this.gameStats1[2]);
                                            } else if (this.gameStats1[2] == 2) {
                                                texRenderer.drawScaledImage(this.catBaseTexture[0], this.gameStats1[1] + (this.excessWidth / 2), 193, 185, 327, this.gameStats1[2]);
                                            } else if (this.gameStats1[2] == 3) {
                                                texRenderer.drawScaledImage(this.catBaseTexture[0], this.gameStats1[1] + (this.excessWidth / 2), 193, 185, 327, this.gameStats1[2]);
                                            } else if (this.gameStats1[2] == 4) {
                                                texRenderer.drawScaledImage(this.catBaseTexture[0], this.gameStats1[1] + (this.excessWidth / 2), 193, 185, 327, this.gameStats1[2]);
                                            }
                                        }
                                        i40 = i41 + 1;
                                    }
                                }
                                break;
                            } else {
                                int i70 = 0;
                                while (true) {
                                    int i71 = i70;
                                    if (i71 >= getLength(this.bS[i39])) {
                                        break;
                                    }
                                    if (this.bS[i39][i71][0] > 0) {
                                        this.gameStats1[1] = (this.bS[i39][i71][1] - this.battleData[5]) / 10;
                                        if ((6 - (this.bS[i39][i71][0] / 2)) - 1 <= 4) {
                                            texRenderer.drawScaledImage(this.catBaseTexture[0], this.gameStats1[1] + (this.excessWidth / 2), this.bS[i39][i71][2] / 10, 137, 117, ((6 - (this.bS[i39][i71][0] / 2)) - 1) + 8);
                                        }
                                    }
                                    i70 = i71 + 1;
                                }
                                i38 = i39 + 1;
                            }
                        }
                        break;
                    } else {
                        int i72 = this.bH[i29][2];
                        switch (this.bH[i29][1]) {
                            case 0:
                                this.gameStats1[1] = (((this.unitBattleStats[1][0][3] - ((fe[this.battleData[20]][2] * 1180) / 100)) - this.battleData[5]) / 10) + ((fe[this.battleData[20]][0] * fe[this.battleData[20]][2]) / 100);
                                this.gameStats1[2] = ((this.unitBattleStats[1][0][4] / 10) - ((fe[this.battleData[20]][2] * 255) / 100)) + ((fe[this.battleData[20]][1] * fe[this.battleData[20]][2]) / 100);
                                this.gameStats1[3] = 0;
                                if (this.unitBattleStats[1][0][1] != 0 && this.battleData[1] % (this.eG + 1) == 1) {
                                    this.gameStats1[3] = (this.battleData[1] % (this.eG + 1)) * 4;
                                }
                                texRenderer.drawScaledImage(this.uiTextures[2], (this.gameStats1[1] - this.gameStats1[3]) + (this.excessWidth / 2), this.gameStats1[2], (fe[this.battleData[20]][2] * 127) / 100, (fe[this.battleData[20]][2] * 255) / 100);
                                texRenderer.drawScaledImage(this.uiTextures[4], (((((this.gameStats1[1] + 150) + (((fe[this.battleData[20]][2] * 127) / 100) / 2)) - 9) - 25) - 30) + (this.excessWidth / 2), 137, 18, 18, 67);
                                this.gameStats1[2] = this.unitBattleStats[1][0][7];
                                if (this.gameStats1[2] > 99999999) {
                                    this.gameStats1[2] = 99999999;
                                }
                                int i73 = 10;
                                while (i73 <= this.gameStats1[2]) {
                                    i73 *= 10;
                                }
                                int i74 = 0;
                                for (int i75 = i73 / 10; i75 >= 1; i75 /= 10) {
                                    texRenderer.drawScaledImage(this.uiTextures[4], ((((((this.gameStats1[1] + 150) + (((fe[this.battleData[20]][2] * 127) / 100) / 2)) + 9) + (i74 * 14)) - 25) - 30) + (this.excessWidth / 2), 137, 14, 18, ((this.gameStats1[2] / i75) % 10) + 57);
                                    i74++;
                                }
                                int i76 = 10;
                                int i77 = 0;
                                this.gameStats1[2] = this.unitBattleStats[1][0][8];
                                while (i76 <= this.gameStats1[2]) {
                                    i76 *= 10;
                                    i77--;
                                }
                                int i78 = i76 / 10;
                                while (true) {
                                    int i79 = i77;
                                    int i80 = i78;
                                    if (i80 >= 1) {
                                        texRenderer.drawScaledImage(this.uiTextures[4], (((((((this.gameStats1[1] + 150) + (((fe[this.battleData[20]][2] * 127) / 100) / 2)) - 18) - 5) + (i79 * 14)) - 25) - 30) + (this.excessWidth / 2), 137, 14, 18, ((this.gameStats1[2] / i80) % 10) + 57);
                                        i77 = i79 + 1;
                                        i78 = i80 / 10;
                                    }
                                    else {
                                        break;
                                    }
                                }
                                break;
                            case 1:
                                this.gameStats1[1] = (this.unitBattleStats[0][0][3] - this.battleData[5]) / 10;
                                this.gameStats1[2] = (this.unitBattleStats[0][0][4] / 10) - 323;
                                this.gameStats1[3] = 0;
                                if (this.unitBattleStats[0][0][1] != 0 && this.battleData[1] % (this.eG + 1) == 1) {
                                    this.gameStats1[3] = (this.battleData[1] % (this.eG + 1)) * 4;
                                }
                                texRenderer.drawScaledImage(this.uiTextures[1], this.gameStats1[1] + this.gameStats1[3] + (this.excessWidth / 2), this.gameStats1[2], 161, 323, 0);
                                if (this.unitBattleStats[0][0][9] == 1) {
                                    texRenderer.drawScaledImage(this.catBaseTexture[0], this.gameStats1[1] + this.gameStats1[3] + (this.excessWidth / 2), (this.gameStats1[2] + 82) - 2, 161, 162, 7);
                                }
                                texRenderer.drawScaledImage(this.uiTextures[4], (((this.gameStats1[1] + 80) - 9) - 150) + 25 + 30 + (this.excessWidth / 2), 137, 18, 18, 67);
                                this.gameStats1[2] = this.unitBattleStats[0][0][7];
                                if (this.gameStats1[2] > 99999999) {
                                    this.gameStats1[2] = 99999999;
                                }
                                int i81 = 10;
                                while (i81 <= this.gameStats1[2]) {
                                    i81 *= 10;
                                }
                                int i82 = 0;
                                for (int i83 = i81 / 10; i83 >= 1; i83 /= 10) {
                                    texRenderer.drawScaledImage(this.uiTextures[4], ((((this.gameStats1[1] + 80) + 9) + (i82 * 14)) - 150) + 25 + 30 + (this.excessWidth / 2), 137, 14, 18, ((this.gameStats1[2] / i83) % 10) + 57);
                                    i82++;
                                }
                                int i84 = 10;
                                int i85 = 0;
                                this.gameStats1[2] = this.unitBattleStats[0][0][8];
                                while (i84 <= this.gameStats1[2]) {
                                    i84 *= 10;
                                    i85--;
                                }
                                int i86 = i84 / 10;
                                while (true) {
                                    int i87 = i85;
                                    int i88 = i86;
                                    if (i88 < 1) {
                                        if (this.battleData[14] == 0 && this.unitBattleStats[0][0][12] == 0) {
                                            this.gameStats1[1] = ((this.unitBattleStats[0][0][3] - this.battleData[5]) / 10) + 27;
                                            if (((this.gameStats1[1] - ((this.unitBattleStats[0][0][6] * cw) - 92)) - 4) + (this.excessWidth / 2) < (((300 - this.battleData[5]) / 10) - 4) + 100 + (this.excessWidth / 2)) {
                                                texRenderer.drawScaledImagef(this.uiTextures[15], (((300 - this.battleData[5]) / 10) - 4) + 100 + (this.excessWidth / 2), 410, 0);
                                                texRenderer.setImageAlpha(216);
                                                texRenderer.drawScaledImagef(this.uiTextures[15], ((((300 - this.battleData[5]) / 10) - 30) - 4) + 100 + (this.excessWidth / 2), (int) (314.0f + (11.0f * aMath.sin(this.fd[0] * 60))), 1);
                                                texRenderer.setImageAlpha(255);
                                                break;
                                            } else {
                                                texRenderer.drawScaledImagef(this.uiTextures[15], ((this.gameStats1[1] - ((this.unitBattleStats[0][0][6] * cw) - 92)) - 4) + (this.excessWidth / 2), 410, 0);
                                                texRenderer.setImageAlpha(216);
                                                texRenderer.drawScaledImagef(this.uiTextures[15], (((this.gameStats1[1] - ((this.unitBattleStats[0][0][6] * cw) - 92)) - 30) - 4) + (this.excessWidth / 2), (int) (314.0f + (11.0f * aMath.sin(this.fd[0] * 60))), 1);
                                                texRenderer.setImageAlpha(255);
                                                break;
                                            }
                                        }
                                        break;
                                    } else {
                                        texRenderer.drawScaledImage(this.uiTextures[4], (((((this.gameStats1[1] + 80) - 18) - 5) + (i87 * 14)) - 150) + 25 + 30 + (this.excessWidth / 2), 137, 14, 18, ((this.gameStats1[2] / i88) % 10) + 57);
                                        i85 = i87 + 1;
                                        i86 = i88 / 10;
                                    }
                                }
                                break;
                            case 2: // after catcannon fire
                                this.gameStats1[1] = ((this.unitBattleStats[1][i72][3] - 850) - this.battleData[5]) / 10;
                                this.gameStats1[2] = ((this.unitBattleStats[1][i72][4] / 10) + (this.unitBattleStats[1][i72][5] * 4)) - 97;
                                this.catBaseModel[1].setAction(this.catBaseAnim[1][0], this.unitBattleStats[1][i72][2]);
                                texRenderer.setTextures(this.catBaseModel[1], this.gameStats1[1] + (this.excessWidth / 2), this.gameStats1[2]);
                                texRenderer.setImageAlpha(255);
                                break;
                            case 3:
                                this.gameStats1[1] = (this.unitBattleStats[0][i72][3] - this.battleData[5]) / 10;
                                this.gameStats1[2] = ((this.unitBattleStats[0][i72][4] / 10) + (this.unitBattleStats[0][i72][5] * 4)) - 97;
                                this.gameStats1[3] = eT[this.unitBattleStats[0][i72][2] % 8];
                                texRenderer.setImageAlpha(this.unitBattleStats[0][i72][25]);
                                this.gameStats1[1] += (int) (this.unitBattleStats[0][i72][27] * aMath.sin(this.unitBattleStats[0][i72][29]));
                                this.catBaseModel[1].setAction(this.catBaseAnim[1][0], this.unitBattleStats[0][i72][2]);
                                texRenderer.setTextures(this.catBaseModel[1], this.gameStats1[1] + (this.excessWidth / 2), this.gameStats1[2]);
                                texRenderer.setImageAlpha(255);
                                break;
                            case 4:
                                this.gameStats1[1] = (this.unitBattleStats[0][i72][3] - this.battleData[5]) / 10;
                                this.gameStats1[2] = ((this.unitBattleStats[0][i72][4] / 10) + (this.unitBattleStats[0][i72][5] * 4)) - 97;
                                this.catBaseModel[1].setAction(this.catBaseAnim[1][1], this.unitBattleStats[0][i72][2]);
                                texRenderer.setTextures(this.catBaseModel[1], this.gameStats1[1] + (this.excessWidth / 2), this.gameStats1[2]);
                                texRenderer.setImageAlpha(255);
                                break;
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                            case 17:
                            case 18:
                            case 19:
                                this.gameStats1[1] = (this.unitBattleStats[1][i72][3] - this.battleData[5]) / 10;
                                this.gameStats1[2] = (this.unitBattleStats[1][i72][4] / 10) + (this.unitBattleStats[1][i72][5] * 4);
                                if (this.unitBattleStats[1][i72][1] == 0) {
                                    this.enemySlotModels[this.bH[i29][1] - 10].setAction(this.enemySlotAnims[this.bH[i29][1] - 10][0], this.unitBattleStats[1][i72][2]);
                                } else if (this.unitBattleStats[1][i72][1] == 1) {
                                    this.enemySlotModels[this.bH[i29][1] - 10].setAction(this.enemySlotAnims[this.bH[i29][1] - 10][1], this.unitBattleStats[1][i72][2]);
                                } else if (this.unitBattleStats[1][i72][1] == 2) {
                                    this.enemySlotModels[this.bH[i29][1] - 10].setAction(this.enemySlotAnims[this.bH[i29][1] - 10][2], this.unitBattleStats[1][i72][2]);
                                } else if (this.unitBattleStats[1][i72][1] == 3) {
                                    this.enemySlotModels[this.bH[i29][1] - 10].setAction(this.enemySlotAnims[this.bH[i29][1] - 10][3], this.unitBattleStats[1][i72][2]);
                                } else if (this.unitBattleStats[1][i72][1] == 5) {
                                    this.enemySlotModels[this.bH[i29][1] - 10].setAction(this.enemySlotAnims[this.bH[i29][1] - 10][3], this.unitBattleStats[1][i72][2]);
                                }
                                this.enemySlotModels[this.bH[i29][1] - 10].getModelCollision(0).a().a(this.enemySlotModels[this.bH[i29][1] - 10], this.enemySlotModels[this.bH[i29][1] - 10].getModelCollision(0).b(), this.enemySlotModels[this.bH[i29][1] - 10].getModelCollision(0).c(), this.x);
                                texRenderer.setTextures(this.enemySlotModels[this.bH[i29][1] - 10], (this.gameStats1[1] - this.x.x) + (this.excessWidth / 2), this.gameStats1[2] - this.x.y);
                                break;
                            case 100:
                            case 101:
                            case 102:
                            case 103:
                            case 104:
                            case 105:
                            case 106:
                            case 107:
                            case 108:
                            case 109:
                                this.gameStats1[1] = (this.unitBattleStats[0][i72][3] - this.battleData[5]) / 10;
                                this.gameStats1[2] = (this.unitBattleStats[0][i72][4] / 10) + (this.unitBattleStats[0][i72][5] * 4);
                                if (this.unitBattleStats[0][i72][1] == 0) {
                                    this.unitSlotModels[this.bH[i29][1] - 100].setAction(this.unitSlotAnims[this.bH[i29][1] - 100][0], this.unitBattleStats[0][i72][2]);
                                } else if (this.unitBattleStats[0][i72][1] == 1) {
                                    this.unitSlotModels[this.bH[i29][1] - 100].setAction(this.unitSlotAnims[this.bH[i29][1] - 100][1], this.unitBattleStats[0][i72][2]);
                                } else if (this.unitBattleStats[0][i72][1] == 2) {
                                    this.unitSlotModels[this.bH[i29][1] - 100].setAction(this.unitSlotAnims[this.bH[i29][1] - 100][2], this.unitBattleStats[0][i72][2]);
                                } else if (this.unitBattleStats[0][i72][1] == 3) {
                                    this.unitSlotModels[this.bH[i29][1] - 100].setAction(this.unitSlotAnims[this.bH[i29][1] - 100][3], this.unitBattleStats[0][i72][2]);
                                }
                                this.unitSlotModels[this.bH[i29][1] - 100].getModelCollision(0).a().a(this.unitSlotModels[this.bH[i29][1] - 100], this.unitSlotModels[this.bH[i29][1] - 100].getModelCollision(0).b(), this.unitSlotModels[this.bH[i29][1] - 100].getModelCollision(0).c(), this.x);
                                texRenderer.setTextures(this.unitSlotModels[this.bH[i29][1] - 100], (this.gameStats1[1] - this.x.x) + (this.excessWidth / 2), this.gameStats1[2] - this.x.y);
                                break;
                        }
                        i28 = i29 + 1;
                    }
                }
                break;
        }
        texRenderer.removeAnimTransformer();
        l(texRenderer);
        if (this.gU) {
            q(texRenderer);
        }
    }

    void f(int i) {
        if (!this.eE[0]) {
            this.eD[5] = 0;
            return;
        }
        int[] iArr = this.eD;
        iArr[5] = iArr[5] + this.el[0];
        if (i == 0) {
            if (this.eD[5] <= 0) {
                this.eD[1] = 0;
                this.eD[2] = 0;
                this.eD[3] = 0;
                this.eD[4] = 0;
                this.eD[5] = 0;
                if (this.eD[0] == 0) {
                    this.eD[0] = 0;
                } else if (this.eD[0] == 1) {
                    this.eD[0] = 1;
                }
                this.eE[0] = false;
            }
            if (this.eD[5] == 1) {
                this.eD[1] = -20;
                this.eD[2] = 20;
                this.eD[3] = 0;
                this.eD[4] = 0;
            } else if (this.eD[5] == 2) {
                this.eD[1] = -40;
                this.eD[2] = 40;
                this.eD[3] = 0;
                this.eD[4] = 0;
            } else if (this.eD[5] == 3) {
                this.eD[1] = -80;
                this.eD[2] = 80;
                this.eD[3] = 0;
                this.eD[4] = 0;
            } else if (this.eD[5] == 4) {
                this.eD[1] = -40;
                this.eD[2] = 40;
                this.eD[3] = 0;
                this.eD[4] = 0;
            } else if (this.eD[5] == 5) {
                this.eD[1] = -20;
                this.eD[2] = 20;
                this.eD[3] = 0;
                this.eD[4] = 0;
            } else if (this.eD[5] >= 6) {
                this.eD[1] = 0;
                this.eD[2] = 0;
                this.eD[3] = 0;
                this.eD[4] = 0;
                this.eD[5] = 0;
                if (this.eD[0] == 0) {
                    this.eD[0] = 1;
                } else if (this.eD[0] == 1) {
                    this.eD[0] = 0;
                }
                this.eE[0] = false;
            }
        } else if (i == 1) {
            if (this.eD[5] <= 0) {
                this.eD[1] = 0;
                this.eD[2] = 0;
                this.eD[3] = 0;
                this.eD[4] = 0;
                this.eD[5] = 0;
                this.eE[0] = false;
                if (this.eD[0] == 0) {
                    this.eD[0] = 0;
                } else if (this.eD[0] == 1) {
                    this.eD[0] = 1;
                }
            }
            if (this.eD[5] == 1) {
                this.eD[1] = 20;
                this.eD[2] = -20;
                this.eD[3] = 0;
                this.eD[4] = 0;
            } else if (this.eD[5] == 2) {
                this.eD[1] = 40;
                this.eD[2] = -40;
                this.eD[3] = 0;
                this.eD[4] = 0;
            } else if (this.eD[5] == 3) {
                this.eD[1] = 80;
                this.eD[2] = -80;
                this.eD[3] = 0;
                this.eD[4] = 0;
            } else if (this.eD[5] == 4) {
                this.eD[1] = 40;
                this.eD[2] = -40;
                this.eD[3] = 0;
                this.eD[4] = 0;
            } else if (this.eD[5] == 5) {
                this.eD[1] = 20;
                this.eD[2] = -20;
                this.eD[3] = 0;
                this.eD[4] = 0;
            } else if (this.eD[5] >= 6) {
                this.eD[1] = 0;
                this.eD[2] = 0;
                this.eD[3] = 0;
                this.eD[4] = 0;
                this.eD[5] = 0;
                this.eE[0] = false;
                if (this.eD[0] == 0) {
                    this.eD[0] = 1;
                } else if (this.eD[0] == 1) {
                    this.eD[0] = 0;
                }
            }
        }
    }

    void enemyGuideDraw(aTextureRenderer atexturerenderer) {
        atexturerenderer.drawScaledImage(this.uiTextures[6], 0, 0, getWidth(), 640, 0);
        atexturerenderer.setImageAlpha(((int) (115.0f * aMath.cos(this.blinkFrame[5]))) + 140);
        atexturerenderer.drawScaledImage(this.uiTextures[7], 0, 0, getWidth(), 816, 0);
        atexturerenderer.setImageAlpha(255);
        int i = 0;
        while (true) {
            int i2 = i;
            if (i2 >= this.boxCounts[1]) {
                break;
            }
            atexturerenderer.drawScaledImage(this.uiTextures[6], (this.excessWidth / 2) + this.gameStats1[0] + 112 + (this.boxScale * i2), 359, 738, 218, 1);
            i = i2 + 1;
        }
        atexturerenderer.setColor(255, 255, 255);
        for (int i3 = 0; i3 < 5; i3++) {
            if (i3 == 0) {
                atexturerenderer.drawScaledImage(this.textTextures[i3], this.gameStats1[0] + 128 + (this.fs[2] * this.boxScale) + (this.excessWidth / 2), (i3 * 36) + 378);
            } else {
                atexturerenderer.drawScaledImage(this.textTextures[i3], this.gameStats1[0] + 211 + (this.fs[2] * this.boxScale) + (this.excessWidth / 2), (i3 * 36) + 378);
            }
        }
        int i4 = -(getLength(dt) - 1);
        int a = getLength(dt) - 1;
        int i5 = 0;
        do {
            if (this.fs[2] == i5) {
                atexturerenderer.setImageColor(255, 255, 255);
                atexturerenderer.setImageAlpha(255);
            } else {
                atexturerenderer.setImageColor(0, 0, 0);
                atexturerenderer.setImageAlpha(200);
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[9], ((getWidth() / 2) - 6) + (i4 * 10), 60, 0);
            i4 += 2;
            a--;
            i5++;
        } while (a >= 0);
        atexturerenderer.setImageColor(255, 255, 255);
        atexturerenderer.setImageAlpha(255);
        atexturerenderer.setImageAlpha(127);
        if (this.fs[2] > 0) {
            atexturerenderer.drawScaledImagef(this.uiTextures[0], (int) (49.0f + (10.0f * aMath.sin(this.blinkFrame[4] * 30))), 171, 8);
        }
        atexturerenderer.setOrientation(1);
        if (this.fs[2] < this.boxCounts[1] - 1) {
            atexturerenderer.drawScaledImagef(this.uiTextures[0], ((int) (849.0f - (10.0f * aMath.sin(this.blinkFrame[4] * 30)))) + this.excessWidth, 171, 8);
        }
        atexturerenderer.setOrientation(0);
        atexturerenderer.setImageAlpha(255);
        atexturerenderer.setOrientation(0);
        atexturerenderer.drawScaledImagef(this.uiTextures[2], 0, -42, 10);
        atexturerenderer.drawScaledImagef(this.uiTextures[2], 0, 638, 10);
        atexturerenderer.drawScaledImagef(this.uiTextures[2], 0, 0, 0);
        if (this.gm[0] < 297) {
            if (this.previousScreen == 0) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 1);
            } else {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 8);
            }
        }
        if (this.gm[1] < 297) {
            atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[1], 3, 5);
        }
        if (!this.eE[0] && !this.eE[1] && !this.eE[9] && !this.eE[13] && !this.eE[2] && !this.eb && this.eE[10]) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], 3, 540, 96, 96, ((this.blinkFrame[4] % 4) / 2) + 12);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 0, 11);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 570, 17, 10);
        int i6 = this.aY;
        int i7 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i7 * 29)) + this.excessWidth, 6, i6 % 10);
            i6 /= 10;
            i7++;
        } while (i6 > 0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (633 - (dv[this.fx[15]] / 2)), 8 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 62, dv[this.fx[15]] + 36, 23);
        if (this.fs[2] >= 0) {
            if (this.bt[dt[this.fs[2]] - 2] == 0) {
                atexturerenderer.drawScaledImagef(this.uiTextures[6], this.gameStats1[0] + 430 + (this.fs[2] * this.boxScale) + (this.excessWidth / 2), 132 - du[this.blinkFrame[3]], 2);
                atexturerenderer.drawScaledImagef(this.uiTextures[6], this.gameStats1[0] + 440 + (this.fs[2] * this.boxScale) + (this.excessWidth / 2), 340, 3);
            } else if (this.unitBattleStats[1][0][1] == 0 || this.unitBattleStats[1][0][1] == 1 || this.unitBattleStats[1][0][1] == 2 || this.unitBattleStats[1][0][1] == 3 || this.unitBattleStats[1][0][1] == 5) {
                if (this.unitBattleStats[1][0][1] == 0) {
                    this.enemySlotModels[0].setAction(this.enemySlotAnims[0][0], this.unitBattleStats[1][0][2]);
                } else if (this.unitBattleStats[1][0][1] == 1) {
                    this.enemySlotModels[0].setAction(this.enemySlotAnims[0][1], this.unitBattleStats[1][0][2]);
                } else if (this.unitBattleStats[1][0][1] == 2) {
                    this.enemySlotModels[0].setAction(this.enemySlotAnims[0][2], this.unitBattleStats[1][0][2]);
                } else if (this.unitBattleStats[1][0][1] == 3) {
                    this.enemySlotModels[0].setAction(this.enemySlotAnims[0][3], this.unitBattleStats[1][0][2]);
                } else if (this.unitBattleStats[1][0][1] == 5) {
                    this.enemySlotModels[0].setAction(this.enemySlotAnims[0][3], this.unitBattleStats[1][0][2]);
                }
                this.enemySlotModels[0].getModelCollision(0).a().a(this.enemySlotModels[0], this.enemySlotModels[0].getModelCollision(0).b(), this.enemySlotModels[0].getModelCollision(0).c(), this.x);
                this.gameStats1[1] = getWidth() / 2;
                this.gameStats1[2] = (this.unitBattleStats[1][0][4] / 10) + 348;
                atexturerenderer.setTextures(this.enemySlotModels[0], (this.gameStats1[1] - (this.x.x / 2)) + (this.unitBattleStats[1][0][3] / 10) + this.gameStats1[0] + (this.fs[2] * this.boxScale), this.gameStats1[2] - this.x.y);
            } else if (this.unitBattleStats[1][0][1] == 4) {
                this.gameStats1[1] = (getWidth() / 2) - 42;
                this.gameStats1[2] = ((this.unitBattleStats[1][0][4] / 10) + 348) - 97;
                this.gameStats1[3] = eT[this.unitBattleStats[1][0][2] % 8];
                this.gameStats1[1] += (int)(this.unitBattleStats[1][0][27] * aMath.sin(this.unitBattleStats[1][0][29]));
                atexturerenderer.setImageAlpha(this.unitBattleStats[1][0][25]);
                atexturerenderer.drawScaledImage(this.uiTextures[8], this.boxScale + this.gameStats1[1] + this.gameStats1[0], this.gameStats1[2], 85, 100, this.gameStats1[3] + 13);
                atexturerenderer.setImageAlpha(255);
            }
        }
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], ((getWidth() / 2) - 572) - this.fP, 0, 572, 637, 0);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], this.fP + (getWidth() / 2), 0, 572, 637, 1);
        int i8 = 0;
        if (this.fR[0] == 0) {
            i8 = cu[this.blinkFrame[0]];
        } else if (this.fR[0] == 1) {
            i8 = cv[this.blinkFrame[0]];
        } else {
            int i9 = this.fR[0];
        }
        if (this.eE[0] || this.eE[1] || this.eE[13]) {
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i8, 355, 355, 0);
            if (this.blinkFrame[1] == 1 || this.blinkFrame[1] == 2 || this.blinkFrame[1] == 4 || this.blinkFrame[1] == 5) {
                atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i8, 355, 191, 2);
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[2], 0, -42, 10);
            atexturerenderer.drawScaledImagef(this.uiTextures[2], 0, 638, 10);
            atexturerenderer.drawScaledImagef(this.uiTextures[2], 0, 0, 0);
            if (this.gm[0] < 297) {
                if (this.previousScreen == 0) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 1);
                } else {
                    atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 8);
                }
            }
            if (this.gm[1] < 297) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[1], 3, 5);
            }
        }
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImagef(this.uiTextures[2], 0, 585, 0);
        atexturerenderer.setOrientation(0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.buttonCoordinates1[5][0] - (dv[this.fx[5]] / 2), this.buttonCoordinates1[5][1] - (dv[this.fx[5]] / 2), dv[this.fx[5]] + this.buttonCoordinates1[5][2], dv[this.fx[5]] + this.buttonCoordinates1[5][3], 9);
        atexturerenderer.drawScaledImage(this.uiTextures[0], (this.buttonCoordinates1[5][0] + 4) - (dv[this.fx[5]] / 2), (this.buttonCoordinates1[5][1] + 17) - (dv[this.fx[5]] / 2), dv[this.fx[5]] + 84, dv[this.fx[5]] + 60, 3);
        if (!this.eE[0] && !this.eE[1] && !this.eE[9] && !this.eE[13] && !this.eE[2] && !this.eb && this.eE[10]) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], 3, 540, 96, 96, ((this.blinkFrame[4] % 4) / 2) + 12);
        }
        if (this.eE[0] || this.eE[1] || this.eE[13]) {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 0, 11);
            atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 570, 17, 10);
            int i10 = this.aY;
            int i11 = 0;
            do {
                atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i11 * 29)) + this.excessWidth, 6, i10 % 10);
                i10 /= 10;
                i11++;
            } while (i10 > 0);
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (633 - (dv[this.fx[15]] / 2)), 8 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 62, dv[this.fx[15]] + 36, 23);
        }
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 585, 11);
        atexturerenderer.setOrientation(0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (688 - (dv[this.fx[14]] / 2)), 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
        if (this.bf >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (733 - (dv[this.fx[14]] / 2)), 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[0], this.excessWidth + 610, 607, 24);
        int i12 = this.catfood;
        int i13 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i13 * 29)) + this.excessWidth, 592, i12 % 10);
            i12 /= 10;
            i13++;
        } while (i12 > 0);
    }

    void loadEnemyStats() {
        // if (!aString.isEqual(aAssetTextStream.getHash("t_unit.csv"), new String[]{"48ffde5dd85d010a1e497456122afc2e"}[0])) {
        //     this.D = 0;
        //     setScene(SceneType.ERROR);
        //     return;
        // }
        aResourceFileStream aresourcefilestream = new aResourceFileStream();
        aresourcefilestream.openRead(String.format("t_unit.csv", new Object[0]));
        for (int i = 0; i < getLength(this.enemyStats); i++) {
            aresourcefilestream.readLine();
            for (int i2 = 0; i2 < getLength(this.enemyStats[i]); i2++) {
                this.enemyStats[i][i2] = 0;
                this.enemyStats[i][i2] = aresourcefilestream.getInt(i2);
            }
            this.enemyStats[i][2] = (this.enemyStats[i][2] * 4) / 2;
            this.enemyStats[i][4] = this.enemyStats[i][4] * 2;
            this.enemyStats[i][5] = this.enemyStats[i][5] * 4;
            this.enemyStats[i][8] = this.enemyStats[i][8] * 4;
        }
        for (int i3 = 0; i3 < getLength(this.enemyStats); i3++) {
            int[] iArr = this.enemyStats[i3];
            iArr[6] = iArr[6] * 100;
        }
        aresourcefilestream.close();
    }

    void legendDraw(aTextureRenderer atexturerenderer) {
        atexturerenderer.drawScaledImage(this.uiTextures[0], 0, -40, getWidth(), 720, 0);
        if (this.eQ >= 1) {
            if (this.blinkFrame[1] == 0) {
                this.aJ.setAction(this.legendAnims[0], this.blinkFrame[0]);
            } else {
                this.aJ.setAction(this.legendAnims[1], this.blinkFrame[0]);
            }
            this.aJ.getModelCollision(0).a().a(this.aJ, this.aJ.getModelCollision(0).b(), this.aJ.getModelCollision(0).c(), this.x);
            atexturerenderer.setTextures(this.aJ, (425 - this.x.x) + (this.excessWidth / 2), (320 - this.x.y) + 90);
        }
        atexturerenderer.drawScaledImage(this.popupTexture, (480 - (((eO[this.blinkFrame[2]] * 690) / 100) / 2)) + (this.excessWidth / 2), 529 - (((eO[this.blinkFrame[2]] * 179) / 100) / 2), (eO[this.blinkFrame[2]] * 690) / 100, (eO[this.blinkFrame[2]] * 179) / 100, 0);
        if (this.blinkFrame[2] >= getLength(eO) - 1 && this.eQ >= 1) {
            for (int i = 0; i < getLength(this.giftMessageText[this.eQ - 1]); i++) {
                if (i != 0) {
                    atexturerenderer.setColor(255, 255, 255);
                } else if ((this.blinkFrame[4] % 4) / 2 == 0) {
                    atexturerenderer.setColor(255, 255, 0);
                } else {
                    atexturerenderer.setColor(255, 0, 255);
                }
                atexturerenderer.drawScaledImage(this.textTextures[i], getWidth() / 2, (((i * 36) + 439) - 72) + 90, 1);
            }
        }
        if (this.blinkFrame[3] >= 10) {
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (657 - (dv[this.fx[0]] / 2)) + (this.excessWidth / 2), 360 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 168, dv[this.fx[0]] + 72, 0);
            atexturerenderer.drawScaledImage(this.uiTextures[1], (693 - (dv[this.fx[0]] / 2)) + (this.excessWidth / 2), 368 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 97, dv[this.fx[0]] + 55, 20);
            if (!this.eb && isPointerDown() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 657, 360, 168, 72, ((this.blinkFrame[4] % 4) / 2) + 1);
            }
        }
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    boolean g(int i) {
        if (!this.eb) {
            this.openingTimer = 0;
        } else if (i == 0) {
            this.openingTimer++;
            if (this.openingTimer == 1) {
                U();
            }
            if (this.openingTimer == 26) {
                screenTransition();
                switch (getSceneType()) {
                    case OPENING:
                        for (int i2 = 0; i2 < getLength(this.eM); i2++) {
                            this.eM[i2] = false;
                        }
                        setScene(SceneType.MAIN);
                        this.setScreenType(ScreenType.TITLE);
                        this.screenLoadState = -1;
                        break;
                    case MAIN:
                        if (this.getScreenType() != ScreenType.TITLE && this.getScreenType() != ScreenType.LEGEND) {
                            if (this.getScreenType() == ScreenType.CAT_BASE || (this.aZ == 0 && this.getScreenType() == ScreenType.MAP)) {
                                if (this.fE == 5) {
                                    this.setScreenType(ScreenType.TITLE);
                                    this.screenLoadState = -1;
                                    this.fI = 0;
                                    for (int i3 = 0; i3 < getLength(this.blinkFrame); i3++) {
                                        this.blinkFrame[i3] = 0;
                                    }
                                    for (int i4 = 0; i4 < getLength(this.fR); i4++) {
                                        this.fR[i4] = 0;
                                    }
                                    for (int i5 = 0; i5 < getLength(this.eM); i5++) {
                                        this.eM[i5] = false;
                                    }
                                    break;
                                } else if (this.aZ == 0 && this.getScreenType() == ScreenType.MAP) {
                                    this.setScreenType(ScreenType.TITLE);
                                    this.screenLoadState = -1;
                                    this.fI = 0;
                                    for (int i6 = 0; i6 < getLength(this.blinkFrame); i6++) {
                                        this.blinkFrame[i6] = 0;
                                    }
                                    for (int i7 = 0; i7 < getLength(this.fR); i7++) {
                                        this.fR[i7] = 0;
                                    }
                                    for (int i8 = 0; i8 < getLength(this.eM); i8++) {
                                        this.eM[i8] = false;
                                    }
                                    break;
                                }
                            }
                        } else {
                            if (this.eg == 0) {
                                if (this.aZ == 0) {
                                    this.setScreenType(ScreenType.MAP);
                                    this.screenLoadState = -1;
                                } else {
                                    this.setScreenType(ScreenType.CAT_BASE);
                                    this.screenLoadState = -1;
                                    this.fP = 0;
                                    this.eE[0] = false;
                                    this.fR[0] = 0;
                                }
                                for (int i9 = 0; i9 < getLength(this.uiTextures); i9++) {
                                    this.uiTextures[i9].reset();
                                }
                                if (this.uiTextures[0].isLoaded()) {
                                    this.uiTextures[0].reset();
                                }
                                if (!this.uiTextures[0].isLoaded()) {
                                    this.uiTextures[0].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
                                }
                                if (this.uiTextures[1].isLoaded()) {
                                    this.uiTextures[1].reset();
                                }
                                if (!this.uiTextures[1].isLoaded()) {
                                    this.uiTextures[1].load(MyUtility.getString(String.format("img%03d.png", 7)), MyUtility.getString(String.format("img%03d.imgcut", 7)));
                                }
                                if (this.uiTextures[2].isLoaded()) {
                                    this.uiTextures[2].reset();
                                }
                                if (!this.uiTextures[2].isLoaded()) {
                                    this.uiTextures[2].load(MyUtility.getString(String.format("img%03d.png", 8)), MyUtility.getString(String.format("img%03d.imgcut", 8)));
                                }
                                if (this.uiTextures[3].isLoaded()) {
                                    this.uiTextures[3].reset();
                                }
                                if (!this.uiTextures[3].isLoaded()) {
                                    this.uiTextures[3].load(MyUtility.getString(String.format("img%03d_%d.png", 9, 0)), MyUtility.getString(String.format("img%03d.imgcut", 9)));
                                }
                                if (this.uiTextures[4].isLoaded()) {
                                    this.uiTextures[4].reset();
                                }
                                if (!this.uiTextures[4].isLoaded()) {
                                    this.uiTextures[4].load(MyUtility.getString(String.format("img%03d.png", 10)), MyUtility.getString(String.format("img%03d.imgcut", 10)));
                                }
                                if (this.uiTextures[5].isLoaded()) {
                                    this.uiTextures[5].reset();
                                }
                                if (!this.uiTextures[5].isLoaded()) {
                                    this.uiTextures[5].load(MyUtility.getString(String.format("img%03d.png", 24)), MyUtility.getString(String.format("img%03d.imgcut", 24)));
                                }
                                if (this.settingsMenuTexture[0].isLoaded()) {
                                    this.settingsMenuTexture[0].reset();
                                }
                                if (!this.settingsMenuTexture[0].isLoaded()) {
                                    this.settingsMenuTexture[0].load(MyUtility.getString(String.format("img%03d_%d.png", 9, this.eQ + 3)), MyUtility.getString(String.format("img%03d_%d.imgcut", 9, this.eQ + 3)));
                                }
                                aSound.getInstance().stop(-1);
                                aSound.getInstance().play(SoundType.CAT_BASE);
                                for (int i10 = 0; i10 < getLength(this.eM); i10++) {
                                    this.eM[i10] = false;
                                }
                            } else if (this.eg == 1) {
                                setScene(SceneType.OPENING);
                                for (int i11 = 0; i11 < getLength(this.eM); i11++) {
                                    this.eM[i11] = false;
                                }
                            } else if (this.eg == 2) {
                                setScene(SceneType.ENDING);
                                for (int i12 = 0; i12 < getLength(this.eM); i12++) {
                                    this.eM[i12] = false;
                                }
                            }
                            this.bg = this.eQ;
                            if (this.getScreenType() != ScreenType.CAT_BASE) {
                                aSave();
                                break;
                            }
                        }
                        break;
                }
            }
            if (this.openingTimer >= 26) {
                this.eb = false;
                if (this.getScreenType() != ScreenType.CAT_BASE) {
                    aSave();
                    return false;
                }
                return false;
            }
        } else if (i == 1) {
            if (this.openingTimer == 10) {
                screenTransition();
                switch (getSceneType()) {
                    case BATTLE:
                        if (this.battleData[14] == 1 && this.battleData[21] == 0) {
                            if (this.bz[1] == 0) {
                                this.bz[1] = 1;
                            }
                            if (this.battleData[0] == 13 && this.bz[4] == 0) {
                                this.gu = true;
                                this.gw = 0;
                                this.gx = 3;
                                return false;
                            } else if (this.battleData[0] == 6 && this.be == 0) {
                                this.gu = true;
                                this.gw = 0;
                                this.gx = 4;
                                return false;
                            } else {
                                if (this.battleData[0] >= 1 && this.battleData[31] != -1) {
                                    for (int i13 = 0; i13 < getLength(this.unitBuyStats); i13++) {
                                        if (this.unitBuyStats[i13][15] == this.eQ && this.unitBuyStats[i13][0] == this.battleData[31]) {
                                            this.bC[this.unitBuyStats[i13][13]] = 0;
                                        }
                                    }
                                    for (int i14 = 0; i14 < getLength(this.unitBuyStats); i14++) {
                                        if (this.unitBuyStats[i14][15] == this.eQ && this.unitBuyStats[i14][0] == this.battleData[31]) {
                                            this.gu = true;
                                            this.gw = 0;
                                            this.gx = 999;
                                            this.battleData[31] = -1;
                                            this.by[1] = 1;
                                            return false;
                                        }
                                    }
                                }
                                if (this.eQ == 0 && this.battleData[0] == 6 && this.battleData[33] == 1) {
                                    this.gu = true;
                                    this.gw = 0;
                                    this.gx = 11;
                                    this.battleData[33] = 0;
                                    return false;
                                }
                            }
                        }
                        break;
                }
            }
            this.openingTimer++;
            if (this.openingTimer == 1) {
                U();
            }
            if (this.openingTimer == 11) {
                screenTransition();
                switch (getSceneType()) {
                    case ENDING:
                        if (this.eg == 2) {
                            setScene(SceneType.MAIN);
                            this.setScreenType(ScreenType.TITLE);
                            this.screenLoadState = -1;
                            for (int i15 = 0; i15 < getLength(this.eM); i15++) {
                                this.eM[i15] = false;
                            }
                            return false;
                        }
                        this.bj = 1;
                        setScene(SceneType.MAIN);
                        for (int i16 = 0; i16 < getLength(this.eM); i16++) {
                            this.eM[i16] = false;
                        }
                        this.fP = 0;
                        for (int i17 = 0; i17 < getLength(this.eE); i17++) {
                            this.eE[i17] = false;
                        }
                        for (int i18 = 0; i18 < getLength(this.blinkFrame); i18++) {
                            this.blinkFrame[i18] = 0;
                        }
                        for (int i19 = 0; i19 < getLength(this.fR); i19++) {
                            this.fR[i19] = 0;
                        }
                        this.setScreenType(ScreenType.TITLE);
                        this.screenLoadState = -1;
                        loadTextures2();
                        aSound.getInstance().stop(-1);
                        aSound.getInstance().play(SoundType.CAT_BASE);
                        if (this.getScreenType() != ScreenType.CAT_BASE) {
                            aSave();
                            return false;
                        }
                        return false;
                    case MAIN:
                        //aAd.b().f();
                        if (this.eg != 0) {
                            if (this.eg == 1) {
                                setScene(SceneType.OPENING);
                                this.eg = 0;
                                for (int i20 = 0; i20 < getLength(this.eM); i20++) {
                                    this.eM[i20] = false;
                                }
                                return false;
                            } else if (this.eg == 2) {
                                setScene(SceneType.ENDING);
                                this.eg = 0;
                                for (int i21 = 0; i21 < getLength(this.eM); i21++) {
                                    this.eM[i21] = false;
                                }
                                return false;
                            } else {
                                return false;
                            }
                        } else if (this.getScreenType() != ScreenType.STAMP) {
                            if (this.getScreenType() == ScreenType.CAT_BASE && this.bo == 1) {
                                this.setScreenType(ScreenType.STAMP);
                                this.screenLoadState = -1;
                                return false;
                            } else if (this.getScreenType() == ScreenType.TITLE && this.hr) {
                                this.setScreenType(ScreenType.LEGEND);
                                this.screenLoadState = -1;
                                this.hr = false;
                                return false;
                            } else {
                                if (this.getScreenType() == ScreenType.TITLE) {
                                    this.dH = 48;
                                    this.eQ = 0;
                                }
                                setScene(SceneType.BATTLE);
                                if (this.getScreenType() != ScreenType.CAT_BASE) {
                                    aSave();
                                    return false;
                                }
                                return false;
                            }
                        } else {
                            this.setScreenType(ScreenType.CAT_BASE);
                            this.screenLoadState = -1;
                            this.bo = 0;
                            this.aV--;
                            if (this.aV <= 0) {
                                this.aV = 0;
                            }
                            if (this.bl >= 30) {
                                for (int i22 = 0; i22 < getLength(this.bm); i22++) {
                                    this.bm[i22] = 0;
                                }
                                this.bl = 0;
                            }
                            if (this.hp == 1) {
                                this.bz[1] = 1;
                            } else if (this.hp == 2) {
                                this.bz[2] = 1;
                            } else if (this.hp == 3) {
                                this.bz[3] = 1;
                            } else if (this.hp == 4) {
                                this.bz[4] = 1;
                            }
                            this.hp = 0;
                            if (this.getScreenType() != ScreenType.CAT_BASE) {
                                aSave();
                                return false;
                            }
                            return false;
                        }
                    case BATTLE:
                        if (this.battleData[14] == 0) {
                            if (this.aZ == 0) {
                                for (int i23 = 0; i23 < getLength(this.eM); i23++) {
                                    this.eM[i23] = false;
                                }
                                setScene(SceneType.MAIN);
                                this.setScreenType(ScreenType.TITLE);
                                this.screenLoadState = -1;
                                for (int i24 = 0; i24 < getLength(this.eM); i24++) {
                                    this.eM[i24] = false;
                                }
                                return false;
                            } else if (this.dH >= 48) {
                                for (int i25 = 0; i25 < getLength(this.eM); i25++) {
                                    this.eM[i25] = false;
                                }
                                setScene(SceneType.MAIN);
                                this.fP = 0;
                                for (int i26 = 0; i26 < getLength(this.eE); i26++) {
                                    this.eE[i26] = false;
                                }
                                for (int i27 = 0; i27 < getLength(this.blinkFrame); i27++) {
                                    this.blinkFrame[i27] = 0;
                                }
                                for (int i28 = 0; i28 < getLength(this.fR); i28++) {
                                    this.fR[i28] = 0;
                                }
                                this.setScreenType(ScreenType.TITLE);
                                this.screenLoadState = -1;
                                loadTextures2();
                                this.gL = true;
                                if (this.getScreenType() != ScreenType.CAT_BASE) {
                                    aSave();
                                    return false;
                                }
                                return false;
                            } else {
                                for (int i29 = 0; i29 < getLength(this.eM); i29++) {
                                    this.eM[i29] = false;
                                }
                                for (int i30 = 0; i30 < getLength(this.scrollAmount); i30++) {
                                    this.scrollAmount[i30] = 0;
                                }
                                setScene(SceneType.MAIN);
                                this.fP = 0;
                                for (int i31 = 0; i31 < getLength(this.eE); i31++) {
                                    this.eE[i31] = false;
                                }
                                for (int i32 = 0; i32 < getLength(this.blinkFrame); i32++) {
                                    this.blinkFrame[i32] = 0;
                                }
                                for (int i33 = 0; i33 < getLength(this.fR); i33++) {
                                    this.fR[i33] = 0;
                                }
                                this.setScreenType(ScreenType.CAT_BASE);
                                this.screenLoadState = -1;
                                for (int i34 = 0; i34 < getLength(this.uiTextures); i34++) {
                                    this.uiTextures[i34].reset();
                                }
                                if (this.uiTextures[0].isLoaded()) {
                                    this.uiTextures[0].reset();
                                }
                                if (!this.uiTextures[0].isLoaded()) {
                                    this.uiTextures[0].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
                                }
                                if (this.uiTextures[1].isLoaded()) {
                                    this.uiTextures[1].reset();
                                }
                                if (!this.uiTextures[1].isLoaded()) {
                                    this.uiTextures[1].load(MyUtility.getString(String.format("img%03d.png", 7)), MyUtility.getString(String.format("img%03d.imgcut", 7)));
                                }
                                if (this.uiTextures[2].isLoaded()) {
                                    this.uiTextures[2].reset();
                                }
                                if (!this.uiTextures[2].isLoaded()) {
                                    this.uiTextures[2].load(MyUtility.getString(String.format("img%03d.png", 8)), MyUtility.getString(String.format("img%03d.imgcut", 8)));
                                }
                                if (this.uiTextures[3].isLoaded()) {
                                    this.uiTextures[3].reset();
                                }
                                if (!this.uiTextures[3].isLoaded()) {
                                    this.uiTextures[3].load(MyUtility.getString(String.format("img%03d_%d.png", 9, 0)), MyUtility.getString(String.format("img%03d.imgcut", 9)));
                                }
                                if (this.uiTextures[4].isLoaded()) {
                                    this.uiTextures[4].reset();
                                }
                                if (!this.uiTextures[4].isLoaded()) {
                                    this.uiTextures[4].load(MyUtility.getString(String.format("img%03d.png", 10)), MyUtility.getString(String.format("img%03d.imgcut", 10)));
                                }
                                if (this.uiTextures[5].isLoaded()) {
                                    this.uiTextures[5].reset();
                                }
                                if (!this.uiTextures[5].isLoaded()) {
                                    this.uiTextures[5].load(MyUtility.getString(String.format("img%03d.png", 24)), MyUtility.getString(String.format("img%03d.imgcut", 24)));
                                }
                                if (this.settingsMenuTexture[0].isLoaded()) {
                                    this.settingsMenuTexture[0].reset();
                                }
                                if (!this.settingsMenuTexture[0].isLoaded()) {
                                    this.settingsMenuTexture[0].load(MyUtility.getString(String.format("img%03d_%d.png", 9, this.eQ + 3)), MyUtility.getString(String.format("img%03d_%d.imgcut", 9, this.eQ + 3)));
                                }
                                loadTextures2();
                                aSound.getInstance().stop(-1);
                                aSound.getInstance().play(SoundType.CAT_BASE);
                                if (this.getScreenType() != ScreenType.CAT_BASE) {
                                    aSave();
                                    return false;
                                }
                                return false;
                            }
                        } else if (this.battleData[14] == 1) {
                            for (int i35 = 0; i35 < getLength(this.scrollAmount); i35++) {
                                this.scrollAmount[i35] = 0;
                            }
                            if (this.battleData[21] == 0) {
                                if (!this.gu) {
                                    for (int i36 = 0; i36 < getLength(this.eM); i36++) {
                                        this.eM[i36] = false;
                                    }
                                    setScene(SceneType.MAIN);
                                    this.fP = 0;
                                    for (int i37 = 0; i37 < getLength(this.eE); i37++) {
                                        this.eE[i37] = false;
                                    }
                                    for (int i38 = 0; i38 < getLength(this.blinkFrame); i38++) {
                                        this.blinkFrame[i38] = 0;
                                    }
                                    for (int i39 = 0; i39 < getLength(this.fR); i39++) {
                                        this.fR[i39] = 0;
                                    }
                                    this.setScreenType(ScreenType.CAT_BASE);
                                    this.screenLoadState = -1;
                                    for (int i40 = 0; i40 < getLength(this.fx); i40++) {
                                        this.fx[i40] = 0;
                                    }
                                    for (int i41 = 0; i41 < getLength(this.eK); i41++) {
                                        this.eK[i41] = 0;
                                    }
                                    for (int i42 = 0; i42 < getLength(this.hk); i42++) {
                                        this.hk[i42] = 0;
                                    }
                                    for (int i43 = 0; i43 < getLength(this.fC); i43++) {
                                        this.fC[i43] = 0;
                                    }
                                    for (int i44 = 0; i44 < getLength(this.fy); i44++) {
                                        this.fy[i44] = 0;
                                    }
                                    for (int i45 = 0; i45 < getLength(this.fz); i45++) {
                                        this.fz[i45] = 0;
                                    }
                                    for (int i46 = 0; i46 < getLength(this.scrollAmount); i46++) {
                                        this.scrollAmount[i46] = 0;
                                    }
                                    for (int i47 = 0; i47 < getLength(this.uiTextures); i47++) {
                                        this.uiTextures[i47].reset();
                                    }
                                    if (this.uiTextures[0].isLoaded()) {
                                        this.uiTextures[0].reset();
                                    }
                                    if (!this.uiTextures[0].isLoaded()) {
                                        this.uiTextures[0].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
                                    }
                                    if (this.uiTextures[1].isLoaded()) {
                                        this.uiTextures[1].reset();
                                    }
                                    if (!this.uiTextures[1].isLoaded()) {
                                        this.uiTextures[1].load(MyUtility.getString(String.format("img%03d.png", 7)), MyUtility.getString(String.format("img%03d.imgcut", 7)));
                                    }
                                    if (this.uiTextures[2].isLoaded()) {
                                        this.uiTextures[2].reset();
                                    }
                                    if (!this.uiTextures[2].isLoaded()) {
                                        this.uiTextures[2].load(MyUtility.getString(String.format("img%03d.png", 8)), MyUtility.getString(String.format("img%03d.imgcut", 8)));
                                    }
                                    if (this.uiTextures[3].isLoaded()) {
                                        this.uiTextures[3].reset();
                                    }
                                    if (!this.uiTextures[3].isLoaded()) {
                                        this.uiTextures[3].load(MyUtility.getString(String.format("img%03d_%d.png", 9, 0)), MyUtility.getString(String.format("img%03d.imgcut", 9)));
                                    }
                                    if (this.uiTextures[4].isLoaded()) {
                                        this.uiTextures[4].reset();
                                    }
                                    if (!this.uiTextures[4].isLoaded()) {
                                        this.uiTextures[4].load(MyUtility.getString(String.format("img%03d.png", 10)), MyUtility.getString(String.format("img%03d.imgcut", 10)));
                                    }
                                    if (this.uiTextures[5].isLoaded()) {
                                        this.uiTextures[5].reset();
                                    }
                                    if (!this.uiTextures[5].isLoaded()) {
                                        this.uiTextures[5].load(MyUtility.getString(String.format("img%03d.png", 24)), MyUtility.getString(String.format("img%03d.imgcut", 24)));
                                    }
                                    if (this.settingsMenuTexture[0].isLoaded()) {
                                        this.settingsMenuTexture[0].reset();
                                    }
                                    if (!this.settingsMenuTexture[0].isLoaded()) {
                                        this.settingsMenuTexture[0].load(MyUtility.getString(String.format("img%03d_%d.png", 9, this.eQ + 3)), MyUtility.getString(String.format("img%03d_%d.imgcut", 9, this.eQ + 3)));
                                    }
                                    loadTextures2();
                                    aSound.getInstance().stop(-1);
                                    aSound.getInstance().play(SoundType.CAT_BASE);
                                    if (this.aZ == 0) {
                                    }
                                    this.aZ = 1;
                                    this.bf = 1;
                                    if (this.getScreenType() != ScreenType.CAT_BASE) {
                                        aSave();
                                        break;
                                    }
                                }
                            } else {
                                this.aZ = 1;
                                this.bf = 1;
                                for (int i48 = 0; i48 < getLength(this.eM); i48++) {
                                    this.eM[i48] = false;
                                }
                                loadTextures2();
                                setScene(SceneType.ENDING);
                                return false;
                            }
                        } else if (this.battleData[14] == 2) {
                            if (this.eR == 0) {
                                for (int i49 = 0; i49 < getLength(this.fx); i49++) {
                                    this.fx[i49] = 0;
                                }
                                for (int i50 = 0; i50 < getLength(this.eK); i50++) {
                                    this.eK[i50] = 0;
                                }
                                for (int i51 = 0; i51 < getLength(this.hk); i51++) {
                                    this.hk[i51] = 0;
                                }
                                for (int i52 = 0; i52 < getLength(this.fC); i52++) {
                                    this.fC[i52] = 0;
                                }
                                for (int i53 = 0; i53 < getLength(this.fy); i53++) {
                                    this.fy[i53] = 0;
                                }
                                for (int i54 = 0; i54 < getLength(this.fz); i54++) {
                                    this.fz[i54] = 0;
                                }
                                for (int i55 = 0; i55 < getLength(this.scrollAmount); i55++) {
                                    this.scrollAmount[i55] = 0;
                                }
                                if (this.aZ == 0) {
                                    for (int i56 = 0; i56 < getLength(this.eM); i56++) {
                                        this.eM[i56] = false;
                                    }
                                    setScene(SceneType.MAIN);
                                    this.setScreenType(ScreenType.TITLE);
                                    this.screenLoadState = -1;
                                    return false;
                                }
                                for (int i57 = 0; i57 < getLength(this.eM); i57++) {
                                    this.eM[i57] = false;
                                }
                                setScene(SceneType.MAIN);
                                this.setScreenType(ScreenType.CAT_BASE);
                                this.screenLoadState = -1;
                                this.fP = 0;
                                for (int i58 = 0; i58 < getLength(this.eE); i58++) {
                                    this.eE[i58] = false;
                                }
                                for (int i59 = 0; i59 < getLength(this.blinkFrame); i59++) {
                                    this.blinkFrame[i59] = 0;
                                }
                                for (int i60 = 0; i60 < getLength(this.fR); i60++) {
                                    this.fR[i60] = 0;
                                }
                                for (int i61 = 0; i61 < getLength(this.uiTextures); i61++) {
                                    this.uiTextures[i61].reset();
                                }
                                if (this.uiTextures[0].isLoaded()) {
                                    this.uiTextures[0].reset();
                                }
                                if (!this.uiTextures[0].isLoaded()) {
                                    this.uiTextures[0].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
                                }
                                if (this.uiTextures[1].isLoaded()) {
                                    this.uiTextures[1].reset();
                                }
                                if (!this.uiTextures[1].isLoaded()) {
                                    this.uiTextures[1].load(MyUtility.getString(String.format("img%03d.png", 7)), MyUtility.getString(String.format("img%03d.imgcut", 7)));
                                }
                                if (this.uiTextures[2].isLoaded()) {
                                    this.uiTextures[2].reset();
                                }
                                if (!this.uiTextures[2].isLoaded()) {
                                    this.uiTextures[2].load(MyUtility.getString(String.format("img%03d.png", 8)), MyUtility.getString(String.format("img%03d.imgcut", 8)));
                                }
                                if (this.uiTextures[3].isLoaded()) {
                                    this.uiTextures[3].reset();
                                }
                                if (!this.uiTextures[3].isLoaded()) {
                                    this.uiTextures[3].load(MyUtility.getString(String.format("img%03d_%d.png", 9, 0)), MyUtility.getString(String.format("img%03d.imgcut", 9)));
                                }
                                if (this.uiTextures[4].isLoaded()) {
                                    this.uiTextures[4].reset();
                                }
                                if (!this.uiTextures[4].isLoaded()) {
                                    this.uiTextures[4].load(MyUtility.getString(String.format("img%03d.png", 10)), MyUtility.getString(String.format("img%03d.imgcut", 10)));
                                }
                                if (this.uiTextures[5].isLoaded()) {
                                    this.uiTextures[5].reset();
                                }
                                if (!this.uiTextures[5].isLoaded()) {
                                    this.uiTextures[5].load(MyUtility.getString(String.format("img%03d.png", 24)), MyUtility.getString(String.format("img%03d.imgcut", 24)));
                                }
                                if (this.settingsMenuTexture[0].isLoaded()) {
                                    this.settingsMenuTexture[0].reset();
                                }
                                if (!this.settingsMenuTexture[0].isLoaded()) {
                                    this.settingsMenuTexture[0].load(MyUtility.getString(String.format("img%03d_%d.png", 9, this.eQ + 3)), MyUtility.getString(String.format("img%03d_%d.imgcut", 9, this.eQ + 3)));
                                }
                                loadTextures2();
                                aSound.getInstance().stop(-1);
                                aSound.getInstance().play(SoundType.CAT_BASE);
                                return false;
                            } else if (this.eR == 1) {
                                for (int i62 = 0; i62 < getLength(this.gameStats1); i62++) {
                                    this.gameStats1[i62] = 0;
                                }
                                for (int i63 = 0; i63 < getLength(this.ei); i63++) {
                                    this.ei[i63] = 0;
                                }
                                for (int i64 = 0; i64 < getLength(this.blinkFrame); i64++) {
                                    this.blinkFrame[i64] = 0;
                                }
                                for (int i65 = 0; i65 < getLength(this.unitBattleStats[1]); i65++) {
                                    int i66 = 0;
                                    while (true) {
                                        if (i66 >= 10) {
                                            i66 = 0;
                                            break;
                                        } else if (this.slotEnemyIDs[i66] != this.unitBattleStats[1][i65][0]) {
                                            i66++;
                                        }
                                    }
                                    if (this.unitBattleStats[1][i65][1] == 2) {
                                        this.unitBattleStats[1][i65][2] = this.enemySlotAnims[i66][1].b() - 1;
                                    }
                                }
                                this.buttonCoordinates1[0][0] = this.excessWidth + 814;
                                this.buttonCoordinates1[0][1] = this.eZ + 510;
                                this.buttonCoordinates1[0][2] = 146;
                                this.buttonCoordinates1[0][3] = 130;
                                this.buttonCoordinates1[1][0] = 0;
                                this.buttonCoordinates1[1][1] = this.eZ + 515;
                                this.buttonCoordinates1[1][2] = 146;
                                this.buttonCoordinates1[1][3] = 125;
                                for (int i67 = 0; i67 < getLength(this.eI); i67++) {
                                    this.eI[i67] = 0;
                                }
                                for (int i68 = 0; i68 < getLength(this.rechargeTimes); i68++) {
                                    this.rechargeTimes[i68] = 0;
                                }
                                for (int i69 = 0; i69 < getLength(this.bS); i69++) {
                                    for (int i70 = 0; i70 < getLength(this.bS[i69]); i70++) {
                                        for (int i71 = 0; i71 < getLength(this.bS[i69][i70]); i71++) {
                                            this.bS[i69][i70][i71] = 0;
                                        }
                                    }
                                }
                                for (int i72 = 0; i72 < getLength(this.bT); i72++) {
                                    for (int i73 = 0; i73 < getLength(this.bT[i72]); i73++) {
                                        this.bT[i72][i73] = 0;
                                    }
                                }
                                this.battleData[5] = this.bV[0] - 9600;
                                this.battleData[15] = 0;
                                this.battleData[14] = 3;
                                this.unitBattleStats[0][0][1] = 0;
                                this.unitBattleStats[0][0][7] = ad[6] + (this.bx[6] * 1000);
                                if (this.bx[6] >= 4 && this.bx[6] <= 7) {
                                    this.unitBattleStats[0][0][7] = ((this.bx[6] - 4) * 2000) + 6000;
                                } else if (this.bx[6] >= 8) {
                                    this.unitBattleStats[0][0][7] = ((this.bx[6] - 8) * 3000) + 15000;
                                }
                                for (int i74 = 0; i74 < 10; i74++) {
                                    int[] iArr = this.unitBattleStats[0][0];
                                    iArr[7] = iArr[7] + ((cB[4] * this.bO[i74][4]) / 100);
                                }
                                this.unitBattleStats[0][0][8] = this.unitBattleStats[0][0][7];
                                for (int i75 = 0; i75 < getLength(this.unitBattleStats[1]); i75++) {
                                    this.unitBattleStats[1][i75][3] = 2800;
                                }
                                this.gameStats1[0] = 0;
                                int i76 = 0;
                                while (true) {
                                    if (i76 < 10) {
                                        if (this.eQ == i76 && this.battleData[0] == 47) {
                                            this.gameStats1[0] = i76;
                                        } else {
                                            i76++;
                                        }
                                    }
                                    else{
                                        break;
                                    }
                                }
                                if (this.gameStats1[0] >= 1) {
                                    int[] iArr2 = this.gameStats1;
                                    iArr2[0] = iArr2[0] + 1;
                                }
                                if (this.cj[4] == 0) {
                                    aSound.getInstance().stop(-1);
                                    aSound.getInstance().play(cn[(this.battleData[0] + this.gameStats1[0]) * 3]);
                                } else {
                                    aSound.getInstance().stop(-1);
                                    aSound.getInstance().play(cn[((this.battleData[0] + this.gameStats1[0]) * 3) + 2]);
                                }
                                for (int i77 = 0; i77 < getLength(this.em); i77++) {
                                    this.em[i77] = 0;
                                }
                                for (int i78 = 0; i78 < getLength(this.en); i78++) {
                                    this.en[i78] = 0;
                                }
                                this.eo = 0;
                                for (int i79 = 0; i79 < getLength(this.ep); i79++) {
                                    this.ep[i79] = 0.0f;
                                }
                                for (int i80 = 0; i80 < getLength(this.eq); i80++) {
                                    this.eq[i80] = 0;
                                }
                                for (int i81 = 0; i81 < getLength(this.er); i81++) {
                                    this.er[i81] = 0;
                                }
                                for (int i82 = 0; i82 < getLength(this.es); i82++) {
                                    this.es[i82] = 0;
                                }
                                for (int i83 = 0; i83 < getLength(this.et); i83++) {
                                    this.et[i83] = false;
                                }
                                for (int i84 = 0; i84 < getLength(this.eu); i84++) {
                                    this.eu[i84] = 0;
                                }
                                for (int i85 = 0; i85 < getLength(this.ev); i85++) {
                                    this.ev[i85] = 0;
                                }
                                this.ew = 0;
                                for (int i86 = 0; i86 < getLength(this.ev); i86++) {
                                    this.ev[i86] = 0;
                                }
                                this.ex = false;
                                this.ey = 0;
                                this.ez = 0;
                                for (int i87 = 0; i87 < getLength(this.eA); i87++) {
                                    for (int i88 = 0; i88 < getLength(this.eA[i87]); i88++) {
                                        this.eA[i87][i88] = 0;
                                    }
                                }
                                for (int i89 = 0; i89 < getLength(this.eB); i89++) {
                                    for (int i90 = 0; i90 < getLength(this.eB[i89]); i90++) {
                                        for (int i91 = 0; i91 < getLength(this.eB[i89][i90]); i91++) {
                                            this.eB[i89][i90][i91] = 0;
                                        }
                                    }
                                }
                                for (int i92 = 0; i92 < getLength(this.scrollAmount); i92++) {
                                    this.scrollAmount[i92] = 0;
                                }
                                for (int i93 = 0; i93 < getLength(this.fx); i93++) {
                                    this.fx[i93] = 0;
                                }
                                for (int i94 = 0; i94 < getLength(this.eK); i94++) {
                                    this.eK[i94] = 0;
                                }
                                for (int i95 = 0; i95 < getLength(this.hk); i95++) {
                                    this.hk[i95] = 0;
                                }
                                for (int i96 = 0; i96 < getLength(this.fC); i96++) {
                                    this.fC[i96] = 0;
                                }
                                for (int i97 = 0; i97 < getLength(this.fy); i97++) {
                                    this.fy[i97] = 0;
                                }
                                for (int i98 = 0; i98 < getLength(this.fz); i98++) {
                                    this.fz[i98] = 0;
                                }
                                this.eC = false;
                                break;
                            }
                        } else if (this.battleData[14] == 4) {
                            for (int i99 = 0; i99 < getLength(this.eM); i99++) {
                                this.eM[i99] = false;
                            }
                            setScene(SceneType.MAIN);
                            this.fP = 0;
                            for (int i100 = 0; i100 < getLength(this.eE); i100++) {
                                this.eE[i100] = false;
                            }
                            for (int i101 = 0; i101 < getLength(this.blinkFrame); i101++) {
                                this.blinkFrame[i101] = 0;
                            }
                            for (int i102 = 0; i102 < getLength(this.fR); i102++) {
                                this.fR[i102] = 0;
                            }
                            for (int i103 = 0; i103 < getLength(this.fx); i103++) {
                                this.fx[i103] = 0;
                            }
                            for (int i104 = 0; i104 < getLength(this.eK); i104++) {
                                this.eK[i104] = 0;
                            }
                            for (int i105 = 0; i105 < getLength(this.hk); i105++) {
                                this.hk[i105] = 0;
                            }
                            for (int i106 = 0; i106 < getLength(this.fC); i106++) {
                                this.fC[i106] = 0;
                            }
                            for (int i107 = 0; i107 < getLength(this.fy); i107++) {
                                this.fy[i107] = 0;
                            }
                            for (int i108 = 0; i108 < getLength(this.fz); i108++) {
                                this.fz[i108] = 0;
                            }
                            this.setScreenType(ScreenType.TITLE);
                            this.screenLoadState = -1;
                            loadTextures2();
                            this.gL = true;
                            if (this.getScreenType() != ScreenType.CAT_BASE) {
                                aSave();
                                return false;
                            }
                            return false;
                        } else if (this.battleData[14] == 5) {
                            for (int i109 = 0; i109 < getLength(this.eM); i109++) {
                                this.eM[i109] = false;
                            }
                            setScene(SceneType.MAIN);
                            this.fP = 0;
                            for (int i110 = 0; i110 < getLength(this.eE); i110++) {
                                this.eE[i110] = false;
                            }
                            for (int i111 = 0; i111 < getLength(this.blinkFrame); i111++) {
                                this.blinkFrame[i111] = 0;
                            }
                            for (int i112 = 0; i112 < getLength(this.fR); i112++) {
                                this.fR[i112] = 0;
                            }
                            for (int i113 = 0; i113 < getLength(this.fx); i113++) {
                                this.fx[i113] = 0;
                            }
                            for (int i114 = 0; i114 < getLength(this.eK); i114++) {
                                this.eK[i114] = 0;
                            }
                            for (int i115 = 0; i115 < getLength(this.hk); i115++) {
                                this.hk[i115] = 0;
                            }
                            for (int i116 = 0; i116 < getLength(this.fC); i116++) {
                                this.fC[i116] = 0;
                            }
                            for (int i117 = 0; i117 < getLength(this.fy); i117++) {
                                this.fy[i117] = 0;
                            }
                            for (int i118 = 0; i118 < getLength(this.fz); i118++) {
                                this.fz[i118] = 0;
                            }
                            for (int i119 = 0; i119 < getLength(this.scrollAmount); i119++) {
                                this.scrollAmount[i119] = 0;
                            }
                            this.setScreenType(ScreenType.TITLE);
                            this.screenLoadState = -1;
                            loadTextures2();
                            this.gL = true;
                            if (this.getScreenType() != ScreenType.CAT_BASE) {
                                aSave();
                                return false;
                            }
                            return false;
                        }
                        break;
                }
            }
            if (this.openingTimer > 23) {
                screenTransition();
                this.eb = false;
                return false;
            }
        }
        return true;
    }

    void h(int i) {
        if (this.fr == -1) {
            boolean z = true;
            for (int i2 = 0; i2 < getLength(cz[i]) && cz[i][i2] != -1; i2++) {
                if (this.bs[this.eQ][cz[i][i2]] == 0) {
                    z = false;
                }
            }
            if (this.uiTextures[7].isLoaded()) {
                this.uiTextures[7].reset();
            }
            if (z) {
                if (!this.uiTextures[7].isLoaded()) {
                    this.uiTextures[7].load(MyUtility.getString(String.format("ot%03d_o.png", cA[i])), MyUtility.getString(String.format("ot%03d_o.imgcut", cA[i])));
                }
            } else if (!this.uiTextures[7].isLoaded()) {
                this.uiTextures[7].load(MyUtility.getString(String.format("ot%03d_c.png", cA[i])), MyUtility.getString(String.format("ot%03d_c.imgcut", cA[i])));
            }
            for (int i3 = 0; i3 < getLength(this.textTextures); i3++) {
                if (this.textTextures[i3].isLoaded()) {
                    this.textTextures[i3].reset();
                }
            }
            for (int i4 = 0; i4 < 3; i4++) {
                if (z) {
                    if (!this.textTextures[i4].isLoaded()) {
                        if (i4 == 0) {
                            this.textTextures[i4].drawText(this.treasure3Text[i][i4], "FONT_SYSTEM_BOLD", 30, 0);
                        } else {
                            this.textTextures[i4].drawText(this.treasure3Text[i][i4], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                } else if (!this.textTextures[i4].isLoaded()) {
                    this.textTextures[i4].drawText(this.treasure3Text[i + 12][i4], "FONT_SYSTEM_BOLD", 30, 1);
                }
            }
            if (z) {
                if (this.regionState == 0) {
                    if (!this.textTextures[3].isLoaded()) {
                        this.textTextures[3].drawText(String.format("%d%s%s", this.bO[this.eQ][i], this.treasure2Text[8], this.treasure2Text[7]), "FONT_SYSTEM_BOLD", 30, 0);
                    }
                } else if (this.regionState == 1 && !this.textTextures[3].isLoaded()) {
                    this.textTextures[3].drawText(String.format("%s%d%s", this.treasure2Text[7], this.bO[this.eQ][i], this.treasure2Text[8]), "FONT_SYSTEM_BOLD", 30, 0);
                }
            }
            for (int i5 = 0; i5 < getLength(cz[i]) && cz[i][i5] != -1; i5++) {
                if (this.bs[this.eQ][cz[i][i5]] == 0) {
                    if (this.regionState == 0) {
                        if (!this.textTextures[(i5 * 3) + 4 + 0].isLoaded()) {
                            this.textTextures[(i5 * 3) + 4 + 0].drawText(this.treasure2Text[3], "FONT_SYSTEM_BOLD", 30, 0);
                        }
                        if (!this.textTextures[(i5 * 3) + 4 + 1].isLoaded()) {
                            this.textTextures[(i5 * 3) + 4 + 1].drawText(this.treasure1Text[48], "FONT_SYSTEM_BOLD", 30, 0);
                        }
                        this.textTextures[(i5 * 3) + 4 + 2].drawText(String.format("%s%s", this.stageNameText[cz[i][i5]], this.treasure2Text[9]), "FONT_SYSTEM_BOLD", 30, 0);
                    } else if (this.regionState == 1) {
                        if (!this.textTextures[(i5 * 3) + 4 + 0].isLoaded()) {
                            this.textTextures[(i5 * 3) + 4 + 0].drawText(this.treasure2Text[3], "FONT_SYSTEM_BOLD", 30, 0);
                        }
                        if (this.fq[2] != 10) {
                            if (!this.textTextures[(i5 * 3) + 4 + 1].isLoaded()) {
                                this.textTextures[(i5 * 3) + 4 + 1].drawText(String.format(" %s", this.treasure1Text[48]), "FONT_SYSTEM_BOLD", 30, 0);
                            }
                        } else if (!this.textTextures[(i5 * 3) + 4 + 1].isLoaded()) {
                            this.textTextures[(i5 * 3) + 4 + 1].drawText(String.format(" %s", this.treasure1Text[48]), "FONT_SYSTEM_BOLD", 30, 0);
                        }
                        this.textTextures[(i5 * 3) + 4 + 2].drawText(String.format("%s %s", this.treasure2Text[4], this.stageNameText[cz[i][i5] + 49]), "FONT_SYSTEM_BOLD", 30, 0);
                    }
                } else if (this.bs[this.eQ][cz[i][i5]] == 1) {
                    if (this.regionState == 0) {
                        this.textTextures[(i5 * 3) + 4 + 0].drawText(this.treasure2Text[3], "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 1].drawText(String.format("%s%s", this.treasure2Text[0], this.treasure1Text[cz[i][i5]]), "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 2].drawText(String.format("%s%s", this.stageNameText[cz[i][i5]], this.treasure2Text[4]), "FONT_SYSTEM_BOLD", 30, 0);
                    } else if (this.regionState == 1) {
                        this.textTextures[(i5 * 3) + 4 + 0].drawText(String.format("%s", this.treasure2Text[10]), "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 1].drawText(String.format("%s %s", this.treasure2Text[0], this.treasure1Text[cz[i][i5]]), "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 2].drawText(String.format("%s %s", this.treasure2Text[4], this.stageNameText[cz[i][i5] + 49]), "FONT_SYSTEM_BOLD", 30, 0);
                    }
                } else if (this.bs[this.eQ][cz[i][i5]] == 2) {
                    if (this.regionState == 0) {
                        this.textTextures[(i5 * 3) + 4 + 0].drawText(this.treasure2Text[3], "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 1].drawText(String.format("%s%s", this.treasure2Text[1], this.treasure1Text[cz[i][i5]]), "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 2].drawText(String.format("%s%s", this.stageNameText[cz[i][i5]], this.treasure2Text[4]), "FONT_SYSTEM_BOLD", 30, 0);
                    } else if (this.regionState == 1) {
                        this.textTextures[(i5 * 3) + 4 + 0].drawText(String.format("%s", this.treasure2Text[10]), "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 1].drawText(String.format("%s %s", this.treasure2Text[1], this.treasure1Text[cz[i][i5]]), "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 2].drawText(String.format("%s %s", this.treasure2Text[4], this.stageNameText[cz[i][i5] + 49]), "FONT_SYSTEM_BOLD", 30, 0);
                    }
                } else if (this.bs[this.eQ][cz[i][i5]] == 3) {
                    if (this.regionState == 0) {
                        this.textTextures[(i5 * 3) + 4 + 0].drawText(this.treasure2Text[3], "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 1].drawText(String.format("%s%s", this.treasure2Text[2], this.treasure1Text[cz[i][i5]]), "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 2].drawText(String.format("%s%s", this.stageNameText[cz[i][i5]], this.treasure2Text[4]), "FONT_SYSTEM_BOLD", 30, 0);
                    } else if (this.regionState == 1) {
                        this.textTextures[(i5 * 3) + 4 + 0].drawText(String.format("%s", this.treasure2Text[10]), "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 1].drawText(String.format("%s %s", this.treasure2Text[2], this.treasure1Text[cz[i][i5]]), "FONT_SYSTEM_BOLD", 30, 0);
                        this.textTextures[(i5 * 3) + 4 + 2].drawText(String.format("%s %s", this.treasure2Text[4], this.stageNameText[cz[i][i5] + 49]), "FONT_SYSTEM_BOLD", 30, 0);
                    }
                }
            }
            this.fr = 1;
        }
    }

    void h(aTextureRenderer atexturerenderer) {
        int i;
        int i2;
        int i3;
        atexturerenderer.setColor(0, 0, 0, this.hc[0]);
        atexturerenderer.drawRectangle(0, (-this.eZ) - 100, getWidth(), getHeight() + 200);
        if (this.hc[1] >= 2) {
            atexturerenderer.drawScaledImage(this.godTexture[0], (this.excessWidth / 2) + 29, this.he[2] + this.he[1] + 16, 548, 508, 0);
            atexturerenderer.drawScaledImage(this.uiTextures[23], (this.excessWidth / 2) + 172, this.he[1] + 283, 768, 256, 0);
            if (this.hc[1] <= 3) {
                atexturerenderer.drawScaledImage(this.uiTextures[25], (this.excessWidth / 2) + (246 - (dv[this.hk[1]] / 2)), (this.he[1] + 345) - (dv[this.hk[1]] / 2), dv[this.hk[1]] + 96, dv[this.hk[1]] + 96, 0);
                atexturerenderer.drawScaledImage(this.uiTextures[25], (this.excessWidth / 2) + (426 - (dv[this.hk[2]] / 2)), ((this.he[1] + 345) - (dv[this.hk[2]] / 2)) - 10, dv[this.hk[2]] + 96, dv[this.hk[2]] + 96, 1);
                atexturerenderer.drawScaledImage(this.uiTextures[25], (this.excessWidth / 2) + (606 - (dv[this.hk[3]] / 2)), (this.he[1] + 345) - (dv[this.hk[3]] / 2), dv[this.hk[3]] + 96, dv[this.hk[3]] + 96, 2);
                if (!this.ha[1] && this.bB[9] == 2) {
                    atexturerenderer.drawScaledImage(this.arrowTexture, (this.excessWidth / 2) + 786, (int) (235.0f + (10.0f * aMath.sin(this.hc[28] * 30))), 96, 96, 0);
                }
                atexturerenderer.drawScaledImage(this.uiTextures[25], (this.excessWidth / 2) + (786 - (dv[this.hk[4]] / 2)), ((this.he[1] + 345) - (dv[this.hk[4]] / 2)) - 10, dv[this.hk[4]] + 96, dv[this.hk[4]] + 96, 3);
            } else if (this.hl == 0) {
                atexturerenderer.drawScaledImage(this.uiTextures[25], (this.excessWidth / 2) + (246 - (dv[this.hk[1]] / 2)), (this.he[1] + 345) - (dv[this.hk[1]] / 2), dv[this.hk[1]] + 96, dv[this.hk[1]] + 96, 0);
            } else if (this.hl == 1) {
                atexturerenderer.drawScaledImage(this.uiTextures[25], (this.excessWidth / 2) + (426 - (dv[this.hk[2]] / 2)), ((this.he[1] + 345) - (dv[this.hk[2]] / 2)) - 10, dv[this.hk[2]] + 96, dv[this.hk[2]] + 96, 1);
            } else if (this.hl == 2) {
                atexturerenderer.drawScaledImage(this.uiTextures[25], (this.excessWidth / 2) + (606 - (dv[this.hk[3]] / 2)), (this.he[1] + 345) - (dv[this.hk[3]] / 2), dv[this.hk[3]] + 96, dv[this.hk[3]] + 96, 2);
            } else if (this.hl == 3) {
                atexturerenderer.drawScaledImage(this.uiTextures[25], (this.excessWidth / 2) + (786 - (dv[this.hk[4]] / 2)), ((this.he[1] + 345) - (dv[this.hk[4]] / 2)) - 10, dv[this.hk[4]] + 96, dv[this.hk[4]] + 96, 3);
            }
            if (this.hc[1] > 3) {
                int i4 = 0;
                while (true) {
                    int i5 = i4;
                    if (i5 >= getLength(ab)) {
                        break;
                    }
                    if (this.hl == i5) {
                        int i6 = 10;
                        int i7 = 0;
                        while (true) {
                            i2 = i6;
                            if (i2 > ab[i5]) {
                                break;
                            }
                            i6 = i2 * 10;
                            i7--;
                        }
                        int i8 = i7 - 2;
                        if (i5 % 2 == 0) {
                            atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + ((((i5 * 180) + 294) + (i8 * 14)) - 27), this.he[1] + 463, 55, 42, 21);
                        } else {
                            atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + ((((i5 * 180) + 294) + (i8 * 14)) - 27), this.he[1] + 453, 55, 42, 21);
                        }
                        int i9 = i8 + 4;
                        for (int i10 = i2 / 10; i10 >= 1; i10 /= 10) {
                            if (i5 % 2 == 0) {
                                atexturerenderer.drawScaledImagef(this.uiTextures[4], ((((i5 * 180) + 294) + (i9 * 14)) - 27) + (this.excessWidth / 2), this.he[1] + 462, (ab[i5] / i10) % 10);
                            } else {
                                atexturerenderer.drawScaledImagef(this.uiTextures[4], ((((i5 * 180) + 294) + (i9 * 14)) - 27) + (this.excessWidth / 2), this.he[1] + 452, (ab[i5] / i10) % 10);
                            }
                            i9 += 2;
                        }
                    }
                    i4 = i5 + 1;
                }
            } else {
                int i11 = 0;
                while (true) {
                    int i12 = i11;
                    if (i12 >= getLength(ab)) {
                        break;
                    }
                    int i13 = 10;
                    int i14 = 0;
                    while (true) {
                        i3 = i13;
                        if (i3 > ab[i12]) {
                            break;
                        }
                        i13 = i3 * 10;
                        i14--;
                    }
                    int i15 = i14 - 2;
                    if (i12 % 2 == 0) {
                        atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + ((((i12 * 180) + 294) + (i15 * 14)) - 27), this.he[1] + 463, 55, 42, 21);
                    } else {
                        atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + ((((i12 * 180) + 294) + (i15 * 14)) - 27), this.he[1] + 453, 55, 42, 21);
                    }
                    int i16 = i15 + 4;
                    for (int i17 = i3 / 10; i17 >= 1; i17 /= 10) {
                        if (i12 % 2 == 0) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[4], ((((i12 * 180) + 294) + (i16 * 14)) - 27) + (this.excessWidth / 2), this.he[1] + 462, (ab[i12] / i17) % 10);
                        } else {
                            atexturerenderer.drawScaledImagef(this.uiTextures[4], ((((i12 * 180) + 294) + (i16 * 14)) - 27) + (this.excessWidth / 2), this.he[1] + 452, (ab[i12] / i17) % 10);
                        }
                        i16 += 2;
                    }
                    i11 = i12 + 1;
                }
            }
        }
        if (this.hc[1] >= 3) {
            atexturerenderer.setImageAlpha(165);
            atexturerenderer.drawScaledImage(this.uiTextures[24], (this.excessWidth / 2) + 212, this.he[1] + 33, 700, 112, 1);
            atexturerenderer.setImageAlpha(255);
            atexturerenderer.setColor(255, 255, 255);
            atexturerenderer.drawScaledImage(this.textTextures[0], (this.excessWidth / 2) + 579, this.he[1] + 55, 1);
            atexturerenderer.drawScaledImage(this.textTextures[1], (this.excessWidth / 2) + 579, this.he[1] + 91, 1);
            atexturerenderer.drawScaledImage(this.textTextures[2], (this.excessWidth / 2) + 555, this.he[1] + 299, 1);
            if (this.hc[1] <= 3) {
                atexturerenderer.drawScaledImage(this.uiTextures[21], 4 - (dv[this.hk[5]] / 2), 541 - (dv[this.hk[5]] / 2), dv[this.hk[5]] + 95, dv[this.hk[5]] + 95, 9);
                atexturerenderer.drawScaledImage(this.uiTextures[21], 8 - (dv[this.hk[5]] / 2), 558 - (dv[this.hk[5]] / 2), dv[this.hk[5]] + 84, dv[this.hk[5]] + 60, 3);
                if (this.bB[9] >= 3 && isPointerDown() && isTouching(this.hj[5][0], this.hj[5][1], this.hj[5][2], this.hj[5][3]) && !this.gu && !this.eb) {
                    atexturerenderer.drawScaledImage(this.uiTextures[21], 3, 540, 96, 96, ((this.hc[2] % 4) / 2) + 12);
                }
                atexturerenderer.drawScaledImage(this.uiTextures[21], this.excessWidth + (688 - (dv[this.fx[14]] / 2)), 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
                atexturerenderer.drawScaledImage(this.uiTextures[21], this.excessWidth + (733 - (dv[this.fx[14]] / 2)), 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
                int i18 = this.catfood;
                int i19 = 0;
                do {
                    atexturerenderer.drawScaledImagef(this.uiTextures[4], (924 - (i19 * 29)) + this.excessWidth, 592, i18 % 10);
                    i18 /= 10;
                    i19++;
                } while (i18 > 0);
                atexturerenderer.drawScaledImage(this.uiTextures[21], this.excessWidth + 610, 607, 76, 25, 24);
            }
        }
        if (this.ha[1]) {
            atexturerenderer.drawScaledImage(this.uiTextures[23], (this.excessWidth / 2) + 113, 197, 768, 384, 0);
            atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (803 - (dv[this.hk[7]] / 2)), (173 - (dv[this.hk[7]] / 2)) - 16, dv[this.hk[7]] + 95, dv[this.hk[7]] + 95, 9);
            atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (808 - (dv[this.hk[7]] / 2)), (190 - (dv[this.hk[7]] / 2)) - 16, dv[this.hk[7]] + 84, dv[this.hk[7]] + 60, 11);
            if (this.bB[9] >= 3 && isPointerDown() && isTouching(this.hj[7][0], this.hj[7][1], this.hj[7][2], this.hj[7][3]) && !this.gu && !this.eb) {
                atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + 802, 156, 96, 96, ((this.hc[2] % 4) / 2) + 12);
            }
            atexturerenderer.drawScaledImage(this.uiTextures[25], (this.excessWidth / 2) + 220, 284, 96, 96, this.hl);
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (422 - (dv[this.hk[6]] / 2)), 321 - (dv[this.hk[6]] / 2), dv[this.hk[6]] + 381, dv[this.hk[6]] + 72, 3);
            atexturerenderer.drawScaledImage(this.uiTextures[24], (this.excessWidth / 2) + (485 - (dv[this.hk[6]] / 2)), 329 - (dv[this.hk[6]] / 2), dv[this.hk[6]] + 254, dv[this.hk[6]] + 55, 0);
            if (this.bB[9] >= 3 && this.catfood < ab[this.hl]) {
                atexturerenderer.setImageColor(0, 0, 0);
                atexturerenderer.setImageAlpha(127);
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (422 - (dv[this.hk[6]] / 2)), 321 - (dv[this.hk[6]] / 2), dv[this.hk[6]] + 381, dv[this.hk[6]] + 72, 3);
                atexturerenderer.setImageColor(255, 255, 255);
                atexturerenderer.setImageAlpha(255);
            }
            atexturerenderer.setColor(255, 255, 255);
            if (isPointerDown() && isTouching(this.hj[6][0], this.hj[6][1], this.hj[6][2], this.hj[6][3]) && !this.gu && !this.eb) {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 422, 321, 381, 72, ((this.blinkFrame[5] % 4) / 2) + 4);
            }
            int i20 = 10;
            int i21 = 0;
            while (true) {
                i = i20;
                if (i > ab[this.hl]) {
                    break;
                }
                i20 = i * 10;
                i21--;
            }
            atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (((i21 * 14) + 268) - 27), this.he[1] + 389, 55, 42, 21);
            int i22 = (i21 - 2) + 4;
            for (int i23 = i / 10; i23 >= 1; i23 /= 10) {
                atexturerenderer.drawScaledImagef(this.uiTextures[4], (((i22 * 14) + 268) - 27) + (this.excessWidth / 2), this.he[1] + 388, (ab[this.hl] / i23) % 10);
                i22 += 2;
            }
            atexturerenderer.drawScaledImage(this.textTextures[3], (this.excessWidth / 2) + 500, 230, 1);
            atexturerenderer.drawScaledImage(this.textTextures[4], (this.excessWidth / 2) + 499, 468, 1);
            atexturerenderer.drawScaledImage(this.textTextures[5], (this.excessWidth / 2) + 499, 504, 1);
            if (this.bB[9] == 2) {
                atexturerenderer.drawScaledImage(this.arrowTexture, (this.excessWidth / 2) + 564, (int) (211.0f + (10.0f * aMath.sin(this.hc[28] * 30))), 96, 96, 0);
            }
        }
        if (this.hc[1] == 5) {
            if (this.hl == 0) {
                if (this.hc[6] < this.godAnim[1][0].a()) {
                    this.godModel[1][0].setAction(this.godAnim[1][0], this.hc[6]);
                    atexturerenderer.setTextures(this.godModel[1][0], 0, 0);
                }
                if (this.hc[7] >= 1 && this.hc[7] < this.godAnim[1][1].a()) {
                    this.godModel[1][1].setAction(this.godAnim[1][1], this.hc[7]);
                    atexturerenderer.setTextures(this.godModel[1][1], (this.excessWidth / 2) - 300, 0);
                }
                if (this.hc[8] >= 1 && this.hc[8] < this.godAnim[1][1].a()) {
                    this.godModel[1][1].setAction(this.godAnim[1][1], this.hc[8]);
                    atexturerenderer.setTextures(this.godModel[1][1], (this.excessWidth / 2) + 300, 0);
                }
                if (this.hc[9] < 1 || this.hc[9] >= this.godAnim[1][1].a()) {
                    return;
                }
                this.godModel[1][1].setAction(this.godAnim[1][1], this.hc[9]);
                atexturerenderer.setTextures(this.godModel[1][1], 0, 0);
            } else if (this.hl == 1) {
                if (this.hc[6] < this.godAnim[2][0].a()) {
                    this.godModel[2][0].setAction(this.godAnim[2][0], this.hc[6]);
                    atexturerenderer.setTextures(this.godModel[2][0], (this.excessWidth / 2) + 0, 0);
                }
                if (this.hc[7] >= 1 && this.hc[7] < this.godAnim[2][1].a()) {
                    this.godModel[2][1].setAction(this.godAnim[2][1], this.hc[7]);
                    atexturerenderer.setTextures(this.godModel[2][1], (this.excessWidth / 2) + 0, 0);
                }
                atexturerenderer.setColor(0, 0, 0, this.hc[8] - this.hc[9]);
                atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
            } else if (this.hl == 2) {
                if (this.hc[6] < this.godAnim[0][0].a()) {
                    this.godModel[0][0].setAction(this.godAnim[0][0], this.hc[6]);
                    atexturerenderer.setTextures(this.godModel[0][0], (this.excessWidth / 2) + 0, 0);
                }
                for (int i24 = 0; i24 < 10; i24++) {
                    if (this.hc[i24 + 7] >= 1 && this.hc[i24 + 7] < this.godAnim[0][1].a()) {
                        this.godModel[0][1].setAction(this.godAnim[0][1], this.hc[i24 + 7]);
                        atexturerenderer.setTextures(this.godModel[0][1], (this.hh[i24 + 0] * 40) + (this.excessWidth / 2), this.hi[i24 + 0] * 30);
                    }
                }
            } else if (this.hl == 3) {
                this.godModel[3][0].setAction(this.godAnim[3][0], this.hc[6]);
                atexturerenderer.setTextures(this.godModel[3][0], (this.excessWidth / 2) + 0, 0);
                this.gameStats1[1] = this.hd[0] + 8;
                this.gameStats1[2] = this.he[2] + 64;
                this.gameStats1[3] = 6000;
                if (this.gameStats1[3] < 1000) {
                    atexturerenderer.setImageColor(255, 0, 0);
                } else {
                    atexturerenderer.setImageColor(255, 255, 255);
                }
                atexturerenderer.setImageAlpha(this.hc[7]);
                int i25 = this.gameStats1[3] / 6000;
                int[] iArr = this.gameStats1;
                iArr[1] = iArr[1] + 24;
                int i26 = 2;
                int i27 = i25;
                while (true) {
                    atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], this.gameStats1[2] - this.eZ, 24, 46, (i27 % 10) + 83);
                    i27 /= 10;
                    int i28 = i26 - 1;
                    if (i28 <= 0) {
                        break;
                    }
                    this.gameStats1[1] -= 24;
                    i26 = i28;
                }
                int[] iArr2 = this.gameStats1;
                iArr2[1] = iArr2[1] + 48;
                atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], this.gameStats1[2] - this.eZ, 27, 46, 93);
                int[] iArr3 = this.gameStats1;
                iArr3[1] = iArr3[1] + 27;
                if (this.gameStats1[3] % 6000 != 0) {
                    i27 = this.gameStats1[3] / 100;
                }
                int i29 = 2;
                int[] iArr4 = this.gameStats1;
                iArr4[1] = iArr4[1] + 24;
                while (true) {
                    atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], this.gameStats1[2] - this.eZ, 24, 46, (i27 % 10) + 83);
                    i27 /= 10;
                    i29--;
                    if (i29 <= 0) {
                        break;
                    }
                    this.gameStats1[1] -= 24;
                }
                int[] iArr5 = this.gameStats1;
                iArr5[1] = iArr5[1] + 48;
                atexturerenderer.drawScaledImagef(this.uiTextures[4], this.gameStats1[1], ((this.gameStats1[2] - this.eZ) + 46) - 38.333332f, 22.5f, 38.333332f, 93);
                int[] iArr6 = this.gameStats1;
                iArr6[1] = iArr6[1] + 22;
                int i30 = this.gameStats1[3];
                int i31 = 2;
                int[] iArr7 = this.gameStats1;
                iArr7[1] = iArr7[1] + 20;
                do {
                    int i32 = i30;
                    atexturerenderer.drawScaledImagef(this.uiTextures[4], this.gameStats1[1], ((this.gameStats1[2] - this.eZ) + 46) - 38.333332f, 20.0f, 38.333332f, (i32 % 10) + 83);
                    i30 = i32 / 10;
                    i31--;
                    this.gameStats1[1] -= 20;
                } while (i31 > 0);
                atexturerenderer.setImageAlpha(255);
                atexturerenderer.setImageColor(255, 255, 255);
            }
        }
    }

    boolean h() {
        this.eG = 1;
        if (this.battleData[15] != 0) {
            handleBattleZoom();
        } else {
            this.scrollAmount[0] = 0;
        }
        int[] iArr = this.battleData;
        iArr[16] = iArr[16] + 1;
        if (this.battleData[15] == 0) {
            this.zoomLevel += 800;
            int[] iArr2 = this.eI;
            iArr2[0] = iArr2[0] + 10;
            if (this.battleData[12] == 0 && this.battleData[16] >= 20) {
                this.battleData[15] = 1;
                this.battleData[16] = 0;
                this.eI[0] = 1000;
            }
        } else if (this.battleData[15] < 1 || this.battleData[15] > 2) {
            if (this.battleData[15] == 3) {
                if (this.bb == 0 && this.battleData[0] == 6) {
                    this.bb = 1;
                }
                if (this.battleData[16] >= 30) {
                    this.battleData[18] = 0;
                    this.battleData[19] = -1;
                    int i = this.eL[1] == 1 ? 100 : 35;
                    if (this.bb == 0) {
                        i = 0;
                    } else if (this.bb == 1) {
                        i = 100;
                    }
                    if (i > aMath.rand(100)) {
                        int rand = aMath.rand(100);
                        if (rand < 45) {
                            this.battleData[18] = 1;
                        } else if (rand < 75) {
                            this.battleData[18] = 2;
                        } else {
                            this.battleData[18] = 3;
                        }
                        if (this.eL[1] == 1) {
                            this.battleData[18] = 3;
                        }
                        if (this.bb == 1) {
                            this.battleData[18] = 3;
                            this.bb = 2;
                        }
                        if (this.bs[this.eQ][this.battleData[20]] < this.battleData[18]) {
                            this.bs[this.eQ][this.battleData[20]] = this.battleData[18];
                        }
                        int i2 = -1;
                        for (int i3 = 0; i3 < getLength(cy); i3++) {
                            int i4 = 0;
                            while (true) {
                                if (i4 >= cy[i3]) {
                                    break;
                                } else if (cz[i3][i4] == this.battleData[20]) {
                                    i2 = i3;
                                    break;
                                } else {
                                    i4++;
                                }
                            }
                            if (i2 != -1) {
                                break;
                            }
                        }
                        if (i2 >= 0 && this.bO[this.eQ][i2] == 0) {
                            U();
                            if (this.bO[this.eQ][i2] != 0) {
                                this.battleData[19] = i2;
                            } else {
                                U();
                            }
                        }
                        this.battleData[15] = 4;
                        this.battleData[16] = 0;
                        if (this.battleData[18] >= 1) {
                            for (int i5 = 0; i5 < getLength(this.textTextures); i5++) {
                                if (this.textTextures[i5].isLoaded()) {
                                    this.textTextures[i5].reset();
                                }
                            }
                            if (this.regionState == 0) {
                                this.textTextures[0].drawText(this.treasure2Text[3], "FONT_SYSTEM_BOLD", 30, 0);
                                this.textTextures[1].drawText(String.format("%s%s", this.treasure2Text[this.battleData[18] - 1], this.treasure1Text[this.battleData[20]]), "FONT_SYSTEM_BOLD", 30, 0);
                                this.textTextures[2].drawText(this.treasure2Text[6], "FONT_SYSTEM_BOLD", 30, 0);
                            } else if (this.regionState == 1) {
                                this.textTextures[0].drawText(String.format("%s %s", this.treasure2Text[6], this.treasure2Text[9]), "FONT_SYSTEM_BOLD", 30, 0);
                                this.textTextures[1].drawText(String.format("%s %s", this.treasure2Text[this.battleData[18] - 1], this.treasure1Text[this.battleData[20]]), "FONT_SYSTEM_BOLD", 30, 0);
                            }
                        }
                        aSound.getInstance().play(SoundType.REWARD_GET);
                    } else {
                        this.battleData[15] = 6;
                        this.battleData[16] = 0;
                    }
                }
            } else if (this.battleData[15] == 4) {
                if (this.battleData[19] != -1) {
                    this.eP++;
                    if (this.eP > getLength(eO) - 1) {
                        this.eP = getLength(eO) - 1;
                    }
                    if (this.eP >= getLength(eO) - 1) {
                        int[] iArr3 = this.blinkFrame;
                        iArr3[10] = iArr3[10] + 1;
                        if (this.blinkFrame[10] >= 30) {
                            this.blinkFrame[10] = 30;
                            if (isPointerUp()) {
                                this.blinkFrame[10] = 0;
                                if (this.battleData[0] == 6 && this.bz[3] == 0) {
                                    screenTransition();
                                    this.gu = true;
                                    this.gw = 0;
                                    this.gx = 2;
                                    return false;
                                }
                                this.eP = 0;
                                this.battleData[15] = 5;
                                this.battleData[16] = 0;
                                for (int i6 = 0; i6 < getLength(this.textTextures); i6++) {
                                    if (this.textTextures[i6].isLoaded()) {
                                        this.textTextures[i6].reset();
                                    }
                                }
                                this.textTextures[0].drawText(this.treasure3Text[this.battleData[19]][0], "FONT_SYSTEM_BOLD", 30, 0);
                                this.textTextures[1].drawText(this.treasure2Text[5], "FONT_SYSTEM_BOLD", 30, 0);
                                aSound.getInstance().play(SoundType.REWARD_GET);
                            }
                        }
                    }
                } else {
                    this.eP++;
                    if (this.eP > getLength(eO) - 1) {
                        this.eP = getLength(eO) - 1;
                    }
                    if (this.eP >= getLength(eO) - 1) {
                        int[] iArr4 = this.blinkFrame;
                        iArr4[10] = iArr4[10] + 1;
                        if (this.blinkFrame[10] >= 30) {
                            this.blinkFrame[10] = 30;
                            if (isPointerUp()) {
                                this.blinkFrame[10] = 0;
                                if (this.battleData[0] == 6 && this.bz[3] == 0) {
                                    this.gu = true;
                                    this.gw = 0;
                                    this.gx = 2;
                                    screenTransition();
                                    return false;
                                }
                                this.eP = 0;
                                this.battleData[15] = 6;
                                this.battleData[16] = 0;
                                aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            }
                        }
                    }
                }
            } else if (this.battleData[15] == 5) {
                this.eP++;
                if (this.eP > getLength(eO) - 1) {
                    this.eP = getLength(eO) - 1;
                }
                if (this.eP >= getLength(eO) - 1) {
                    int[] iArr5 = this.blinkFrame;
                    iArr5[10] = iArr5[10] + 1;
                    if (this.blinkFrame[10] >= 30) {
                        this.blinkFrame[10] = 30;
                        if (isPointerUp()) {
                            this.blinkFrame[10] = 0;
                            if (this.battleData[0] == 6 && this.bz[3] == 0) {
                                screenTransition();
                                this.gu = true;
                                this.gw = 0;
                                this.gx = 2;
                                return false;
                            }
                            this.eP = 0;
                            this.battleData[15] = 6;
                            this.battleData[16] = 0;
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        }
                    }
                }
            } else if (this.battleData[15] == 6) {
                this.buttonCoordinates1[4][0] = (getWidth() / 2) - 190;
                this.buttonCoordinates1[4][1] = 640;
                this.buttonCoordinates1[4][2] = 381;
                this.buttonCoordinates1[4][3] = 88;
                int[] iArr6 = this.eI;
                iArr6[1] = iArr6[1] + 20;
                if (this.eI[1] >= 82) {
                    this.eI[1] = 82;
                    this.battleData[15] = 7;
                }
                this.buttonCoordinates1[4][1] = ((640 - this.eI[1]) - 8) + this.eZ;
            } else if (this.battleData[15] == 7) {
                if (isPointerDown()) {
                    if (this.eE[0] || this.eE[4]) {
                        this.eE[1] = true;
                    }
                } else if (!isPointerUp()) {
                    this.eE[1] = false;
                }
                if (this.fx[0] >= 1) {
                    int[] iArr7 = this.fx;
                    iArr7[0] = iArr7[0] + 1;
                    if (this.fx[0] > getLength(dv) - 1) {
                        this.fx[0] = 0;
                        screenTransition();
                        this.eb = true;
                        this.ed = 1;
                        return false;
                    }
                } else if (this.fx[10] >= 1) {
                    int[] iArr8 = this.fx;
                    iArr8[10] = iArr8[10] + 1;
                    if (this.fx[10] > getLength(dv) - 1) {
                        this.fx[10] = 0;
                        //if (aFacebook.getInstance().f()) {
                        //    f();
                        //    this.j = true;
                        //    this.menuType = 5;
                        //    return false;
                        //}
                        screenTransition();
                        this.j = true;
                        this.menuType = 5;
                        return false;
                    }
                } else if (this.fx[11] >= 1) {
                    int[] iArr9 = this.fx;
                    iArr9[11] = iArr9[11] + 1;
                    if (this.fx[11] > getLength(dv) - 1) {
                        this.fx[11] = 0;
                        aTwitter.getInstance().tweet(String.format("%s %s %s", String.format(MyUtility.getString("twitter_txt1"), this.stageNameText[cm[this.battleData[0]]]), MyUtility.getString("url_abbr"), MyUtility.getString("twitter_hash")), null, null);
                        this.zoom.reset();
                    }
                } else {
                    if (!this.eE[0] && this.scrollAmount[0] == 0 && !this.eE[1] && !this.eE[2] && !this.eE[3]) {
                        if (!isPointerDown() || !isTouching(this.buttonCoordinates1[4][0], this.buttonCoordinates1[4][1], this.buttonCoordinates1[4][2], this.buttonCoordinates1[4][3])) {
                            this.gp[4] = false;
                        } else if (!this.gp[4]) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gp[4] = true;
                        }
                        if (!isPointerDown() || !isTouching(this.buttonCoordinates1[10][0], this.buttonCoordinates1[10][1], this.buttonCoordinates1[10][2], this.buttonCoordinates1[10][3])) {
                            this.gp[10] = false;
                        } else if (!this.gp[10]) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gp[10] = true;
                        }
                        if (aTwitter.getInstance().c()) {
                            if (!isPointerDown() || !isTouching(this.buttonCoordinates1[11][0], this.buttonCoordinates1[11][1], this.buttonCoordinates1[11][2], this.buttonCoordinates1[11][3])) {
                                this.gp[11] = false;
                            } else if (!this.gp[11]) {
                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                this.gp[11] = true;
                            }
                        }
                    }
                    if (!this.eE[0] && this.scrollAmount[0] == 0 && !this.eE[1] && !this.eE[2] && !this.eE[3]) {
                        if (isPointerUp() && isTouching(this.buttonCoordinates1[4][0], this.buttonCoordinates1[4][1], this.buttonCoordinates1[4][2], this.buttonCoordinates1[4][3])) {
                            int[] iArr10 = this.fx;
                            iArr10[0] = iArr10[0] + 1;
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        } else if (isPointerUp() && isTouching(this.buttonCoordinates1[10][0], this.buttonCoordinates1[10][1], this.buttonCoordinates1[10][2], this.buttonCoordinates1[10][3])) {
                            int[] iArr11 = this.fx;
                            iArr11[10] = iArr11[10] + 1;
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        } else if (isPointerUp() && isTouching(this.buttonCoordinates1[11][0], this.buttonCoordinates1[11][1], this.buttonCoordinates1[11][2], this.buttonCoordinates1[11][3]) && aTwitter.getInstance().c()) {
                            int[] iArr12 = this.fx;
                            iArr12[11] = iArr12[11] + 1;
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        }
                    }
                }
            }
        } else if (this.battleData[16] >= getLength(cq)) {
            int[] iArr13 = this.battleData;
            iArr13[15] = iArr13[15] + 1;
            this.battleData[16] = 0;
        }
        return true;
    }

    void itemShopDraw(aTextureRenderer atexturerenderer) {
        boolean z;
        float f = 0;
        atexturerenderer.drawScaledImage(this.uiTextures[7], 0, 0, getWidth(), 407, 0);
        atexturerenderer.drawScaledImage(this.uiTextures[7], 0, 362, getWidth(), 238, 1);
        atexturerenderer.drawScaledImagef(this.uiTextures[8], 0, 78, 1);
        atexturerenderer.setColor(255, 255, 255);
        atexturerenderer.drawScaledImage(this.textTextures[this.gA[0]], 146, 82, 1);
        for (int i = 0; i < 3; i++) {
            if (!aString.isEqual(this.itemExplanationText[this.gP[2]][i], "＠")) {
                atexturerenderer.drawScaledImage(this.textTextures[this.gA[1] + i], (getWidth() / 2) + 20, ((i * 36) + 470) - 5, 1);
            }
        }
        if (this.gP[2] < this.gB[0]) {
            if (this.bA[this.gP[2]] < 9000) {
                z = true;
            }
            z = false;
        } else {
            if (this.aY < 90000000) {
                z = true;
            }
            z = false;
        }
        if (z) {
            atexturerenderer.drawScaledImage(this.uiTextures[7], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 2);
        }
        if (z) {
            if (Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]]) <= 0) {
                if (this.catfood >= 500) {
                    atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 3);
                } else {
                    atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 3);
                    atexturerenderer.setImageColor(0, 0, 0);
                    atexturerenderer.setImageAlpha(127);
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                    atexturerenderer.setImageColor(255, 255, 255);
                    atexturerenderer.setImageAlpha(255);
                }
            } else if (this.catfood >= Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]])) {
                atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 3);
            } else {
                atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 3);
                atexturerenderer.setImageColor(0, 0, 0);
                atexturerenderer.setImageAlpha(127);
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                atexturerenderer.setImageColor(255, 255, 255);
                atexturerenderer.setImageAlpha(255);
            }
        }
        if (this.gP[2] < this.gB[0]) {
            atexturerenderer.drawScaledImagef(this.uiTextures[7], this.excessWidth + 552, 402, 7);
            int i2 = this.bA[this.gP[2]];
            int i3 = 0;
            do {
                int i4 = i3;
                int i5 = i2;
                atexturerenderer.drawScaledImage(this.uiTextures[5], this.excessWidth + (916 - (i4 * 29)), 404, 30, 42, i5 % 10);
                i2 = i5 / 10;
                i3 = i4 + 1;
            } while (i2 > 0);
        } else {
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.drawRectangle(400, 395, getWidth(), 60);
        }
        if (z) {
            if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 4);
            } else {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 5);
            }
        }
        int i6 = 1;
        while (true) {
            int i7 = i6;
            if (i7 >= this.boxCounts[0] + 1 + this.boxCounts[1] + this.boxCounts[2]) {
                break;
            }
            if (this.gP[0] == i7) {
                this.gameStats1[0] = this.gH;
                this.gameStats1[1] = this.fx[2];
                f = -(328 - this.boxSize[i7][0]);
            } else if (this.gP[0] + 1 == i7) {
                this.gameStats1[0] = 0;
                this.gameStats1[1] = 0;
                f = 328 - this.boxSize[i7][0];
            } else if (this.gP[0] + 2 == i7) {
                this.gameStats1[0] = 0;
                this.gameStats1[1] = 0;
                f = (328 - this.boxSize[i7][0]) + ((328 - this.boxSize[i7 - 1][0]) / 2.0f);
            } else if (this.gP[0] + 3 == i7) {
                this.gameStats1[0] = 0;
                this.gameStats1[1] = 0;
                f = (328 - this.boxSize[i7][0]) + ((328 - this.boxSize[i7 - 1][0]) / 2.0f) + ((328 - this.boxSize[i7 - 2][0]) / 2.0f);
            } else if (this.gP[0] - 1 == i7) {
                this.gameStats1[0] = 0;
                this.gameStats1[1] = 0;
                f = -((328 - this.boxSize[i7][0]) + ((328 - this.boxSize[i7 + 1][0]) / 2.0f));
            } else if (this.gP[0] - 2 == i7) {
                this.gameStats1[0] = 0;
                this.gameStats1[1] = 0;
                f = -((328 - this.boxSize[i7][0]) + ((328 - this.boxSize[i7 + 1][0]) / 2.0f));
            } else {
                i6 = i7 + 1;
            }
            if (i7 - this.boxCounts[0] > -1 && i7 - this.boxCounts[0] < this.boxCounts[1] + 1) {
                atexturerenderer.drawScaledImagef(this.uiTextures[8], (((cC[this.gameStats1[0]] * 328) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[i7][0] / 2.0f)) + (this.boxScale * i7) + this.gameStats1[0] + f, 347 - this.boxSize[i7][1], this.boxSize[i7][0] - ((cC[this.gameStats1[0]] * 328) / 100.0f), this.boxSize[i7][1], 0);
            }
            if (i7 - this.boxCounts[0] >= 0 && i7 - this.boxCounts[0] <= this.boxCounts[1]) {
                atexturerenderer.setColor(255, 255, 255);
                int a = this.textTextures[i7 - this.boxCounts[0]].getImgWidth();
                atexturerenderer.drawScaledImagef(this.textTextures[i7 - this.boxCounts[0]], ((((((getWidth() / 2.0f) - (this.boxSize[i7][0] / 2.0f)) + (this.boxScale * i7)) + this.gameStats1[0]) + f) + (((328.0f * ((this.boxSize[i7][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) - (((a * ((this.boxSize[i7][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f), 347.0f - ((254.0f * ((this.boxSize[i7][1] * 10000.0f) / 263.0f)) / 10000.0f), (a * ((this.boxSize[i7][0] * 10000.0f) / 328.0f)) / 10000.0f, (30.0f * ((this.boxSize[i7][1] * 10000.0f) / 263.0f)) / 10000.0f);
                atexturerenderer.drawScaledImagef(this.uiTextures[11], (((((310.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[i7][0] / 2.0f)) + (this.boxScale * i7) + this.gameStats1[0] + f, 347.0f - ((219.0f * ((this.boxSize[i7][1] * 100.0f) / 263.0f)) / 100.0f), ((310.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) - ((((310.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (112.0f * ((this.boxSize[i7][1] * 100.0f) / 263.0f)) / 100.0f, i7 - this.boxCounts[0]);
                atexturerenderer.drawScaledImagef(this.uiTextures[8], (((57.0f * (((this.boxSize[i7][0] * 100.0f) / 328.0f) / 100.0f)) * cC[this.gameStats1[0]]) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[i7][0] / 2.0f)) + (this.boxScale * i7) + this.gameStats1[0] + f + ((107.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((88.0f * ((this.boxSize[i7][1] * 10000.0f) / 263.0f)) / 10000.0f), ((213.0f * ((this.boxSize[i7][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((213.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (45.0f * ((this.boxSize[i7][1] * 10000.0f) / 263.0f)) / 10000.0f, 28);
                atexturerenderer.drawScaledImagef(this.uiTextures[0], (((((37.0f + (0 * ((29.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[i7][0] / 2.0f)) + (this.boxScale * i7)) + this.gameStats1[0]) + f) - (0 * ((29.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f))) + ((127.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((86.0f * ((this.boxSize[i7][1] * 100.0f) / 263.0f)) / 100.0f), ((55.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) - ((((62.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (42.0f * ((this.boxSize[i7][1] * 100.0f) / 263.0f)) / 100.0f, 21);
                atexturerenderer.drawScaledImagef(this.uiTextures[5], (((((86.0f + (0 * ((29.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[i7][0] / 2.0f)) + (this.boxScale * i7)) + this.gameStats1[0]) + f) - (0 * ((29.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f))) + ((78.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((75.0f * ((this.boxSize[i7][1] * 100.0f) / 263.0f)) / 100.0f), ((47.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) - ((((47.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (28.0f * ((this.boxSize[i7][1] * 100.0f) / 263.0f)) / 100.0f, 15);
                int i8 = 0;
                int i9 = Z[i7 - this.boxCounts[0]] + (Z[i7 - this.boxCounts[0]] * this.gS[i7 - this.boxCounts[0]]) <= 0 ? 500 : Z[i7 - this.boxCounts[0]] + (Z[i7 - this.boxCounts[0]] * this.gS[i7 - this.boxCounts[0]]);
                while (true) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[5], ((((((-117.0f) + (i8 * ((29.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[i7][0] / 2.0f)) + (this.boxScale * i7)) + this.gameStats1[0]) + f) - (i8 * ((29.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f))) + ((281.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((86.0f * ((this.boxSize[i7][1] * 100.0f) / 263.0f)) / 100.0f), ((30.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) - ((((30.0f * ((this.boxSize[i7][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (42.0f * ((this.boxSize[i7][1] * 100.0f) / 263.0f)) / 100.0f, i9 % 10);
                    int i10 = i9 / 10;
                    int i11 = i8 + 1;
                    if (i10 <= 0) {
                        break;
                    }
                    i8 = i11;
                    i9 = i10;
                }
            }
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.setAlpha((255 - ((((this.boxSize[i7][0] * 100) / 328) * 255) / 100)) * 2);
            atexturerenderer.drawRectangle((int) (((getWidth() / 2) - (this.boxSize[i7][0] / 2)) + (this.boxScale * i7) + this.gameStats1[0] + f + (((cC[this.gameStats1[0]] * 328) / 100) / 2)), 347 - this.boxSize[i7][1], this.boxSize[i7][0] - ((cC[this.gameStats1[0]] * 328) / 100), this.boxSize[i7][1]);
            if (i7 - this.boxCounts[0] >= 0 && this.gG[i7 - this.boxCounts[0]] == 1) {
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.setAlpha(this.blinkFrame[5]);
                atexturerenderer.drawRectangle((int) (((getWidth() / 2) - (this.boxSize[i7][0] / 2)) + (this.boxScale * i7) + this.gameStats1[0] + f), 347 - this.boxSize[i7][1], this.boxSize[i7][0], this.boxSize[i7][1]);
            }
            i6 = i7 + 1;
        }
        atexturerenderer.setImageAlpha(127);
        if (this.gP[2] > 1 - this.boxCounts[0]) {
            atexturerenderer.drawScaledImagef(this.uiTextures[10], (int) (49.0f + (10.0f * aMath.sin(this.blinkFrame[4] * 30))), 171, 0);
        }
        if (this.gP[2] < this.boxCounts[1] + this.boxCounts[2]) {
            atexturerenderer.setOrientation(1);
            atexturerenderer.drawScaledImagef(this.uiTextures[10], ((int) (849.0f - (10.0f * aMath.sin(this.blinkFrame[4] * 30)))) + this.excessWidth, 171, 0);
        }
        atexturerenderer.setImageAlpha(255);
        atexturerenderer.setOrientation(0);
        if (this.gP[2] >= 0 && this.gP[2] <= this.boxCounts[1]) {
            int i12 = -this.boxCounts[1];
            int i13 = this.boxCounts[1];
            int i14 = 0;
            do {
                if (this.gP[2] == i14) {
                    atexturerenderer.setImageColor(255, 255, 255);
                    atexturerenderer.setImageAlpha(255);
                } else {
                    atexturerenderer.setImageColor(0, 0, 0);
                    atexturerenderer.setImageAlpha(200);
                }
                atexturerenderer.drawScaledImagef(this.uiTextures[6], ((getWidth() / 2) - 6) + (i12 * 10), 60, 0);
                i12 += 2;
                i13--;
                i14++;
            } while (i13 >= 0);
        }
        atexturerenderer.setImageColor(255, 255, 255);
        atexturerenderer.setImageAlpha(255);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], ((getWidth() / 2) - 572) - this.fP, 0, 572, 637, 0);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], this.fP + (getWidth() / 2), 0, 572, 637, 1);
        int i15 = 0;
        if (this.fR[0] == 0) {
            i15 = cu[this.blinkFrame[0]];
        } else if (this.fR[0] == 1) {
            i15 = cv[this.blinkFrame[0]];
        } else {
            int i16 = this.fR[0];
        }
        atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i15, 355, 355, 0);
        if (this.blinkFrame[1] == 1 || this.blinkFrame[1] == 2 || this.blinkFrame[1] == 4 || this.blinkFrame[1] == 5) {
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i15, 355, 191, 2);
        }
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, -42, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 638, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 0, getWidth(), 55, 0);
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 585, getWidth(), 55, 0);
        atexturerenderer.setOrientation(0);
        if (this.gm[0] < 297) {
            if (this.previousScreen == 0) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 1);
            } else if (this.previousScreen == 1) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 6);
            } else if (this.previousScreen == 2) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 2);
            } else if (this.previousScreen == 3) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 3);
            } else if (this.previousScreen == 4) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 4);
            } else if (this.previousScreen == 5) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 5);
            }
        }
        if (this.gm[1] < 297) {
            atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[1], 3, 8);
        }
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.buttonCoordinates1[5][0] - (dv[this.fx[5]] / 2), this.buttonCoordinates1[5][1] - (dv[this.fx[5]] / 2), dv[this.fx[5]] + this.buttonCoordinates1[5][2], dv[this.fx[5]] + this.buttonCoordinates1[5][3], 9);
        atexturerenderer.drawScaledImage(this.uiTextures[0], (this.buttonCoordinates1[5][0] + 4) - (dv[this.fx[5]] / 2), (this.buttonCoordinates1[5][1] + 17) - (dv[this.fx[5]] / 2), dv[this.fx[5]] + 84, dv[this.fx[5]] + 60, 3);
        if (!this.eE[0] && !this.eE[1] && !this.eE[2] && !this.eb && this.eE[10] && !this.eE[13]) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], 3, 540, 96, 96, ((this.blinkFrame[3] % 4) / 2) + 12);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 0, 11);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 570, 17, 10);
        int i17 = this.aY;
        int i18 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i18 * 29)) + this.excessWidth, 6, i17 % 10);
            i17 /= 10;
            i18++;
        } while (i17 > 0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (633 - (dv[this.fx[15]] / 2)), 8 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 62, dv[this.fx[15]] + 36, 23);
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 585, 11);
        atexturerenderer.setOrientation(0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (688 - (dv[this.fx[14]] / 2)), 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
        if (this.bf >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (733 - (dv[this.fx[14]] / 2)), 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[0], this.excessWidth + 610, 607, 24);
        int i19 = this.catfood;
        int i20 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i20 * 29)) + this.excessWidth, 592, i19 % 10);
            i19 /= 10;
            i20++;
        } while (i19 > 0);
    }

    boolean i() {
        int i = 0;
        this.eG = 1;
        int[] iArr = this.battleData;
        iArr[16] = iArr[16] + 1;
        if (this.battleData[15] == 0) {
            int[] iArr2 = this.eI;
            iArr2[0] = iArr2[0] + 10;
            this.zoomLevel += 800;
            if (this.battleData[12] == 0 && this.battleData[16] >= 20) {
                this.battleData[15] = 1;
                this.battleData[16] = 0;
                this.eI[0] = 1000;
            }
        } else if (this.battleData[15] == 1) {
            if (this.battleData[16] >= getLength(cs)) {
                this.battleData[15] = 2;
                this.battleData[16] = 0;
            }
        } else if (this.battleData[15] == 2) {
            if (this.battleData[16] >= 80) {
                if (this.aZ == 0) {
                    if (this.aZ == 0) {
                        this.battleData[15] = 4;
                    } else {
                        this.battleData[15] = 3;
                    }
                    this.battleData[16] = 0;
                    while (i < getLength(this.warning2Text[2])) {
                        this.textTextures[i].drawText(this.warning2Text[2][i], "FONT_SYSTEM_BOLD", 30, 1);
                        i++;
                    }
                } else {
                    this.ei[2] -= 10;
                    if (this.ei[2] <= -100) {
                        this.ei[2] = -100;
                        if (this.aZ == 0) {
                            this.battleData[15] = 4;
                        } else {
                            this.battleData[15] = 3;
                        }
                        this.battleData[16] = 0;
                        while (i < getLength(this.warning2Text[2])) {
                            this.textTextures[i].drawText(this.warning2Text[2][i], "FONT_SYSTEM_BOLD", 30, 1);
                            i++;
                        }
                    }
                }
            }
        } else if (this.battleData[15] == 3) {
            this.eP++;
            if (this.eP == 1) {
                aSound.getInstance().play(SoundType.POPUP);
            }
            if (this.eP == 1) {
                this.buttonCoordinates1[0][0] = ((getWidth() / 2) - 345) + 116;
                this.buttonCoordinates1[0][1] = 472;
                this.buttonCoordinates1[0][2] = 168;
                this.buttonCoordinates1[0][3] = 89;
                this.buttonCoordinates1[1][0] = ((getWidth() / 2) - 345) + 406;
                this.buttonCoordinates1[1][1] = 472;
                this.buttonCoordinates1[1][2] = 168;
                this.buttonCoordinates1[1][3] = 89;
            }
            if (this.eP > getLength(eO) - 1) {
                this.eP = getLength(eO) - 1;
            }
            if (this.eP >= getLength(eO) - 1) {
                if (this.fx[0] >= 1) {
                    int[] iArr3 = this.fx;
                    iArr3[0] = iArr3[0] + 1;
                    if (this.fx[0] > getLength(dv) - 1) {
                        this.fx[0] = 0;
                        if (this.catfood < 30) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 1;
                            return false;
                        }
                        screenTransition();
                        this.catfood -= 30;
                        this.eb = true;
                        this.ed = 1;
                        this.eR = 1;
                        this.eP = 0;
                        this.hF++;
                        if (this.hF >= 999999999) {
                            this.hF = 999999999;
                        }
                        aSave();
                        return false;
                    }
                } else if (this.fx[1] >= 1) {
                    int[] iArr4 = this.fx;
                    iArr4[1] = iArr4[1] + 1;
                    if (this.fx[1] > getLength(dv) - 1) {
                        this.fx[1] = 0;
                        this.battleData[15] = 4;
                        this.eP = 0;
                        if (this.eQ != 0 && this.battleData[0] != 0 && this.ba == 0) {
                            this.ba = 1;
                        }
                        this.battleData[24] = 1;
                        int i2 = 0;
                        for (int i3 = 0; i3 < getLength(this.loseText[this.eQ]) && !aString.isEqual(this.loseText[this.eQ][i3][0], "＠"); i3++) {
                            i2++;
                        }
                        this.eS = aMath.rand(i2);
                        while (i < getLength(this.loseText[this.eQ][this.eS])) {
                            this.textTextures[i + 2].drawText(this.loseText[this.eQ][this.eS][i], "FONT_SYSTEM_BOLD", 30, 1);
                            i++;
                        }
                    }
                } else if (this.fx[14] >= 1) {
                    int[] iArr5 = this.fx;
                    iArr5[14] = iArr5[14] + 1;
                    if (this.fx[14] > getLength(dv) - 1) {
                        this.fx[14] = 0;
                        if (this.bB[8] == 0) {
                            screenTransition();
                            this.bB[8] = 1;
                            this.gU = true;
                            for (int i4 = 0; i4 < getLength(this.gV); i4++) {
                                this.gV[i4] = 0;
                            }
                            aSound.getInstance().setVolume(50);
                            return false;
                        } else if (this.catfood >= 900000) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 10000;
                            return false;
                        } else {
                            screenTransition();
                            this.menuType = 0;
                            this.j = true;
                            return false;
                        }
                    }
                } else {
                    if (isPointerDown() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                        this.fa = 0;
                    } else if (isPointerDown() && isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3])) {
                        this.fa = 1;
                    }
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                        this.gp[0] = false;
                    } else if (!this.gp[0]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[0] = true;
                    }
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3])) {
                        this.gp[1] = false;
                    } else if (!this.gp[1]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[1] = true;
                    }
                    if (isPointerUp() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                        int[] iArr6 = this.fx;
                        iArr6[0] = iArr6[0] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isPointerUp() && isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3])) {
                        int[] iArr7 = this.fx;
                        iArr7[1] = iArr7[1] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    }
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3])) {
                        this.gp[14] = false;
                    } else if (!this.gp[14]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[14] = true;
                    }
                    if (isPointerUp() && isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) && this.bf >= 1) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr8 = this.fx;
                        iArr8[14] = iArr8[14] + 1;
                    }
                }
            }
        } else if (this.battleData[15] == 4) {
            this.eP++;
            if (this.eP == 1) {
                aSound.getInstance().play(SoundType.POPUP);
            }
            if (this.eP > getLength(eO) - 1) {
                this.eP = getLength(eO) - 1;
                if (isPointerUp()) {
                    screenTransition();
                    this.eR = 0;
                    this.eb = true;
                    this.ed = 1;
                    return false;
                }
            }
        }
        return true;
    }

    void catBaseDraw(aTextureRenderer atexturerenderer) {
        int i;
        int i2;
        atexturerenderer.setColor(0, 0, 0);
        atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
        atexturerenderer.drawScaledImage(this.uiTextures[1], (this.excessWidth / 2) + 490, 430, 100, 100, 0);
        atexturerenderer.drawScaledImage(this.uiTextures[1], (this.excessWidth / 2) + 490, 360, 100, 100, 0);
        atexturerenderer.setOrientation(1);
        atexturerenderer.drawScaledImage(this.uiTextures[1], (this.excessWidth / 2) + 430, 480, 100, 100, 0);
        atexturerenderer.setOrientation(0);
        int[] iArr = this.gh;
        this.gh[1] = 0;
        iArr[0] = 0;
        int[] iArr2 = this.gh;
        int[] iArr3 = this.gh;
        int ah = getWidth();
        iArr3[3] = ah;
        iArr2[2] = ah;
        int[] iArr4 = this.gi;
        this.gi[3] = 0;
        iArr4[0] = 0;
        int[] iArr5 = this.gi;
        this.gi[2] = 640;
        iArr5[1] = 640;
        int[] iArr6 = this.gj;
        this.gj[3] = -16777216;
        iArr6[0] = -16777216;
        int[] iArr7 = this.gj;
        this.gj[2] = 838860800;
        iArr7[1] = 838860800;
        atexturerenderer.a(this.gh, this.gi, this.gj, 4);
        atexturerenderer.a(this.gh, this.gi, this.gj, 4);
        atexturerenderer.setBlendMode(1);
        atexturerenderer.setColor(255, 0, 0);
        atexturerenderer.setAlpha(255);
        for (int i3 = 0; i3 < getLength(this.gl[0]); i3++) {
            this.gl[0][i3] = ((int) (523.0f + (5.0f * aMath.sin(i3 * 45)))) + (this.excessWidth / 2);
        }
        for (int i4 = 0; i4 < getLength(this.gl[0]); i4++) {
            this.gl[1][i4] = (int) (465.0f + (5.0f * aMath.cos(i4 * 45)));
        }
        atexturerenderer.drawVertices(this.gl[0], this.gl[1], 8);
        for (int i5 = 0; i5 < getLength(this.gl[0]); i5++) {
            this.gl[0][i5] = ((int) (548.0f + (5.0f * aMath.sin(i5 * 45)))) + (this.excessWidth / 2);
        }
        for (int i6 = 0; i6 < getLength(this.gl[0]); i6++) {
            this.gl[1][i6] = (int) (465.0f + (5.0f * aMath.cos(i6 * 45)));
        }
        atexturerenderer.drawVertices(this.gl[0], this.gl[1], 8);
        for (int i7 = 0; i7 < getLength(this.gl[0]); i7++) {
            this.gl[0][i7] = ((int) (548.0f + (5.0f * aMath.sin(i7 * 45)))) + (this.excessWidth / 2);
        }
        for (int i8 = 0; i8 < getLength(this.gl[0]); i8++) {
            this.gl[1][i8] = (int) (395.0f + (5.0f * aMath.cos(i8 * 45)));
        }
        atexturerenderer.drawVertices(this.gl[0], this.gl[1], 8);
        for (int i9 = 0; i9 < getLength(this.gl[0]); i9++) {
            this.gl[0][i9] = ((int) (523.0f + (5.0f * aMath.sin(i9 * 45)))) + (this.excessWidth / 2);
        }
        for (int i10 = 0; i10 < getLength(this.gl[0]); i10++) {
            this.gl[1][i10] = (int) (395.0f + (5.0f * aMath.cos(i10 * 45)));
        }
        atexturerenderer.drawVertices(this.gl[0], this.gl[1], 8);
        for (int i11 = 0; i11 < getLength(this.gl[0]); i11++) {
            this.gl[0][i11] = ((int) (497.0f + (5.0f * aMath.sin(i11 * 45)))) + (this.excessWidth / 2);
        }
        for (int i12 = 0; i12 < getLength(this.gl[0]); i12++) {
            this.gl[1][i12] = (int) (515.0f + (5.0f * aMath.cos(i12 * 45)));
        }
        atexturerenderer.drawVertices(this.gl[0], this.gl[1], 8);
        for (int i13 = 0; i13 < getLength(this.gl[0]); i13++) {
            this.gl[0][i13] = ((int) (472.0f + (5.0f * aMath.sin(i13 * 45)))) + (this.excessWidth / 2);
        }
        for (int i14 = 0; i14 < getLength(this.gl[0]); i14++) {
            this.gl[1][i14] = (int) (515.0f + (5.0f * aMath.cos(i14 * 45)));
        }
        atexturerenderer.drawVertices(this.gl[0], this.gl[1], 8);
        atexturerenderer.setBlendMode(0);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], ((getWidth() / 2) - 572) - this.fP, 0, 572, 637, 0);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], this.gameStats1[0] + (getWidth() / 2) + this.fP, 0, 572, 637, 1);
        int i15 = 0;
        if (this.fR[0] == 0) {
            i15 = cu[this.blinkFrame[0]];
        } else if (this.fR[0] == 1) {
            i15 = cv[this.blinkFrame[0]];
        } else {
            int i16 = this.fR[0];
        }
        atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i15, 355, 355, 0);
        if (!this.eE[1] && (this.blinkFrame[1] == 1 || this.blinkFrame[1] == 2 || this.blinkFrame[1] == 4 || this.blinkFrame[1] == 5)) {
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i15, 355, 191, 2);
        }
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, -42, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 638, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 0, getWidth(), 55, 0);
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 585, getWidth(), 55, 0);
        atexturerenderer.setOrientation(0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], 4 - (dv[this.fx[5]] / 2), 541 - (dv[this.fx[5]] / 2), dv[this.fx[5]] + 95, dv[this.fx[5]] + 95, 9);
        atexturerenderer.drawScaledImage(this.uiTextures[0], 8 - (dv[this.fx[5]] / 2), 558 - (dv[this.fx[5]] / 2), dv[this.fx[5]] + 84, dv[this.fx[5]] + 60, 3);
        if (!this.eE[0] && !this.eE[1] && !this.eE[2] && !this.eb && this.fx[0] == 0 && this.fx[1] == 0 && this.fx[2] == 0 && this.fx[3] == 0 && this.fx[4] == 0 && this.fx[14] == 0 && this.fx[15] == 0 && !this.eb && !this.gu && ((isPointerDown() || isPointerUp()) && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3]))) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], 3, 540, 96, 96, ((this.blinkFrame[3] % 4) / 2) + 12);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[2], 8, 3, 1);
        if (!this.eE[2] && !this.eE[1]) {
            atexturerenderer.drawScaledImage(this.uiTextures[3], this.excessWidth + 422, 114, 512, 280, 2);
            atexturerenderer.setColor(255, 255, 255);
            int i17 = 0;
            int i18 = 0;
            while (true) {
                i = i17;
                if (i18 >= 5) {
                    break;
                } else if (this.fK == 0) {
                    if (aString.isEqual(this.mainMenuWText[0][i18], "＠")) {
                        break;
                    }
                    i17 = i18 + 1;
                    i18++;
                } else if (this.fK == 1) {
                    if (aString.isEqual(this.mainMenuPText[0][i18], "＠")) {
                        break;
                    }
                    i17 = i18 + 1;
                    i18++;
                } else if (this.fK == 2) {
                    if (aString.isEqual(this.mainMenuUText[0][i18], "＠")) {
                        break;
                    }
                    i17 = i18 + 1;
                    i18++;
                } else if (this.fK == 3) {
                    if (aString.isEqual(this.mainMenuTText[0][i18], "＠")) {
                        break;
                    }
                    i17 = i18 + 1;
                    i18++;
                } else if (this.fK != 4) {
                    int i19 = this.aX == 0 ? 2 : 0;
                    if (this.fJ < getLength(this.mainMenuWText) - i19) {
                        if (aString.isEqual(this.mainMenuWText[this.fJ][i18], "＠")) {
                            break;
                        }
                        i17 = i18 + 1;
                        i18++;
                    } else if (this.fJ < (getLength(this.mainMenuWText) - i19) + getLength(this.mainMenuPText)) {
                        if (aString.isEqual(this.mainMenuPText[this.fJ - (getLength(this.mainMenuWText) - i19)][i18], "＠")) {
                            break;
                        }
                        i17 = i18 + 1;
                        i18++;
                    } else if (this.fJ < (getLength(this.mainMenuWText) - i19) + getLength(this.mainMenuPText) + getLength(this.mainMenuUText)) {
                        if (aString.isEqual(this.mainMenuUText[this.fJ - ((getLength(this.mainMenuWText) - i19) + getLength(this.mainMenuPText))][i18], "＠")) {
                            break;
                        }
                        i17 = i18 + 1;
                        i18++;
                    } else if (this.fJ < (getLength(this.mainMenuWText) - i19) + getLength(this.mainMenuPText) + getLength(this.mainMenuUText) + getLength(this.mainMenuTText)) {
                        if (aString.isEqual(this.mainMenuTText[this.fJ - (((getLength(this.mainMenuWText) - i19) + getLength(this.mainMenuPText)) + getLength(this.mainMenuUText))][i18], "＠")) {
                            break;
                        }
                        i17 = i18 + 1;
                        i18++;
                    } else {
                        if (aString.isEqual(this.mainMenuBText[this.fJ - ((((getLength(this.mainMenuWText) - i19) + getLength(this.mainMenuPText)) + getLength(this.mainMenuUText)) + getLength(this.mainMenuTText))][i18], "＠")) {
                            break;
                        }
                        i17 = i18 + 1;
                        i18++;
                    }
                } else if (aString.isEqual(this.mainMenuBText[0][i18], "＠")) {
                    break;
                } else {
                    i17 = i18 + 1;
                    i18++;
                }
            }
            int i20 = 0;
            int i21 = 0;
            while (true) {
                int i22 = i21;
                i2 = i20;
                if (i22 >= i - 1) {
                    break;
                }
                i20 = i2 + 180;
                i21 = i22 + 1;
            }
            for (int i23 = 0; i23 < i; i23++) {
                atexturerenderer.drawScaledImage(this.textTextures[i23], this.excessWidth + 678, ((i23 * 36) + 223) - (i2 / 10), 1);
            }
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 0, 11);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 570, 17, 10);
        int i24 = this.aY;
        int i25 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i25 * 29)) + this.excessWidth, 6, i24 % 10);
            i24 /= 10;
            i25++;
        } while (i24 > 0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (633 - (dv[this.fx[15]] / 2)), 8 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 62, dv[this.fx[15]] + 36, 23);
        if (this.be >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (681 - (dv[this.fx[15]] / 2)), 23 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 27, dv[this.fx[15]] + 26, 18);
        }
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 585, 11);
        atexturerenderer.setOrientation(0);
        if (this.be >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (344 - (dv[this.fx[13]] / 2)), 590 - (dv[this.fx[13]] / 2), dv[this.fx[13]] + 247, dv[this.fx[13]] + 48, 22);
            if (this.be == 1 && (this.blinkFrame[3] % 8) / 4 == 0) {
                atexturerenderer.drawScaledImage(this.newTexture, this.excessWidth + 312, 550, 80, 80, 0);
            }
        }
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (688 - (dv[this.fx[14]] / 2)), 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
        if (this.bf >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (733 - (dv[this.fx[14]] / 2)), 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[0], this.excessWidth + 610, 607, 24);
        int i26 = this.catfood;
        int i27 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i27 * 29)) + this.excessWidth, 592, i26 % 10);
            i26 /= 10;
            i27++;
        } while (i26 > 0);
        int i28 = 0;
        int i29 = 0;
        while (true) {
            int i30 = i28;
            int i31 = i29;
            if (i31 >= this.fL) {
                return;
            }
            if (this.by[i31] >= 1) {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (20 - this.gc[i30]) - (dv[this.fx[i31]] / 2), (((i30 * 72) + 75) + (i30 * 20)) - (dv[this.fx[i31]] / 2), dv[this.fx[i31]] + 381, dv[this.fx[i31]] + 72, 3);
                atexturerenderer.drawScaledImage(this.uiTextures[4], ((20 - this.gc[i30]) + 63) - (dv[this.fx[i31]] / 2), ((((i30 * 72) + 75) + (i30 * 20)) + 8) - (dv[this.fx[i31]] / 2), dv[this.fx[i31]] + 254, dv[this.fx[i31]] + 55, i31 + 2);
                if (!this.eE[0] && !this.eE[2] && !this.eb && this.fx[5] == 0 && !this.gu && isPointerDown() && isTouching(this.buttonCoordinates1[i31][0], this.buttonCoordinates1[i31][1], this.buttonCoordinates1[i31][2], this.buttonCoordinates1[i31][3]) && this.fI == i31) {
                    if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                        if (this.fx[i31] == 0) {
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], 20 - this.gc[i30], (i30 * 20) + (i30 * 72) + 75, 381, 72, 4);
                        }
                    } else if (this.fx[i31] == 0) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], 20 - this.gc[i30], (i30 * 20) + (i30 * 72) + 75, 381, 72, 5);
                    }
                }
                if ((this.eE[1] || this.fx[i31] >= 1) && this.fI == i31) {
                    if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], 20 - this.gc[i30], (i30 * 20) + (i30 * 72) + 75, 381, 72, 4);
                    } else {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], 20 - this.gc[i30], (i30 * 20) + (i30 * 72) + 75, 381, 72, 5);
                    }
                }
                if (this.by[i31] == 1 && (this.blinkFrame[3] % 8) / 4 == 0 && i31 >= 1) {
                    atexturerenderer.drawScaledImage(this.newTexture, (((20 - this.gc[i30]) + 381) - 32) - 15, (((i30 * 72) + 75) + (i30 * 20)) - 40, 80, 80, 0);
                }
                i28 = i30 + 1;
            } else {
                i28 = i30;
            }
            i29 = i31 + 1;
        }
    }

    boolean j() {
        this.eG = 1;
        if (this.battleData[15] != 0) {
            handleBattleZoom();
        } else {
            this.scrollAmount[0] = 0;
        }
        int[] iArr = this.battleData;
        iArr[16] = iArr[16] + 1;
        if (this.battleData[15] == 0) {
            this.zoomLevel += 800;
            int[] iArr2 = this.eI;
            iArr2[0] = iArr2[0] + 10;
            if (this.battleData[12] == 0 && this.battleData[16] >= 20) {
                this.battleData[15] = 1;
                this.battleData[16] = 0;
                this.eI[0] = 1000;
            }
        } else if (this.battleData[15] < 1 || this.battleData[15] > 2) {
            if (this.battleData[15] == 3) {
                this.buttonCoordinates1[4][0] = (getWidth() / 2) - 190;
                this.buttonCoordinates1[4][1] = 640;
                this.buttonCoordinates1[4][2] = 381;
                this.buttonCoordinates1[4][3] = 88;
                int[] iArr3 = this.eI;
                iArr3[1] = iArr3[1] + 20;
                if (this.eI[1] >= 96) {
                    this.eI[1] = 96;
                    this.battleData[15] = 7;
                }
                this.buttonCoordinates1[4][1] = ((640 - this.eI[1]) - 8) + this.eZ;
            } else if (this.battleData[15] == 7) {
                if (isPointerDown()) {
                    if (this.eE[0] || this.eE[4]) {
                        this.eE[1] = true;
                    }
                } else if (!isPointerUp()) {
                    this.eE[1] = false;
                }
                if (this.fx[0] >= 1) {
                    int[] iArr4 = this.fx;
                    iArr4[0] = iArr4[0] + 1;
                    if (this.fx[0] > getLength(dv) - 1) {
                        this.fx[0] = 0;
                        screenTransition();
                        this.eb = true;
                        this.ed = 1;
                        return false;
                    }
                } else if (this.fx[10] >= 1) {
                    int[] iArr5 = this.fx;
                    iArr5[10] = iArr5[10] + 1;
                    if (this.fx[10] > getLength(dv) - 1) {
                        this.fx[10] = 0;
                        screenTransition();
                        this.j = true;
                        this.menuType = 5;
                        return false;
                    }
                } else if (this.fx[11] >= 1) {
                    int[] iArr6 = this.fx;
                    iArr6[11] = iArr6[11] + 1;
                    if (this.fx[11] > getLength(dv) - 1) {
                        this.zoom.reset();
                        this.fx[11] = 0;
                        if (MyUtility.isConnected()) {
                            aTwitter.getInstance().tweet(String.format("%s %s %s", MyUtility.getString("twitter_txt2"), MyUtility.getString("url_abbr"), MyUtility.getString("twitter_hash")), null, null);
                        } else {
                            MyUtility.getInstance().addButton(MyUtility.getString("network_unavailable"));
                        }
                    }
                } else if (!this.eE[0] && this.scrollAmount[0] == 0 && !this.eE[1] && !this.eE[2] && !this.eE[3]) {
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[4][0], this.buttonCoordinates1[4][1], this.buttonCoordinates1[4][2], this.buttonCoordinates1[4][3])) {
                        this.gp[4] = false;
                    } else if (!this.gp[4]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[4] = true;
                    }
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[10][0], this.buttonCoordinates1[10][1], this.buttonCoordinates1[10][2], this.buttonCoordinates1[10][3])) {
                        this.gp[10] = false;
                    } else if (!this.gp[10]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[10] = true;
                    }
                    if (aTwitter.getInstance().c()) {
                        if (!isPointerDown() || !isTouching(this.buttonCoordinates1[11][0], this.buttonCoordinates1[11][1], this.buttonCoordinates1[11][2], this.buttonCoordinates1[11][3])) {
                            this.gp[11] = false;
                        } else if (!this.gp[11]) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gp[11] = true;
                        }
                    }
                    if (isPointerUp() && isTouching(this.buttonCoordinates1[4][0], this.buttonCoordinates1[4][1], this.buttonCoordinates1[4][2], this.buttonCoordinates1[4][3])) {
                        int[] iArr7 = this.fx;
                        iArr7[0] = iArr7[0] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isPointerUp() && isTouching(this.buttonCoordinates1[10][0], this.buttonCoordinates1[10][1], this.buttonCoordinates1[10][2], this.buttonCoordinates1[10][3])) {
                        int[] iArr8 = this.fx;
                        iArr8[10] = iArr8[10] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    } else if (isPointerUp() && isTouching(this.buttonCoordinates1[11][0], this.buttonCoordinates1[11][1], this.buttonCoordinates1[11][2], this.buttonCoordinates1[11][3]) && aTwitter.getInstance().c()) {
                        int[] iArr9 = this.fx;
                        iArr9[11] = iArr9[11] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    }
                }
            }
        } else if (this.battleData[16] >= getLength(cq)) {
            int[] iArr10 = this.battleData;
            iArr10[15] = iArr10[15] + 1;
            this.battleData[16] = 0;
        }
        return true;
    }

    void mapDraw(aTextureRenderer atexturerenderer) {
        int i;
        int i2;
        int i3;
        float f = 0;
        float boxXOffset = 0;
        int dotIndex1 = 0;
        atexturerenderer.setColor(220, 223, 209);
        atexturerenderer.drawRectangle(0, 0, getWidth(), getHeight());
        atexturerenderer.drawScaledImage(this.uiTextures[6], this.mapOffsetX[0] + 3156, this.mapOffsetY[0] + 12, 258, 412, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[6], this.mapOffsetX[0] + 2782, this.mapOffsetY[0] + 986, 153, 153, 8);
        atexturerenderer.drawScaledImage(this.uiTextures[6], this.mapOffsetX[0] + 2680, this.mapOffsetY[0] + 1023, 86, 86, 7);
        atexturerenderer.drawScaledImage(this.uiTextures[6], this.mapOffsetX[0] + 2271, this.mapOffsetY[0] + 1068, 664, 464, 0);
        atexturerenderer.drawScaledImage(this.uiTextures[6], this.mapOffsetX[0] + 1363, this.mapOffsetY[0] + 1485, 1572, 1155, 1);
        atexturerenderer.drawScaledImage(this.uiTextures[6], this.mapOffsetX[0] + 1010, this.mapOffsetY[0] + 1852, 135, 95, 9);
        atexturerenderer.drawScaledImage(this.uiTextures[6], this.mapOffsetX[0] + 11, this.mapOffsetY[0] + 1000, 292, 135, 3);
        atexturerenderer.drawScaledImage(this.uiTextures[6], this.mapOffsetX[0] + 360, this.mapOffsetY[0] + 1043, 89, 83, 5);
        atexturerenderer.drawScaledImage(this.uiTextures[6], this.mapOffsetX[0] + 873, this.mapOffsetY[0] + 785, 316, 230, 2);
        atexturerenderer.drawScaledImage(this.uiTextures[6], this.mapOffsetX[0] + 1197, this.mapOffsetY[0] + 741, 76, 55, 6);
        atexturerenderer.drawScaledImage(this.uiTextures[6], this.mapOffsetX[0] + 1280, this.mapOffsetY[0] + 581, 323, 153, 4);
        atexturerenderer.drawScaledImage(this.uiTextures[7], this.mapOffsetX[0] + 3082, this.mapOffsetY[0] + 0, 70, 113, 48);
        atexturerenderer.drawScaledImage(this.uiTextures[7], this.mapOffsetX[0] + 2321, this.mapOffsetY[0] + 308, 1569, 701, 49);
        atexturerenderer.drawScaledImage(this.uiTextures[11], this.mapOffsetX[0] + 90, this.mapOffsetY[0] + 2018, 1289, 781, 0);
        atexturerenderer.drawScaledImage(this.uiTextures[11], this.mapOffsetX[0] + 12, this.mapOffsetY[0] + 2336, 172, 172, 4);
        atexturerenderer.drawScaledImage(this.uiTextures[11], this.mapOffsetX[0] + 238, this.mapOffsetY[0] + 2785, 280, 147, 1);
        atexturerenderer.drawScaledImage(this.uiTextures[11], this.mapOffsetX[0] + 183, this.mapOffsetY[0] + 2945, 236, 147, 2);
        atexturerenderer.drawScaledImage(this.uiTextures[11], this.mapOffsetX[0] + 163, this.mapOffsetY[0] + 2912, 30, 27, 3);
        int stageIndex = 0;
        while (true) { // draw dotted line between stages
            int stageIndex1 = stageIndex;
            if (stageIndex1 >= 45) {
                break;
            }
            if (this.br[this.eQ][stageIndex1] >= 1) {
                int i7 = cm[stageIndex1];
                int i8 = cm[stageIndex1 + 1];
                float atan2 = aMath.atan2(ck[i8][1] - ck[i7][1], ck[i8][0] - ck[i7][0]);
                while (true) {
                    int dotIndex = dotIndex1;
                    if (dotIndex >= 200) {
                        break;
                    }
                    atexturerenderer.drawScaledImage(this.uiTextures[9], (int) (((ck[i7][0] + this.mapOffsetX[0]) + (((dotIndex * 20) + 24) * aMath.cos(atan2))) - 8.0f), (int) (((ck[i7][1] + this.mapOffsetY[0]) + (((dotIndex * 20) + 24) * aMath.sin(atan2))) - 8.0f), 16, 16, 1);
                    dotIndex1 = isInsideCircle((int) (((float) (ck[i7][0] + this.mapOffsetX[0])) + (((float) ((dotIndex * 20) + 24)) * aMath.cos(atan2))), (int) (((float) (ck[i7][1] + this.mapOffsetY[0])) + (((float) ((dotIndex * 20) + 24)) * aMath.sin(atan2))), 8, this.mapOffsetX[0] + ck[i8][0], this.mapOffsetY[0] + ck[i8][1], 20) ? 0 : dotIndex + 1;
                    if (dotIndex1 == 0) {
                        break;
                    }
                }
            }
            stageIndex = stageIndex1 + 1;
        }

        int stageIndex1 = 0;
        while (true) { // draw map dots
            int stageIndex2 = stageIndex1;
            if (stageIndex2 >= 48) {
                break;
            }
            int i12 = cm[stageIndex2];
            atexturerenderer.setImageAlpha(255);
            atexturerenderer.setOrientation(0);
            if (stageIndex2 == this.bq[this.eQ]) {
                atexturerenderer.drawScaledImage(this.uiTextures[9], (ck[i12][0] + this.mapOffsetX[0]) - 23, (ck[i12][1] + this.mapOffsetY[0]) - 23, 47, 47, 4);
            } else if (this.br[this.eQ][stageIndex2] >= 1) {
                atexturerenderer.drawScaledImage(this.uiTextures[9], (ck[i12][0] + this.mapOffsetX[0]) - 20, (ck[i12][1] + this.mapOffsetY[0]) - 20, 41, 41, 2);
                atexturerenderer.setOrientation(0);
            }
            stageIndex1 = stageIndex2 + 1;
        }

        // draw cat shadow
        atexturerenderer.setImageAlpha(63);
        atexturerenderer.drawScaledImage(this.uiTextures[1], (this.dM[this.mapCatPosition] + this.mapOffsetX[0]) - 1, this.dN[this.mapCatPosition] + this.mapOffsetY[0] + 40, 59, 26, 6);
        atexturerenderer.setImageAlpha(255);

        if (this.dT == 0) {
            atexturerenderer.setOrientation(0);
        } else {
            atexturerenderer.setOrientation(1);
        }
        if ((this.blinkFrame[3] % 16) / 4 == 0) { // draw map cat
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.mapOffsetX[0] + this.dM[this.mapCatPosition], this.mapOffsetY[0] + this.dN[this.mapCatPosition], 57, 57, 3);
        } else if ((this.blinkFrame[3] % 16) / 4 == 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.mapOffsetX[0] + this.dM[this.mapCatPosition], this.mapOffsetY[0] + this.dN[this.mapCatPosition], 57, 57, 4);
        } else if ((this.blinkFrame[3] % 16) / 4 == 2) {
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.mapOffsetX[0] + this.dM[this.mapCatPosition], this.mapOffsetY[0] + this.dN[this.mapCatPosition], 57, 57, 3);
        } else if ((this.blinkFrame[3] % 16) / 4 == 3) {
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.mapOffsetX[0] + this.dM[this.mapCatPosition], this.mapOffsetY[0] + this.dN[this.mapCatPosition], 57, 57, 5);
        } else if ((this.blinkFrame[3] % 16) / 4 == 3) {
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.mapOffsetX[0] + this.dM[this.mapCatPosition], this.mapOffsetY[0] + this.dN[this.mapCatPosition], 57, 57, 3);
        }

        atexturerenderer.setOrientation(0);
        if (!this.eE[2] && this.dY == 0) {
            atexturerenderer.drawScaledImage(this.uiTextures[9], this.excessWidth + (640 - (dv[this.fx[0]] / 2)), 411 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 304, dv[this.fx[0]] + 74, 10);
            atexturerenderer.drawScaledImage(this.uiTextures[9], this.excessWidth + (678 - (dv[this.fx[0]] / 2)), 417 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 231, dv[this.fx[0]] + 62, 11);
            if (this.aZ == 0 && this.currentEnergy < this.stageEoCStats[this.currentStageBox[2]] + X[this.eQ]) {
                atexturerenderer.setImageColor(0, 0, 0);
                atexturerenderer.setImageAlpha(127);
                atexturerenderer.drawScaledImage(this.uiTextures[9], this.excessWidth + (640 - (dv[this.fx[0]] / 2)), 411 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 304, dv[this.fx[0]] + 74, 10);
                atexturerenderer.setImageColor(255, 255, 255);
                atexturerenderer.setImageAlpha(255);
            }
            atexturerenderer.drawScaledImage(this.uiTextures[9], this.excessWidth + 640, 411, 304, 74, ((this.blinkFrame[3] % 4) / 2) + 5);
            atexturerenderer.drawScaledImage(this.uiTextures[9], this.excessWidth + (667 - (dv[this.fx[16]] / 2)), 362 - (dv[this.fx[16]] / 2), dv[this.fx[16]] + 272, dv[this.fx[16]] + 44, 39);
            if (this.aZ != 0) {
                atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (899 - (dv[this.fx[16]] / 2)), 358 - (dv[this.fx[16]] / 2), dv[this.fx[16]] + 27, dv[this.fx[16]] + 26, 18);
            }
            int i13 = 0;
            for (int i14 = 0; i14 < 10; i14++) {
                i13 += (cB[10] * this.bO[i14][10]) / 100;
            }
            int currentEnergy1 = this.currentEnergy;
            if (currentEnergy1 >= i13 + ad[10] + (this.bx[10] * 10)) {
                atexturerenderer.setImageColor(128, 255, 0);
            } else {
                atexturerenderer.setImageColor(255, 255, 255);
            }
            int totalDigits = 0;
            while (true) {
                currentEnergy1 /= 10;
                if (currentEnergy1 <= 0) {
                    break;
                }
                totalDigits--;
            }
            int currentEnergy2 = this.currentEnergy;
            do {
                int currentEnergy21 = currentEnergy2;
                atexturerenderer.drawScaledImage(this.uiTextures[9], this.excessWidth + (((861 - (totalDigits * 8)) - 9) - (dv[this.fx[16]] / 2)), 371 - (dv[this.fx[16]] / 2), dv[this.fx[16]] + 18, dv[this.fx[16]] + 27, (currentEnergy21 % 10) + 14);
                currentEnergy2 = currentEnergy21 / 10;
                totalDigits += 2;
            } while (currentEnergy2 > 0);
        }
        atexturerenderer.setImageColor(255, 255, 255);

        int boxIndex = 2;
        while (true) { // draw stage boxes
            int boxIndex2 = boxIndex;
            if (boxIndex2 >= this.boxCounts[0] + this.boxCounts[1]) {
                break;
            }
            if (this.currentStageBox[0] == boxIndex2) {
                boxXOffset = -(243 - this.boxSize[boxIndex2][0]);
            } else if (this.currentStageBox[0] + 1 == boxIndex2) {
                boxXOffset = 243 - this.boxSize[boxIndex2][0];
            } else if (this.currentStageBox[0] + 2 == boxIndex2) {
                boxXOffset = (243 - this.boxSize[boxIndex2][0]) + ((243 - this.boxSize[boxIndex2 - 1][0]) / 2.0f);
            } else if (this.currentStageBox[0] + 3 == boxIndex2) {
                boxXOffset = (243 - this.boxSize[boxIndex2][0]) + ((243 - this.boxSize[boxIndex2 - 1][0]) / 2.0f) + ((243 - this.boxSize[boxIndex2 - 2][0]) / 2.0f);
            } else if (this.currentStageBox[0] - 1 == boxIndex2) {
                boxXOffset = -((243 - this.boxSize[boxIndex2][0]) + ((243 - this.boxSize[boxIndex2 + 1][0]) / 2.0f));
            } else if (this.currentStageBox[0] - 2 == boxIndex2) {
                boxXOffset = -((243 - this.boxSize[boxIndex2][0]) + ((243 - this.boxSize[boxIndex2 + 1][0]) / 2.0f));
            } else {
                boxIndex = boxIndex2 + 1;
            }
            atexturerenderer.setImageAlpha(255 - ((255 - ((((this.boxSize[boxIndex2][0] * 100) / 243) * 255) / 100)) * 2));
            atexturerenderer.drawScaledImagef(this.uiTextures[9], ((getWidth() / 2.0f) - (this.boxSize[boxIndex2][0] / 2.0f)) + (this.boxScale * boxIndex2) + this.gameStats1[0] + boxXOffset, 66.0f, this.boxSize[boxIndex2][0], this.boxSize[boxIndex2][1], 0);
            atexturerenderer.drawScaledImagef(this.uiTextures[7], ((10.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex2][0] / 2.0f)) + (this.boxScale * boxIndex2) + this.gameStats1[0] + boxXOffset, ((19.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (224.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f, (45.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f, cm[boxIndex2 - 2]);
            atexturerenderer.setImageAlpha(255);
            atexturerenderer.drawScaledImagef(this.uiTextures[9], ((37.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex2][0] / 2.0f)) + (this.boxScale * boxIndex2) + this.gameStats1[0] + boxXOffset, ((84.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (73.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f, (30.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f, 27);
            int i21 = X[this.eQ] + this.stageEoCStats[boxIndex2 - 2];
            int i22 = 0;
            do { // draw energy
                int i23 = i21;
                atexturerenderer.drawScaledImagef(this.uiTextures[9], (((182 - (i22 * 17)) * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex2][0] / 2.0f)) + (this.boxScale * boxIndex2) + this.gameStats1[0] + boxXOffset, ((84.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (18.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f, (27.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f, (i23 % 10) + 29);
                i21 = i23 / 10;
                i22++;
            } while (i21 > 0);
            atexturerenderer.drawScaledImagef(this.uiTextures[9], ((getWidth() / 2.0f) - (this.boxSize[boxIndex2][0] / 2.0f)) + (this.boxScale * boxIndex2) + this.gameStats1[0] + boxXOffset + (((182 - (i22 * 17)) * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f), ((84.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (18.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f, (27.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f, 28);
            if (!this.eE[2] && this.dY == 0) {
                int i24 = this.br[this.eQ][boxIndex2 - 2];
                if (boxIndex2 - 2 == this.currentStageBox[2] && !this.eE[9] && i24 >= 1) {
                    if (this.regionState == 0) {
                        atexturerenderer.drawScaledImagef(this.uiTextures[9], ((42.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex2][0] / 2.0f)) + (this.boxScale * boxIndex2) + this.gameStats1[0] + boxXOffset, ((116.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (64.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f, (29.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f, 12);
                        atexturerenderer.drawScaledImagef(this.uiTextures[9], ((168.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex2][0] / 2.0f)) + (this.boxScale * boxIndex2) + this.gameStats1[0] + boxXOffset, ((116.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (28.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f, (29.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f, 13);
                        int i25 = i24;
                        int i26 = 0;
                        while (true) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[9], (((148 - (i26 * 17)) * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex2][0] / 2.0f)) + (this.boxScale * boxIndex2) + this.gameStats1[0] + boxXOffset, ((116.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (18.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f, (27.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f, (i25 % 10) + 14);
                            int i27 = i25 / 10;
                            int i28 = i26 + 1;
                            if (i27 <= 0) {
                                break;
                            }
                            i26 = i28;
                            i25 = i27;
                        }
                    } else if (this.regionState == 1) {
                        atexturerenderer.drawScaledImagef(this.uiTextures[9], ((45.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex2][0] / 2.0f)) + (this.boxScale * boxIndex2) + this.gameStats1[0] + boxXOffset, ((116.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (64.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f, (29.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f, 12);
                        atexturerenderer.drawScaledImagef(this.uiTextures[9], ((168.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex2][0] / 2.0f)) + (this.boxScale * boxIndex2) + this.gameStats1[0] + boxXOffset, ((116.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (28.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f, (29.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f, 13);
                        int i29 = i24;
                        int i30 = 0;
                        while (true) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[9], (((182 - (i30 * 17)) * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex2][0] / 2.0f)) + (this.boxScale * boxIndex2) + this.gameStats1[0] + boxXOffset, ((116.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (18.0f * ((this.boxSize[boxIndex2][0] * 100.0f) / 243.0f)) / 100.0f, (27.0f * ((this.boxSize[boxIndex2][1] * 100.0f) / 81.0f)) / 100.0f, (i29 % 10) + 14);
                            int i31 = i29 / 10;
                            int i32 = i30 + 1;
                            if (i31 <= 0) {
                                break;
                            }
                            i30 = i32;
                            i29 = i31;
                        }
                    }
                }
            }
            boxIndex = boxIndex2 + 1;
        }

        int i33 = 2;
        while (true) {
            int i34 = i33;
            if (i34 >= this.boxCounts[0] + this.boxCounts[1]) {
                break;
            }
            if (this.currentStageBox[0] == i34) {
                f = -(243 - this.boxSize[i34][0]);
            } else if (this.currentStageBox[0] + 1 == i34) {
                f = 243 - this.boxSize[i34][0];
            } else if (this.currentStageBox[0] + 2 == i34) {
                f = (243 - this.boxSize[i34][0]) + ((243 - this.boxSize[i34 - 1][0]) / 2.0f);
            } else if (this.currentStageBox[0] + 3 == i34) {
                f = (243 - this.boxSize[i34][0]) + ((243 - this.boxSize[i34 - 1][0]) / 2.0f) + ((243 - this.boxSize[i34 - 2][0]) / 2.0f);
            } else if (this.currentStageBox[0] - 1 == i34) {
                f = -((243 - this.boxSize[i34][0]) + ((243 - this.boxSize[i34 + 1][0]) / 2.0f));
            } else if (this.currentStageBox[0] - 2 == i34) {
                f = -((243 - this.boxSize[i34][0]) + ((243 - this.boxSize[i34 + 1][0]) / 2.0f));
            } else {
                i33 = i34 + 1;
            }
            if (this.bq[0] >= 7) {
                if (this.bs[this.eQ][cm[i34 - 2]] == 1) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[9], ((203.0f * ((this.boxSize[i34][0] * 100.0f) / 243.0f)) / 100.0f) + f + ((getWidth() / 2.0f) - (this.boxSize[i34][0] / 2.0f)) + (this.boxScale * i34) + this.gameStats1[0], (((-9.0f) * ((this.boxSize[i34][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (47.0f * ((this.boxSize[i34][0] * 100.0f) / 243.0f)) / 100.0f, (47.0f * ((this.boxSize[i34][1] * 100.0f) / 81.0f)) / 100.0f, 7);
                } else if (this.bs[this.eQ][cm[i34 - 2]] == 2) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[9], ((203.0f * ((this.boxSize[i34][0] * 100.0f) / 243.0f)) / 100.0f) + f + ((getWidth() / 2.0f) - (this.boxSize[i34][0] / 2.0f)) + (this.boxScale * i34) + this.gameStats1[0], (((-9.0f) * ((this.boxSize[i34][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (47.0f * ((this.boxSize[i34][0] * 100.0f) / 243.0f)) / 100.0f, (47.0f * ((this.boxSize[i34][1] * 100.0f) / 81.0f)) / 100.0f, 8);
                } else if (this.bs[this.eQ][cm[i34 - 2]] == 3) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[9], ((203.0f * ((this.boxSize[i34][0] * 100.0f) / 243.0f)) / 100.0f) + f + ((getWidth() / 2.0f) - (this.boxSize[i34][0] / 2.0f)) + (this.boxScale * i34) + this.gameStats1[0], (((-9.0f) * ((this.boxSize[i34][1] * 100.0f) / 81.0f)) / 100.0f) + 66.0f, (47.0f * ((this.boxSize[i34][0] * 100.0f) / 243.0f)) / 100.0f, (47.0f * ((this.boxSize[i34][1] * 100.0f) / 81.0f)) / 100.0f, 9);
                }
            }
            atexturerenderer.setImageAlpha(255);
            i33 = i34 + 1;
        }

        atexturerenderer.setImageAlpha(127);
        if (!this.gN) {
            if (this.currentStageBox[2] >= 1) {
                atexturerenderer.drawScaledImagef(this.uiTextures[10], (int) (49.0f + (10.0f * aMath.sin(this.blinkFrame[3] * 30))), 58, 0);
            }
            if (this.currentStageBox[2] <= this.boxCounts[1] - 2) {
                atexturerenderer.setOrientation(1);
                atexturerenderer.drawScaledImagef(this.uiTextures[10], ((int) (849.0f - (10.0f * aMath.sin(this.blinkFrame[3] * 30)))) + this.excessWidth, 58, 0);
            }
        }
        atexturerenderer.setOrientation(0);
        atexturerenderer.setImageAlpha(255);
        if (this.be >= 1 && !this.gN) {
            int i35 = 0;
            while (true) {
                int i36 = i35;
                if (i36 >= 6) {
                    break;
                }
                if (this.eM[i36]) {
                    atexturerenderer.drawScaledImage(this.uiTextures[7], this.excessWidth + (((i36 * 88) + 447) - (dv[this.eK[i36]] / 2)), 500 - (dv[this.eK[i36]] / 2), dv[this.eK[i36]] + 58, dv[this.eK[i36]] + 58, i36 + 50);
                } else {
                    atexturerenderer.drawScaledImage(this.uiTextures[7], this.excessWidth + (((i36 * 88) + 447) - (dv[this.eK[i36]] / 2)), 500 - (dv[this.eK[i36]] / 2), dv[this.eK[i36]] + 58, dv[this.eK[i36]] + 58, i36 + 56);
                }
                atexturerenderer.setImageAlpha(63);
                atexturerenderer.drawScaledImage(this.uiTextures[7], this.excessWidth + (i36 * 88) + 436, 559, 80, 22, 63);
                atexturerenderer.setImageAlpha(255);
                if (this.eM[i36]) {
                    i = 1;
                    i2 = 10;
                    i3 = this.bA[i36] - 1;
                } else {
                    i = 1;
                    i2 = 10;
                    i3 = this.bA[i36];
                }
                while (i2 <= i3) {
                    i2 *= 10;
                    i--;
                }
                atexturerenderer.drawScaledImagef(this.uiTextures[13], ((((i36 * 88) + 476) + ((i - 2) * 6)) - 7) + this.excessWidth, 561, 102);
                while (true) {
                    i2 /= 10;
                    if (i2 < 1) {
                        break;
                    }
                    atexturerenderer.drawScaledImagef(this.uiTextures[13], ((((i36 * 88) + 476) + (i * 6)) - 7) + this.excessWidth, 561, ((i3 / i2) % 10) + 57);
                    i += 2;
                }
                i35 = i36 + 1;
            }
        }
        if (this.be >= 1) {
            if (this.dV || this.gA[0] >= 1) {
                if (this.dW == 1 && this.bb == 0) {
                    atexturerenderer.setColor(0, 0, 0, 216);
                    atexturerenderer.fillRect(242.0f + this.excessWidth, 281.0f, 710.0f, 42.0f);
                    atexturerenderer.setColor(255, 0, 0);
                    for (int i37 = 0; i37 < getLength(this.warning2Text[15]) && !aString.isEqual(this.warning2Text[15][i37], "＠"); i37++) {
                        atexturerenderer.drawScaledImage(this.textTextures[i37 + 20], this.excessWidth + 597, 287, 1);
                    }
                } else if (this.bA[this.dW] <= 0) {
                    atexturerenderer.setColor(0, 0, 0, 216);
                    atexturerenderer.fillRect(242.0f + this.excessWidth, 281.0f, 710.0f, 42.0f);
                    atexturerenderer.setColor(255, 0, 0);
                    for (int i38 = 0; i38 < getLength(this.warning2Text[1]) && !aString.isEqual(this.warning2Text[1][i38], "＠"); i38++) {
                        atexturerenderer.drawScaledImage(this.textTextures[i38 + 10], this.excessWidth + 597, 287, 1);
                    }
                }
                atexturerenderer.setColor(255, 255, 255, 216);
                atexturerenderer.fillRect(242.0f + this.excessWidth, 323.0f, 710.0f, 159.0f);
                atexturerenderer.setImageAlpha(216);
                atexturerenderer.drawScaledImagef(this.uiTextures[7], (this.dW * 88) + 460 + this.excessWidth, 482, 65);
                atexturerenderer.setImageAlpha(255);
                atexturerenderer.setColor(0, 0, 0);
                for (int i39 = 0; i39 < 4; i39++) {
                    if (i39 == 0) {
                        atexturerenderer.drawScaledImage(this.textTextures[i39], this.excessWidth + 597, (((i39 * 36) + 421) - 108) + 21, 1);
                    } else if (!aString.isEqual(this.itemExplanationText[this.dW][i39 - 1], "＠")) {
                        atexturerenderer.drawScaledImage(this.textTextures[i39], this.excessWidth + 597, (((i39 * 36) + 421) - 108) + 21, 1);
                    }
                }
            } else if (this.ct >= 1) {
                atexturerenderer.setColor(255, 255, 255, 216);
                atexturerenderer.drawRectangle(this.excessWidth + 242, 323, 710, 159);
                atexturerenderer.setImageAlpha(216);
                atexturerenderer.drawScaledImagef(this.uiTextures[7], (this.dW * 88) + 460 + this.excessWidth, 482, 65);
                atexturerenderer.setImageAlpha(255);
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.setColor(255, 0, 0);
                for (int i40 = 0; i40 < getLength(this.warning2Text[1]) && !aString.isEqual(this.warning2Text[1][i40], "＠"); i40++) {
                    atexturerenderer.drawScaledImage(this.textTextures[i40 + 10], this.excessWidth + 597, (((i40 * 36) + 421) - 108) + 21, 1);
                }
            }
        }
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], ((getWidth() / 2) - 572) - this.fP, 0, 572, 637, 0);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], this.fP + (getWidth() / 2), 0, 572, 637, 1);
        int i41 = 0;
        if (this.dY == 0) {
            if (this.fR[0] == 0) {
                i41 = cu[this.blinkFrame[0]];
            } else if (this.fR[0] == 1) {
                i41 = cv[this.blinkFrame[0]];
            } else {
                int i42 = this.fR[0];
            }
        }
        if (this.dY == 1) {
            int i43 = 312;
            if (this.regionState == 0) {
                if (this.blinkFrame[0] == 2 || this.blinkFrame[0] == 3 || this.blinkFrame[0] == 6 || this.blinkFrame[0] == 7 || this.blinkFrame[0] == 10 || this.blinkFrame[0] == 11 || this.blinkFrame[0] == 14 || this.blinkFrame[0] == 15 || this.blinkFrame[0] == 18 || this.blinkFrame[0] == 19) {
                    i43 = 308;
                }
            } else if (this.regionState == 1 && (this.blinkFrame[0] == 2 || this.blinkFrame[0] == 3 || this.blinkFrame[0] == 6 || this.blinkFrame[0] == 7 || this.blinkFrame[0] == 10 || this.blinkFrame[0] == 11 || this.blinkFrame[0] == 14 || this.blinkFrame[0] == 15)) {
                i43 = 308;
            }
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i43, 355, 355, 0);
            if (this.blinkFrame[0] >= 2) {
                if (this.regionState == 0) {
                    if (this.blinkFrame[0] - 2 == 0) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) - 28, -1, 504, 504, 0);
                    } else if (this.blinkFrame[0] - 2 == 1) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 35, 62, 378, 378, 0);
                    } else if (this.blinkFrame[0] - 2 == 2) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 98, 125, 252, 252, 0);
                    } else if (this.blinkFrame[0] - 2 >= 3) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 161, 188, 126, 126, 0);
                    }
                } else if (this.regionState == 1) {
                    if (this.blinkFrame[0] - 2 == 0) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) - 244, -1, 980, 504, 0);
                    } else if (this.blinkFrame[0] - 2 == 1) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) - 122, 62, 735, 378, 0);
                    } else if (this.blinkFrame[0] - 2 == 2) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 1, 125, 490, 252, 0);
                    } else if (this.blinkFrame[0] - 2 >= 3) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 123, 188, 245, 126, 0);
                    }
                }
            }
            if (this.blinkFrame[0] >= 6) {
                if (this.regionState == 0) {
                    if (this.blinkFrame[0] - 6 == 0) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 100, -1, 504, 504, 1);
                    } else if (this.blinkFrame[0] - 6 == 1) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 163, 62, 378, 378, 1);
                    } else if (this.blinkFrame[0] - 6 == 2) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 226, 125, 252, 252, 1);
                    } else if (this.blinkFrame[0] - 6 >= 3) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 289, 188, 126, 126, 1);
                    }
                } else if (this.regionState == 1) {
                    if (this.blinkFrame[0] - 6 == 0) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) - 191, -1, 1500, 504, 1);
                    } else if (this.blinkFrame[0] - 6 == 1) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) - 4, 62, 1125, 378, 1);
                    } else if (this.blinkFrame[0] - 6 == 2) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 184, 125, 750, 252, 1);
                    } else if (this.blinkFrame[0] - 6 >= 3) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 371, 188, 375, 126, 1);
                    }
                }
            }
            if (this.blinkFrame[0] >= 10) {
                if (this.regionState == 0) {
                    if (this.blinkFrame[0] - 10 == 0) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 228, -1, 504, 504, 2);
                    } else if (this.blinkFrame[0] - 10 == 1) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 291, 62, 378, 378, 2);
                    } else if (this.blinkFrame[0] - 10 == 2) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 354, 125, 252, 252, 2);
                    } else if (this.blinkFrame[0] - 10 >= 3) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 417, 188, 126, 126, 2);
                    }
                } else if (this.regionState == 1) {
                    if (this.blinkFrame[0] - 10 == 0) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 683, -1, 176, 504, 2);
                    } else if (this.blinkFrame[0] - 10 == 1) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 705, 62, 132, 378, 2);
                    } else if (this.blinkFrame[0] - 10 == 2) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 727, 125, 88, 252, 2);
                    } else if (this.blinkFrame[0] - 10 >= 3) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 749, 188, 44, 126, 2);
                    }
                }
            }
            if (this.blinkFrame[0] >= 14) {
                if (this.regionState == 0) {
                    if (this.blinkFrame[0] - 14 == 0) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 356, -1, 504, 504, 3);
                    } else if (this.blinkFrame[0] - 14 == 1) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 419, 62, 378, 378, 3);
                    } else if (this.blinkFrame[0] - 14 == 2) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 482, 125, 252, 252, 3);
                    } else if (this.blinkFrame[0] - 14 >= 3) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 545, 188, 126, 126, 3);
                    }
                } else if (this.regionState == 1) {
                    if (this.blinkFrame[0] - 14 == 0) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 727, -1, 176, 504, 3);
                    } else if (this.blinkFrame[0] - 14 == 1) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 749, 62, 132, 378, 3);
                    } else if (this.blinkFrame[0] - 14 == 2) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 771, 125, 88, 252, 3);
                    } else if (this.blinkFrame[0] - 14 >= 3) {
                        atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 793, 188, 44, 126, 3);
                    }
                }
            }
            if (this.blinkFrame[0] >= 18 && this.regionState == 0) {
                if (this.blinkFrame[0] - 18 == 0) {
                    atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 484, -1, 504, 504, 4);
                } else if (this.blinkFrame[0] - 18 == 1) {
                    atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 547, 62, 378, 378, 4);
                } else if (this.blinkFrame[0] - 18 == 2) {
                    atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 610, 125, 252, 252, 4);
                } else if (this.blinkFrame[0] - 18 >= 3) {
                    atexturerenderer.drawScaledImage(this.uiTextures[12], (this.excessWidth / 2) + 673, 188, 126, 126, 4);
                }
            }
        } else {
            if (this.eE[2]) {
                atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i41, 355, 355, 0);
            }
            if (this.aZ >= 1) {
                int i44 = 0;
                if (this.fR[0] == 0) {
                    i44 = cu[this.blinkFrame[0]];
                } else if (this.fR[0] == 1) {
                    i44 = cv[this.blinkFrame[0]];
                } else {
                    int i45 = this.fR[0];
                }
                atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i44, 355, 355, 0);
                if (this.blinkFrame[1] == 1 || this.blinkFrame[1] == 2 || this.blinkFrame[1] == 4 || this.blinkFrame[1] == 5) {
                    atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i44, 355, 191, 2);
                }
            }
        }
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, -42, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 638, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 0, getWidth(), 55, 0);
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 585, getWidth(), 55, 0);
        atexturerenderer.setOrientation(0);
        if (this.gm[0] < 297) {
            if (this.previousScreen == 0) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], (8 - this.gm[0]) - this.gameStats1[2], 3, 1);
            } else if (this.previousScreen == 1) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], (8 - this.gm[0]) - this.gameStats1[2], 3, 8);
            }
        }
        if (this.gm[1] < 297) {
            atexturerenderer.drawScaledImagef(this.uiTextures[2], (8 - this.gm[1]) - this.gameStats1[2], 3, 6);
        }
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.buttonCoordinates1[5][0] - (dv[this.fx[5]] / 2), this.ei[0] + (this.buttonCoordinates1[5][1] - (dv[this.fx[5]] / 2)), dv[this.fx[5]] + this.buttonCoordinates1[5][2], dv[this.fx[5]] + this.buttonCoordinates1[5][3], 9);
        atexturerenderer.drawScaledImage(this.uiTextures[0], (this.buttonCoordinates1[5][0] + 4) - (dv[this.fx[5]] / 2), this.ei[0] + ((this.buttonCoordinates1[5][1] + 17) - (dv[this.fx[5]] / 2)), dv[this.fx[5]] + 84, dv[this.fx[5]] + 60, 3);
        if (!this.eE[0] && !this.eE[1] && !this.eE[2] && !this.eE[13] && !this.eb && this.eE[10] && !this.gN && !this.dV) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], 3, 540, 96, 96, ((this.blinkFrame[3] % 4) / 2) + 12);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.gameStats1[2] + 670 + this.excessWidth, 0, 11);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.gameStats1[2] + 570 + this.excessWidth, 17, 10);
        int i46 = this.aY;
        int i47 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i47 * 29)) + this.gameStats1[2] + this.excessWidth, 6, i46 % 10);
            i46 /= 10;
            i47++;
        } while (i46 > 0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (633 - (dv[this.fx[15]] / 2)) + this.gameStats1[2], 8 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 62, dv[this.fx[15]] + 36, 23);
        if (this.be >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (681 - (dv[this.fx[15]] / 2)) + this.gameStats1[2], 23 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 27, dv[this.fx[15]] + 26, 18);
        }
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.gameStats1[2] + 670 + this.excessWidth, 585, 11);
        atexturerenderer.setOrientation(0);
        if (this.be >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (344 - (dv[this.fx[13]] / 2)) + this.gameStats1[2], 590 - (dv[this.fx[13]] / 2), dv[this.fx[13]] + 247, dv[this.fx[13]] + 48, 22);
            if (this.be == 1 && (this.blinkFrame[3] % 8) / 4 == 0) {
                atexturerenderer.drawScaledImage(this.newTexture, this.excessWidth + this.gameStats1[2] + 312, 550, 80, 80, 0);
            }
        }
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (688 - (dv[this.fx[14]] / 2)) + this.gameStats1[2], 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
        if (this.bf >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (733 - (dv[this.fx[14]] / 2)) + this.gameStats1[2], 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[0], this.gameStats1[2] + 610 + this.excessWidth, 607, 24);
        int i48 = this.catfood;
        int i49 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i49 * 29)) + this.gameStats1[2] + this.excessWidth, 592, i48 % 10);
            i48 /= 10;
            i49++;
        } while (i48 > 0);
    }

    boolean k() {
        this.eG = 1;
        int[] iArr = this.battleData;
        iArr[16] = iArr[16] + 1;
        if (this.battleData[15] == 0) {
            int[] iArr2 = this.eI;
            iArr2[0] = iArr2[0] + 10;
            this.zoomLevel += 800;
            if (this.battleData[12] == 0 && this.battleData[16] >= 20) {
                this.battleData[15] = 1;
                this.battleData[16] = 0;
                this.eI[0] = 1000;
            }
        } else if (this.battleData[15] == 1) {
            if (this.battleData[16] >= getLength(cs)) {
                this.battleData[15] = 2;
                this.battleData[16] = 0;
            }
        } else if (this.battleData[15] == 2) {
            if (this.battleData[16] >= 20) {
                this.battleData[15] = 3;
                this.battleData[16] = 0;
            }
        } else if (this.battleData[15] == 3 && isPointerDown()) {
            screenTransition();
            this.eb = true;
            this.ed = 1;
            return false;
        }
        return true;
    }

    void handleBattleZoom() {
        if (!this.eE[4]) {
            if (this.zoom.isZooming()) {
                this.scrollAmount[0] = 0;
                this.gameStats1[0] = this.zoomLevel / 100;
                this.gameStats1[1] = this.zoomLevel / 100;
                float f = this.gameStats1[0] / 100.0f;
                this.zoomLevel += this.zoom.getZoomFactor() * 20;
                if (this.zoomLevel < this.battleData[28] * 100) {
                    this.zoomLevel = this.battleData[28] * 100;
                } else if (this.zoomLevel > 10000) {
                    this.zoomLevel = 10000;
                }
                this.gameStats1[0] = this.zoomLevel / 100;
                this.gameStats1[2] = this.zoomLevel / 100;
                float f2 = this.gameStats1[0] / 100.0f;
                this.gameStats1[0] = this.gameStats1[1] - this.gameStats1[2];
                float f3 = 0.0f;
                float f4 = 0.0f;
                do {
                    if (this.gameStats1[0] > 0) {
                        this.gameStats1[0] -= 1;
                        if (f3 != 0.0f) {
                            f4 -= 0.01f;
                        }
                        f3 -= 0.01f;
                    } else if (this.gameStats1[0] != 0) {
                        int[] iArr = this.gameStats1;
                        iArr[0] = iArr[0] + 1;
                        if (f3 != 0.0f) {
                            f4 += 0.01f;
                        }
                        f3 += 0.01f;
                    }
                    this.battleData[5] = ((int) (-((((f2 + f) * (f + f4)) / (f + f3)) - ((int) (((getWidth() / 2) / (f + f3)) - (-((this.battleData[5] + 5) / 10))))))) * 10;
                    if (this.battleData[5] < 0) {
                        this.battleData[5] = 0;
                    }
                } while (this.gameStats1[0] != 0);
                this.eE[3] = true;
            } else if (!isPointerDown() && !isPointerUp() && !isPointerDownNow()) {
                this.eE[3] = false;
            }
        }
        if (!isPointerDown()) {
            this.eE[2] = false;
            this.eE[4] = false;
            this.isScrolling = false;
        } else if (!this.eE[2] && !this.eE[3]) {
            this.ei[0] = getCurrentYTouch() - getTempYTouch();
            this.ej[0] = (int) aMath.atan2(getCurrentYTouch() - getTempYTouch(), getCurrentXTouch() - getTempXTouch());
            if (this.gO && !this.eE[4]) {
                if (this.ei[0] <= -25 && this.ej[0] >= 225 && this.ej[0] <= 315) {
                    this.scrollAmount[0] = 0;
                    if (!this.eE[0]) {
                        this.el[0] = 1;
                        this.eD[6] = 0;
                    } else if (this.el[0] == 1) {
                        if (this.eD[6] == 1) {
                            this.el[0] = -1;
                        }
                    } else if (this.el[0] == -1 && this.eD[6] == 0) {
                        this.el[0] = 1;
                    }
                    this.eE[0] = true;
                    this.eE[2] = true;
                } else if (this.ei[0] >= 25 && this.ej[0] >= 45 && this.ej[0] <= 135) {
                    if (!this.eE[0]) {
                        this.el[0] = 1;
                        this.eD[6] = 1;
                    } else if (this.el[0] == 1) {
                        if (this.eD[6] == 0) {
                            this.el[0] = -1;
                        }
                    } else if (this.el[0] == -1 && this.eD[6] == 1) {
                        this.el[0] = 1;
                    }
                    this.scrollAmount[0] = 0;
                    this.eE[0] = true;
                    this.eE[2] = true;
                }
            }
            if (this.eE[4] || ((!this.eE[0] || this.fT) && ((this.ej[0] >= 135 && this.ej[0] <= 225) || this.ej[0] >= 315 || this.ej[0] <= 45))) {
                if (getCurrentXTouch() - getPreviousXTouch() <= -10 || getCurrentXTouch() - getPreviousXTouch() >= 10 || this.isScrolling) {
                    this.isScrolling = true;
                } else {
                    this.scrollAmount[0] = 0;
                }
                if (this.isScrolling) {
                    this.scrollAmount[0] = getCurrentXTouch() - getPreviousXTouch();
                    if (this.zoomLevel / 100 > this.battleData[28]) {
                        int[] iArr2 = this.battleData;
                        iArr2[5] = iArr2[5] - ((getCurrentXTouch() - getPreviousXTouch()) * 10);
                    }
                    if (this.scrollAmount[0] != 0) {
                        this.eE[4] = true;
                    }
                }
            }
        }
        if (this.zoomLevel / 100 <= this.battleData[28] || this.eE[4]) {
            return;
        }
        int[] iArr3 = this.battleData;
        iArr3[5] = iArr3[5] - (this.scrollAmount[0] * 5);
    }

    /* JADX WARN: Removed duplicated region for block: B:292:0x0c99  */
    /* JADX WARN: Removed duplicated region for block: B:355:0x0f7b  */
    /* JADX WARN: Removed duplicated region for block: B:429:0x13bf  */
    /* JADX WARN: Removed duplicated region for block: B:462:0x1508  */
    /* JADX WARN: Removed duplicated region for block: B:494:0x16f8  */
    /* JADX WARN: Removed duplicated region for block: B:500:0x1703  */
    /* JADX WARN: Removed duplicated region for block: B:506:0x1743  */
    /* JADX WARN: Removed duplicated region for block: B:510:0x1784  */
    /* JADX WARN: Removed duplicated region for block: B:529:0x1905  */
    /* JADX WARN: Removed duplicated region for block: B:532:0x190e  */
    /* JADX WARN: Removed duplicated region for block: B:542:0x1950  */
    /* JADX WARN: Removed duplicated region for block: B:545:0x1974  */
    /* JADX WARN: Removed duplicated region for block: B:573:0x1a01  */
    /* JADX WARN: Removed duplicated region for block: B:874:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:881:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    void l(aTextureRenderer atexturerenderer) {
        int i = 0;
        int i2 = 0;
        int i3 = 0;
        int i4;
        int i5 = 0;
        int i6;
        int i7;
        if (!this.gu) {
            return;
        }
        if (this.gw == 0) {
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.setAlpha(178);
            atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
            atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gv[0]] * 690) / 100) / 2), 320 - (((eO[this.gv[0]] * 179) / 100) / 2), (eO[this.gv[0]] * 690) / 100, (eO[this.gv[0]] * 179) / 100, 0);
        } else if (this.gw == 1 || this.gw == 99) {
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.setAlpha(178);
            atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
            atexturerenderer.drawScaledImage(this.popupTexture, (this.excessWidth / 2) + (480 - (((eO[this.gv[0]] * 690) / 100) / 2)), 364 - (((eO[this.gv[0]] * 229) / 100) / 2), (eO[this.gv[0]] * 690) / 100, (eO[this.gv[0]] * 229) / 100, 0);
            if (this.gw == 1) {
                switch (getScene2Type()) {
                    case MAIN:
                        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (688 - (dv[this.fx[14]] / 2)) + this.gameStats1[2], 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
                        if (this.bf >= 1) {
                            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (733 - (dv[this.fx[14]] / 2)) + this.gameStats1[2], 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
                        }
                        atexturerenderer.drawScaledImagef(this.uiTextures[0], this.excessWidth + 610, 607, 24);
                        int i8 = this.catfood;
                        int i9 = 0;
                        do {
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i9 * 29)) + this.gameStats1[2] + this.excessWidth, 592, i8 % 10);
                            i8 /= 10;
                            i9++;
                        } while (i8 > 0);
                    case BATTLE:
                        atexturerenderer.drawScaledImage(this.uiTextures[21], this.excessWidth + (688 - (dv[this.fx[14]] / 2)), 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
                        atexturerenderer.drawScaledImage(this.uiTextures[21], this.excessWidth + (733 - (dv[this.fx[14]] / 2)), 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
                        int i10 = this.catfood;
                        int i11 = 0;
                        do {
                            atexturerenderer.drawScaledImagef(this.uiTextures[4], (924 - (i11 * 29)) + this.excessWidth, 592, i10 % 10);
                            i10 /= 10;
                            i11++;
                        } while (i10 > 0);
                        atexturerenderer.drawScaledImage(this.uiTextures[21], this.excessWidth + 610, 607, 76, 25, 24);
                        break;
                }
            } else if (this.gw == 99) {
                switch (getScene2Type()) {
                    case MAIN:
                        atexturerenderer.drawScaledImagef(this.uiTextures[5], 570, 17, 10);
                        int i12 = this.aY;
                        int i13 = 0;
                        do {
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i13 * 29)) + this.excessWidth, 6, i12 % 10);
                            i12 /= 10;
                            i13++;
                        } while (i12 > 0);
                        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (633 - (dv[this.fx[15]] / 2)), 8 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 62, dv[this.fx[15]] + 36, 23);
                        if (this.be >= 1) {
                            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (681 - (dv[this.fx[15]] / 2)), 23 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 27, dv[this.fx[15]] + 26, 18);
                            break;
                        }
                        break;
                }
            }
        } else if (this.gw == 2) {
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.setAlpha(178);
            atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
            atexturerenderer.drawScaledImage(this.popupTexture, (this.excessWidth / 2) + (480 - (((eO[this.gv[0]] * 690) / 100) / 2)), 364 - (((eO[this.gv[0]] * 229) / 100) / 2), (eO[this.gv[0]] * 690) / 100, (eO[this.gv[0]] * 229) / 100, 0);
            switch (getScene2Type()) {
                case MAIN:
                    atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (688 - (dv[this.fx[14]] / 2)) + this.gameStats1[2], 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
                    if (this.bf >= 1) {
                        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (733 - (dv[this.fx[14]] / 2)) + this.gameStats1[2], 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
                    }
                    atexturerenderer.drawScaledImagef(this.uiTextures[0], this.excessWidth + 610, 607, 24);
                    int i14 = this.catfood;
                    int i15 = 0;
                    do {
                        atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i15 * 29)) + this.gameStats1[2] + this.excessWidth, 592, i14 % 10);
                        i14 /= 10;
                        i15++;
                    } while (i14 > 0);
            }
        } else if (this.gw == 3 || this.gw == 4) {
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.setAlpha(178);
            atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
            atexturerenderer.drawScaledImage(this.popupTexture, (this.excessWidth / 2) + (480 - (((eO[this.gv[0]] * 690) / 100) / 2)), 364 - (((eO[this.gv[0]] * 229) / 100) / 2), (eO[this.gv[0]] * 690) / 100, (eO[this.gv[0]] * 229) / 100, 0);
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (688 - (dv[this.fx[14]] / 2)) + this.gameStats1[2], 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
            if (this.bf >= 1) {
                atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (733 - (dv[this.fx[14]] / 2)) + this.gameStats1[2], 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
            }
            atexturerenderer.drawScaledImagef(this.uiTextures[0], this.excessWidth + 610, 607, 24);
            int i16 = this.catfood;
            int i17 = 0;
            do {
                atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i17 * 29)) + this.gameStats1[2] + this.excessWidth, 592, i16 % 10);
                i16 /= 10;
                i17++;
            } while (i16 > 0);
        } else if (this.gw == 5 || this.gw == 6 || this.gw == 8 || this.gw == 9 || this.gw == 10) {
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.setAlpha(178);
            atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
            atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gv[0]] * 690) / 100) / 2), 320 - (((eO[this.gv[0]] * 179) / 100) / 2), (eO[this.gv[0]] * 690) / 100, (eO[this.gv[0]] * 179) / 100, 0);
        } else if (this.gw == 7) {
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.setAlpha(178);
            atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
            atexturerenderer.drawScaledImage(this.popupTexture, (this.excessWidth / 2) + (480 - (((eO[this.gv[0]] * 690) / 100) / 2)), 364 - (((eO[this.gv[0]] * 229) / 100) / 2), (eO[this.gv[0]] * 690) / 100, (eO[this.gv[0]] * 229) / 100, 0);
        } else if (this.gw == 9999) {
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.setAlpha(178);
            atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
            atexturerenderer.drawScaledImage(this.popupTexture, (this.excessWidth / 2) + (480 - (((eO[this.gv[0]] * 690) / 100) / 2)), 363 - (((eO[this.gv[0]] * 179) / 100) / 2), (eO[this.gv[0]] * 690) / 100, (eO[this.gv[0]] * 179) / 100, 0);
        } else if (this.gw == 10000) {
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.setAlpha(178);
            atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
            atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gv[0]] * 690) / 100) / 2), 320 - (((eO[this.gv[0]] * 179) / 100) / 2), (eO[this.gv[0]] * 690) / 100, (eO[this.gv[0]] * 179) / 100, 0);
        }
        if (this.gv[0] < getLength(eO) - 1) {
            return;
        }
        if (this.gw == 0) {
            switch (getScene2Type()) {
                case OPENING:
                default:
                    return;
                case ENDING:
                    if (this.gx == 999) {
                        int i18 = 0;
                        for (int i19 = 0; i19 < 4; i19++) {
                            if (i19 != 0) {
                                atexturerenderer.setColor(255, 255, 255);
                            } else if (this.gv[2] % 4 == 0 || this.gv[2] % 4 == 1) {
                                atexturerenderer.setColor(255, 255, 0);
                            } else {
                                atexturerenderer.setColor(255, 0, 255);
                            }
                            if (this.textTextures2[i19].isLoaded()) {
                                atexturerenderer.drawScaledImage(this.textTextures2[i19], getWidth() / 2, (i18 * 18) + 284, 1);
                            }
                            i18 += 2;
                        }
                        return;
                    } else if (this.gx == 1000) {
                        int i20 = -1;
                        for (int i21 = 0; i21 < 3; i21++) {
                            if (i21 != 0) {
                                atexturerenderer.setColor(255, 255, 255);
                            } else if (this.gv[2] % 4 == 0 || this.gv[2] % 4 == 1) {
                                atexturerenderer.setColor(255, 255, 0);
                            } else {
                                atexturerenderer.setColor(255, 0, 255);
                            }
                            if (this.textTextures2[i21].isLoaded()) {
                                atexturerenderer.drawScaledImage(this.textTextures2[i21], getWidth() / 2, (i20 * 18) + 284, 1);
                            }
                            i20 += 2;
                        }
                        return;
                    } else {
                        int i22 = 0;
                        for (int i23 = 0; i23 < getLength(this.textTextures2); i23++) {
                            if (this.textTextures2[i23].isLoaded()) {
                                i22 = -(i23 - 1);
                            }
                        }
                        int i24 = i22 - 1;
                        if (this.dE == 5) {
                            for (int i25 = 0; i25 < getLength(this.textTextures2); i25++) {
                                if (this.textTextures2[i25].isLoaded()) {
                                    if (i25 != 0) {
                                        atexturerenderer.setColor(255, 255, 255);
                                    } else if (this.gv[2] % 4 == 0 || this.gv[2] % 4 == 1) {
                                        atexturerenderer.setColor(255, 255, 0);
                                    } else {
                                        atexturerenderer.setColor(255, 0, 255);
                                    }
                                    atexturerenderer.drawScaledImage(this.textTextures2[i25], getWidth() / 2, (i24 * 18) + 305, 1);
                                    i24 += 2;
                                }
                            }
                            return;
                        } else if (this.dE == 6) {
                            for (int i26 = 0; i26 < getLength(this.textTextures2); i26++) {
                                if (this.textTextures2[i26].isLoaded()) {
                                    if (i26 != 0) {
                                        atexturerenderer.setColor(255, 255, 255);
                                    } else if (this.gv[2] % 4 == 0 || this.gv[2] % 4 == 1) {
                                        atexturerenderer.setColor(255, 255, 0);
                                    } else {
                                        atexturerenderer.setColor(255, 0, 255);
                                    }
                                    atexturerenderer.drawScaledImage(this.textTextures2[i26], getWidth() / 2, (i24 * 18) + 305, 1);
                                    i24 += 2;
                                }
                            }
                            return;
                        } else if (this.dE == 7 && this.bc[2] == 0) {
                            for (int i27 = 0; i27 < getLength(this.textTextures2); i27++) {
                                if (this.textTextures2[i27].isLoaded()) {
                                    if (i27 != 0) {
                                        atexturerenderer.setColor(255, 255, 255);
                                    } else if (this.gv[2] % 4 == 0 || this.gv[2] % 4 == 1) {
                                        atexturerenderer.setColor(255, 255, 0);
                                    } else {
                                        atexturerenderer.setColor(255, 0, 255);
                                    }
                                    atexturerenderer.drawScaledImage(this.textTextures2[i27], getWidth() / 2, (i24 * 18) + 305, 1);
                                    i24 += 2;
                                }
                            }
                            return;
                        } else {
                            return;
                        }
                    }
                case MAIN:
                    int i28 = 0;
                    if (this.getScreenType() == ScreenType.TITLE) {
                        atexturerenderer.setColor(255, 255, 255);
                        if (this.textTextures2[0].isLoaded()) {
                            atexturerenderer.drawScaledImage(this.textTextures2[0], getWidth() / 2, 305, 1);
                        }
                    }
                    if (this.getScreenType() == ScreenType.POWER_UP) {
                        for (int i29 = 0; i29 < getLength(this.textTextures2); i29++) {
                            if (this.textTextures2[i29].isLoaded()) {
                                i28 = -(i29 - 1);
                            }
                        }
                        for (int i30 = 0; i30 < getLength(this.textTextures2); i30++) {
                            atexturerenderer.setColor(255, 255, 255);
                            if (this.textTextures2[i30].isLoaded()) {
                                atexturerenderer.drawScaledImage(this.textTextures2[i30], getWidth() / 2, (i28 * 18) + 284, 1);
                            }
                            i28 += 2;
                        }
                    }
                    if (this.getScreenType() == ScreenType.EQUIP) {
                        for (int i31 = 0; i31 < getLength(this.textTextures2); i31++) {
                            if (this.textTextures2[i31].isLoaded()) {
                                i28 = -(i31 - 1);
                            }
                        }
                        for (int i32 = 0; i32 < getLength(this.textTextures2); i32++) {
                            atexturerenderer.setColor(255, 255, 0);
                            if (this.textTextures2[i32].isLoaded()) {
                                atexturerenderer.drawScaledImage(this.textTextures2[i32], getWidth() / 2, 305, 1);
                            }
                            i28 += 2;
                        }
                        return;
                    }
                    return;
                case BATTLE:
                    if (this.gx == 999) {
                        int i33 = -1;
                        for (int i34 = 0; i34 < 2; i34++) {
                            if (i34 != 0) {
                                atexturerenderer.setColor(255, 255, 255);
                            } else if (this.gv[2] % 4 == 0 || this.gv[2] % 4 == 1) {
                                atexturerenderer.setColor(255, 255, 0);
                            } else {
                                atexturerenderer.setColor(255, 0, 255);
                            }
                            if (this.textTextures2[i34].isLoaded()) {
                                atexturerenderer.drawScaledImage(this.textTextures2[i34], getWidth() / 2, (i33 * 18) + 305, 1);
                            }
                            i33 += 2;
                        }
                        return;
                    }
                    int i35 = 0;
                    for (int i36 = 0; i36 < getLength(this.textTextures2); i36++) {
                        if (this.textTextures2[i36].isLoaded()) {
                            i35 = -(i36 - 1);
                        }
                    }
                    for (int i37 = 0; i37 < getLength(this.textTextures2); i37++) {
                        if (i37 != 0) {
                            atexturerenderer.setColor(255, 255, 255);
                        } else if (this.gv[2] % 4 == 0 || this.gv[2] % 4 == 1) {
                            atexturerenderer.setColor(255, 255, 0);
                        } else {
                            atexturerenderer.setColor(255, 0, 255);
                        }
                        if (this.textTextures2[i37].isLoaded()) {
                            atexturerenderer.drawScaledImage(this.textTextures2[i37], getWidth() / 2, (i35 * 18) + 284, 1);
                        }
                        i35 += 2;
                    }
                    return;
            }
        } else if (this.gw == 1 || this.gw == 99) {
            char c = 0;
            atexturerenderer.setColor(255, 255, 255);
            if (this.gw == 1) {
                c = 0;
            } else if (this.gw == 99) {
                c = '\r';
            }
            int i38 = 0;
            for (int i39 = 0; i39 < 4 && !aString.isEqual(this.warning2Text[c][i39], "＠"); i39++) {
                i38 = -i39;
            }
            int i40 = 0;
            while (i40 < 4 && !aString.isEqual(this.warning2Text[c][i40], "＠")) {
                atexturerenderer.drawScaledImage(this.textTextures2[i40], getWidth() / 2, (i38 * 18) + 306, 1);
                i38 += 2;
                i40++;
            }
            switch (getScene2Type()) {
                case OPENING:
                case ENDING:
                default:
                    return;
                case MAIN:
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (251 - (dv[this.fz[0]] / 2)), 382 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 168, dv[this.fz[0]] + 72, 0);
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (541 - (dv[this.fz[1]] / 2)), 382 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 168, dv[this.fz[1]] + 72, 0);
                    atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (260 - (dv[this.fz[0]] / 2)), 390 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 150, dv[this.fz[0]] + 55, 4);
                    atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (550 - (dv[this.fz[1]] / 2)), 390 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 150, dv[this.fz[1]] + 55, 5);
                    if (!this.gU && isPointerDown() && isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3]) && !this.eb) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 251, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
                    } else if (!this.gU && isPointerDown() && isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3]) && !this.eb) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 541, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
                    }
                    if (this.getScreenType() != ScreenType.TITLE && this.getScreenType() != ScreenType.CAT_BASE) {
                        if (this.getScreenType() == ScreenType.MAP) {
                            i = 30;
                        } else if (this.getScreenType() == ScreenType.POWER_UP) {
                            if (this.gw == 1) {
                                i = this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1];
                            } else if (this.gw == 99 && this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1]) {
                                if (this.currentBox[2] < this.gB[1]) {
                                    if (this.bd == 0) {
                                        i = hn;
                                    }
                                } else if (this.currentBox[2] < this.gB[0]) {
                                    i = this.bq[this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][15]] < this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][0] ? 0 : this.bu[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0 ? this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1] : this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) % 10) + 2] * (((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) / 10) + 1);
                                } else if ((this.currentBox[2] - this.gB[1]) - this.gB[0] == 0) {
                                    i = ac[0][(this.bx[0] + 1) % 10] * (((this.bx[0] + 1) / 10) + 1);
                                } else if ((this.currentBox[2] - this.gB[1]) - this.gB[0] >= 1) {
                                    i = ac[(this.currentBox[2] - this.gB[1]) - this.gB[0]][(this.bx[((this.currentBox[2] - this.gB[1]) - this.gB[0]) + 1] + 1) % 10] * (((this.bx[((this.currentBox[2] - this.gB[1]) - this.gB[0]) + 1] + 1) / 10) + 1);
                                }
                            }
                        } else if (this.getScreenType() == ScreenType.ITEM_SHOP) {
                            i = Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]]) <= 0 ? 500 : Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]]);
                        }
                        if (this.gw != 1) {
                            int i41 = i;
                            int i42 = 0;
                            do {
                                atexturerenderer.drawScaledImagef(this.uiTextures[5], ((825 - (i42 * 29)) - 30) + (this.excessWidth / 2), 208, i41 % 10);
                                i41 /= 10;
                                i42++;
                            } while (i41 > 0);
                            atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (642 - ((i42 >= 5 ? i42 - 4 : 0) * 29)), 208, 55, 42, 21);
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], (593 - (i42 * 29)) + (this.excessWidth / 2), 222.0f, 47.0f, 28.0f, 15);
                            return;
                        } else if (this.gw == 99) {
                            int i43 = i;
                            int i44 = 0;
                            do {
                                atexturerenderer.drawScaledImagef(this.uiTextures[5], ((825 - (i44 * 29)) - 30) + (this.excessWidth / 2), 208, i43 % 10);
                                i43 /= 10;
                                i44++;
                            } while (i43 > 0);
                            atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (635 - ((i44 >= 5 ? i44 - 4 : 0) * 29)), 214, 62, 36, 23);
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], (593 - (i44 * 29)) + (this.excessWidth / 2), 222.0f, 47.0f, 28.0f, 15);
                            return;
                        } else {
                            return;
                        }
                    }
                    i = i40;
                    if (this.gw != 1) {
                    }
                    break;
                case BATTLE:
                    atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (251 - (dv[this.fz[0]] / 2)), 382 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 168, dv[this.fz[0]] + 72, 2);
                    atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (541 - (dv[this.fz[1]] / 2)), 382 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 168, dv[this.fz[1]] + 72, 2);
                    atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (260 - (dv[this.fz[0]] / 2)), 390 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 150, dv[this.fz[0]] + 55, 4);
                    atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (550 - (dv[this.fz[1]] / 2)), 390 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 150, dv[this.fz[1]] + 55, 5);
                    if (!this.gU && isPointerDown() && isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3]) && !this.eb) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 251, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
                    } else if (!this.gU && isPointerDown() && isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3]) && !this.eb) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 541, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
                    }
                    int i45 = this.ha[0] ? ab[this.hl] : 30;
                    int i46 = 0;
                    do {
                        atexturerenderer.drawScaledImagef(this.uiTextures[4], ((825 - (i46 * 29)) - 30) + (this.excessWidth / 2), 208, i45 % 10);
                        i45 /= 10;
                        i46++;
                    } while (i45 > 0);
                    atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (642 - ((i46 >= 5 ? i46 - 4 : 0) * 29)), 208, 55, 42, 21);
                    atexturerenderer.drawScaledImagef(this.uiTextures[15], (593 - (i46 * 29)) + (this.excessWidth / 2), 222.0f, 47.0f, 28.0f, 43);
                    return;
            }
        } else if (this.gw == 2) {
            atexturerenderer.setColor(255, 255, 255);
            int i47 = 0;
            for (int i48 = 0; i48 < 4 && !aString.isEqual(this.warning2Text[3][i48], "＠"); i48++) {
                i47 = -i48;
            }
            int i49 = 0;
            while (i49 < 4 && !aString.isEqual(this.warning2Text[3][i49], "＠")) {
                atexturerenderer.drawScaledImage(this.textTextures2[i49], getWidth() / 2, (i47 * 18) + 306, 1);
                i47 += 2;
                i49++;
            }
            switch (getScene2Type()) {
                case OPENING:
                case ENDING:
                default:
                    return;
                case MAIN:
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (251 - (dv[this.fz[0]] / 2)), 382 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 168, dv[this.fz[0]] + 72, 0);
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (541 - (dv[this.fz[1]] / 2)), 382 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 168, dv[this.fz[1]] + 72, 0);
                    atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (260 - (dv[this.fz[0]] / 2)), 390 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 150, dv[this.fz[0]] + 55, 4);
                    atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (550 - (dv[this.fz[1]] / 2)), 390 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 150, dv[this.fz[1]] + 55, 5);
                    if (!this.gU && isPointerDown() && isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3]) && !this.eb) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 251, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
                    } else if (!this.gU && isPointerDown() && isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3]) && !this.eb) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 541, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
                    }
                    if (this.getScreenType() != ScreenType.TITLE && this.getScreenType() != ScreenType.CAT_BASE && this.getScreenType() != ScreenType.MAP) {
                        if (this.getScreenType() == ScreenType.POWER_UP) {
                            i5 = this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1];
                        } else if (
                                this.getScreenType() != ScreenType.EQUIP
                                        && this.getScreenType() != ScreenType.TREASURE
                                        && this.getScreenType() != ScreenType.ENEMY_GUIDE
                                        && this.getScreenType() != ScreenType.MAP2
                                        && this.getScreenType() == ScreenType.ITEM_SHOP
                        ) {
                            if (Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]]) <= 0) {
                                i5 = 500;
                            } else if (this.catfood >= Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]])) {
                                i5 = Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]]);
                            }
                        }
                        i6 = i5;
                        i7 = 0;
                        do {
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], ((825 - (i7 * 29)) - 30) + (this.excessWidth / 2), 208, i6 % 10);
                            i6 /= 10;
                            i7++;
                        } while (i6 > 0);
                        atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (642 - ((i7 < 5 ? i7 - 4 : 0) * 29)), 208, 55, 42, 21);
                        atexturerenderer.drawScaledImagef(this.uiTextures[5], (593 - (i7 * 29)) + (this.excessWidth / 2), 222.0f, 47.0f, 28.0f, 15);
                        return;
                    }
                    i5 = i49;
                    i6 = i5;
                    i7 = 0;
                    do {
                        atexturerenderer.drawScaledImagef(this.uiTextures[5], ((825 - (i7 * 29)) - 30) + (this.excessWidth / 2), 208, i6 % 10);
                        i6 /= 10;
                        i7++;
                    } while (i6 > 0);
                    if (i7 < 5) {
                    }
                    atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (642 - ((i7 < 5 ? i7 - 4 : 0) * 29)), 208, 55, 42, 21);
                    atexturerenderer.drawScaledImagef(this.uiTextures[5], (593 - (i7 * 29)) + (this.excessWidth / 2), 222.0f, 47.0f, 28.0f, 15);
                    return;
                case BATTLE:
                    atexturerenderer.setColor(255, 255, 255);
                    for (int i50 = 0; i50 < 4; i50++) {
                        atexturerenderer.drawScaledImage(this.textTextures2[i50], getWidth() / 2, (i50 * 36) + 270, 1);
                    }
                    atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (251 - (dv[this.fz[0]] / 2)), 382 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 168, dv[this.fz[0]] + 72, 2);
                    atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (541 - (dv[this.fz[1]] / 2)), 382 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 168, dv[this.fz[1]] + 72, 2);
                    atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (260 - (dv[this.fz[0]] / 2)), 390 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 150, dv[this.fz[0]] + 55, 4);
                    atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (550 - (dv[this.fz[1]] / 2)), 390 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 150, dv[this.fz[1]] + 55, 5);
                    if (!this.gU && isPointerDown() && isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3]) && !this.eb) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 251, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
                        return;
                    } else if (this.gU || !isPointerDown() || !isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3]) || this.eb) {
                        return;
                    } else {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 541, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
                        return;
                    }
            }
        } else if (this.gw == 3 || this.gw == 4) {
            atexturerenderer.setColor(255, 255, 255);
            int i51 = 0;
            for (int i52 = 0; i52 < 4; i52++) {
                if (this.gw != 3) {
                    if (this.gw == 4 && aString.isEqual(this.warning2Text[5][i52], "＠")) {
                        if (this.gw == 3) {
                        }
                        //while (i2 < 4) {
                        //}
                        if (this.gw == 3) {
                        }
                        i3 = 30;
                        i4 = 0;
                        do {
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], ((825 - (i4 * 29)) - 30) + (this.excessWidth / 2), 208, i3 % 10);
                            i3 /= 10;
                            i4++;
                        } while (i3 > 0);
                        if (i4 >= 5) {
                        }
                        atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (642 - ((i4 >= 5 ? i4 - 4 : 0) * 29)), 208, 55, 42, 21);
                        atexturerenderer.drawScaledImagef(this.uiTextures[5], (593 - (i4 * 29)) + (this.excessWidth / 2), 222.0f, 47.0f, 28.0f, 15);
                        switch (getScene2Type()) {
                        }
                    }
                    i51 = -i52;
                } else if (aString.isEqual(this.warning2Text[4][i52], "＠")) {
                    if (this.gw == 3) {
                        i51--;
                    } else if (this.gw == 4) {
                        i51--;
                    }
                    for (i2 = 0; i2 < 4; i2++) {
                        if (this.gw != 3) {
                            if (this.gw == 4 && aString.isEqual(this.warning2Text[5][i2], "＠")) {
                                if (this.gw == 3) {
                                }
                                i3 = 30;
                                i4 = 0;
                                do {
                                    atexturerenderer.drawScaledImagef(this.uiTextures[5], ((825 - (i4 * 29)) - 30) + (this.excessWidth / 2), 208, i3 % 10);
                                    i3 /= 10;
                                    i4++;
                                } while (i3 > 0);
                                if (i4 >= 5) {
                                }
                                atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (642 - ((i4 >= 5 ? i4 - 4 : 0) * 29)), 208, 55, 42, 21);
                                atexturerenderer.drawScaledImagef(this.uiTextures[5], (593 - (i4 * 29)) + (this.excessWidth / 2), 222.0f, 47.0f, 28.0f, 15);
                                switch (getScene2Type()) {
                                }
                            }
                            atexturerenderer.drawScaledImage(this.textTextures2[i2], getWidth() / 2, (i51 * 18) + 306, 1);
                            i51 += 2;
                        } else if (aString.isEqual(this.warning2Text[4][i2], "＠")) {
                            if (this.gw == 3) {
                                atexturerenderer.drawScaledImage(this.textTextures2[getLength(this.warning2Text[4]) + 1], getWidth() / 2, (i51 * 18) + 306, 1);
                            } else if (this.gw == 4) {
                                atexturerenderer.drawScaledImage(this.textTextures2[getLength(this.warning2Text[5]) + 1], getWidth() / 2, (i51 * 18) + 306, 1);
                            }
                            i3 = 30;
                            i4 = 0;
                            do {
                                atexturerenderer.drawScaledImagef(this.uiTextures[5], ((825 - (i4 * 29)) - 30) + (this.excessWidth / 2), 208, i3 % 10);
                                i3 /= 10;
                                i4++;
                            } while (i3 > 0);
                            atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (642 - ((i4 >= 5 ? i4 - 4 : 0) * 29)), 208, 55, 42, 21);
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], (593 - (i4 * 29)) + (this.excessWidth / 2), 222.0f, 47.0f, 28.0f, 15);
                            switch (getScene2Type()) {
                                case OPENING:
                                case ENDING:
                                default:
                                    return;
                                case MAIN:
                                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (251 - (dv[this.fz[0]] / 2)), 382 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 168, dv[this.fz[0]] + 72, 0);
                                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (541 - (dv[this.fz[1]] / 2)), 382 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 168, dv[this.fz[1]] + 72, 0);
                                    atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (260 - (dv[this.fz[0]] / 2)), 390 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 150, dv[this.fz[0]] + 55, 4);
                                    atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (550 - (dv[this.fz[1]] / 2)), 390 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 150, dv[this.fz[1]] + 55, 5);
                                    if (!this.gU && isPointerDown() && isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3]) && !this.eb) {
                                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 251, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
                                        return;
                                    } else if (this.gU || !isPointerDown() || !isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3]) || this.eb) {
                                        return;
                                    } else {
                                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 541, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
                                        return;
                                    }
                            }
                        } else {
                            atexturerenderer.drawScaledImage(this.textTextures2[i2], getWidth() / 2, (i51 * 18) + 306, 1);
                            i51 += 2;
                        }
                    }
                    if (this.gw == 3) {
                    }
                    i3 = 30;
                    i4 = 0;
                    do {
                        atexturerenderer.drawScaledImagef(this.uiTextures[5], ((825 - (i4 * 29)) - 30) + (this.excessWidth / 2), 208, i3 % 10);
                        i3 /= 10;
                        i4++;
                    } while (i3 > 0);
                    if (i4 >= 5) {
                    }
                    atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (642 - ((i4 >= 5 ? i4 - 4 : 0) * 29)), 208, 55, 42, 21);
                    atexturerenderer.drawScaledImagef(this.uiTextures[5], (593 - (i4 * 29)) + (this.excessWidth / 2), 222.0f, 47.0f, 28.0f, 15);
                    switch (getScene2Type()) {
                    }
                } else {
                    i51 = -i52;
                }
            }
            if (this.gw == 3) {
            }
            //while (i2 < 4) {
            //}
            if (this.gw == 3) {
            }
            i3 = 30;
            i4 = 0;
            do {
                atexturerenderer.drawScaledImagef(this.uiTextures[5], ((825 - (i4 * 29)) - 30) + (this.excessWidth / 2), 208, i3 % 10);
                i3 /= 10;
                i4++;
            } while (i3 > 0);
            if (i4 >= 5) {
            }
            atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (642 - ((i4 >= 5 ? i4 - 4 : 0) * 29)), 208, 55, 42, 21);
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (593 - (i4 * 29)) + (this.excessWidth / 2), 222.0f, 47.0f, 28.0f, 15);
            switch (getScene2Type()) {
            }
        } else if (this.gw == 5 || this.gw == 6 || this.gw == 8 || this.gw == 9 || this.gw == 10) {
            atexturerenderer.setColor(255, 255, 255);
            int i53 = 0;
            int i54 = 0;
            while (true) {
                if (i54 < 4) {
                    if (this.gw == 5) {
                        if (!aString.isEqual(this.warning2Text[6][i54], "＠")) {
                            i53 = -(i54 - 1);
                            i54++;
                        }
                    } else if (this.gw == 6) {
                        if (aString.isEqual(this.warning2Text[7][i54], "＠")) {
                            i53 = -(i54 - 1);
                        } else {
                            i53 = -(i54 - 1);
                            i54++;
                        }
                    } else if (this.gw == 8) {
                        if (!aString.isEqual(this.warning2Text[9][i54], "＠")) {
                            i53 = -(i54 - 1);
                            i54++;
                        }
                    } else if (this.gw != 9) {
                        if (this.gw == 10 && aString.isEqual(this.warning2Text[11][i54], "＠")) {
                        }
                        i53 = -(i54 - 1);
                        i54++;
                    } else if (!aString.isEqual(this.warning2Text[10][i54], "＠")) {
                        i53 = -(i54 - 1);
                        i54++;
                    }
                }
                else {
                    break;
                }
            }
            for (int i55 = 0; i55 < 4; i55++) {
                if ((this.gw != 8 && this.gw != 9) || i55 != 0) {
                    atexturerenderer.setColor(255, 255, 255);
                } else if (this.gv[2] % 4 == 0 || this.gv[2] % 4 == 1) {
                    atexturerenderer.setColor(255, 255, 0);
                } else {
                    atexturerenderer.setColor(255, 0, 255);
                }
                if (this.gw == 5) {
                    if (aString.isEqual(this.warning2Text[6][i55], "＠")) {
                        if (this.gw != 6) {
                            atexturerenderer.drawScaledImage(this.textTextures2[getLength(this.warning2Text[7]) + 1], getWidth() / 2, (i53 * 18) + 284, 1);
                            return;
                        }
                        return;
                    }
                    atexturerenderer.drawScaledImage(this.textTextures2[i55], getWidth() / 2, (i53 * 18) + 284, 1);
                    i53 += 2;
                } else if (this.gw == 6) {
                    if (!aString.isEqual(this.warning2Text[7][i55], "＠")) {
                        atexturerenderer.drawScaledImage(this.textTextures2[i55], getWidth() / 2, (i53 * 18) + 284, 1);
                        i53 += 2;
                    } else if (this.gw != 6) {
                    }
                } else if (this.gw == 8) {
                    if (!aString.isEqual(this.warning2Text[9][i55], "＠")) {
                        atexturerenderer.drawScaledImage(this.textTextures2[i55], getWidth() / 2, (i53 * 18) + 284, 1);
                        i53 += 2;
                    } else if (this.gw != 6) {
                    }
                } else if (this.gw != 9) {
                    if (this.gw == 10 && aString.isEqual(this.warning2Text[11][i55], "＠")) {
                        if (this.gw != 6) {
                        }
                    }
                    atexturerenderer.drawScaledImage(this.textTextures2[i55], getWidth() / 2, (i53 * 18) + 284, 1);
                    i53 += 2;
                } else if (!aString.isEqual(this.warning2Text[10][i55], "＠")) {
                    atexturerenderer.drawScaledImage(this.textTextures2[i55], getWidth() / 2, (i53 * 18) + 284, 1);
                    i53 += 2;
                } else if (this.gw != 6) {
                }
            }
            if (this.gw != 6) {
            }
        } else if (this.gw == 7) {
            int i56 = 0;
            atexturerenderer.setColor(255, 255, 255);
            for (int i57 = 0; i57 < 4 && !aString.isEqual(this.warning2Text[8][i57], "＠"); i57++) {
                i56 = -i57;
            }
            for (int i58 = 0; i58 < 4 && !aString.isEqual(this.warning2Text[8][i58], "＠"); i58++) {
                atexturerenderer.drawScaledImage(this.textTextures2[i58], getWidth() / 2, (i56 * 18) + 306, 1);
                i56 += 2;
            }
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (251 - (dv[this.fz[0]] / 2)), 382 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 168, dv[this.fz[0]] + 72, 0);
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (541 - (dv[this.fz[1]] / 2)), 382 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 168, dv[this.fz[1]] + 72, 0);
            atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (260 - (dv[this.fz[0]] / 2)), 390 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 150, dv[this.fz[0]] + 55, 4);
            atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (550 - (dv[this.fz[1]] / 2)), 390 - (dv[this.fz[1]] / 2), dv[this.fz[1]] + 150, dv[this.fz[1]] + 55, 5);
            if (!this.gU && isPointerDown() && isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3]) && !this.eb) {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 251, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
            } else if (!this.gU && isPointerDown() && isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3]) && !this.eb) {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 541, 382, 168, 72, ((this.gv[2] % 4) / 2) + 1);
            }
        } else if (this.gw != 9999) {
            if (this.gw == 10000) {
                int i59 = 0;
                atexturerenderer.setColor(255, 255, 0);
                for (int i60 = 0; i60 < 4 && !aString.isEqual(this.warning2Text[14][i60], "＠"); i60++) {
                    i59--;
                }
                int i61 = i59 + 1;
                for (int i62 = 0; i62 < 4 && !aString.isEqual(this.warning2Text[14][i62], "＠"); i62++) {
                    atexturerenderer.drawScaledImage(this.textTextures2[i62], getWidth() / 2, (i61 * 18) + 305, 1);
                    i61 += 2;
                }
            }
        } else {
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.fz[0]] / 2)), 461 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 168, dv[this.fz[0]] + 72, 0);
            atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (651 - (dv[this.fz[0]] / 2)), 469 - (dv[this.fz[0]] / 2), dv[this.fz[0]] + 97, dv[this.fz[0]] + 55, 20);
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 460, 168, 72, ((this.gv[2] % 4) / 2) + 1);
            atexturerenderer.setColor(255, 255, 255);
            int i63 = (this.bl != 29 || this.bn == 0) ? 0 : 1;
            if ((this.stampStats[this.bl + i63][0] == 7) && (this.bn == 0)) {
                int i64 = -3;
                for (int i65 = 0; i65 < 3; i65++) {
                    atexturerenderer.drawScaledImage(this.textTextures2[i65], getWidth() / 2, (i64 * 18) + 363, 1);
                    i64 += 2;
                }
            } else {
                int i66 = -2;
                for (int i67 = 0; i67 < 2; i67++) {
                    atexturerenderer.drawScaledImage(this.textTextures2[i67], getWidth() / 2, (i66 * 18) + 363, 1);
                    i66 += 2;
                }
            }
            if (this.bl != 29 || this.bn != 0) {
            }
            atexturerenderer.drawScaledImagef(this.stampTextures[1], (this.excessWidth / 2) + 320, 126, this.stampStats[this.bl + i63][0]);
            if (this.stampStats[this.bl + i63][0] == 0 || this.stampStats[this.bl + i63][0] == 6) {
                int i68 = this.stampStats[this.bl + i63][1];
                int i69 = 0;
                while (true) {
                    i68 /= 10;
                    if (i68 <= 0) {
                        int i70 = i69 - 1;
                        int i71 = this.stampStats[i63 + this.bl][1];
                        int i72 = i70;
                        do {
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], (430 - (i72 * 29)) + (this.excessWidth / 2), 156, i71 % 10);
                            i71 /= 10;
                            i72++;
                        } while (i71 > 0);
                        atexturerenderer.drawScaledImagef(this.uiTextures[5], ((430 - (i72 * 29)) - 3) + (this.excessWidth / 2), 156, 16);
                        return;
                    }
                    i69--;
                }
            } else if (this.stampStats[this.bl + i63][0] == 1) {
                int i73 = this.stampStats[this.bl + i63][1];
                int i74 = 0;
                while (true) {
                    i73 /= 10;
                    if (i73 <= 0) {
                        int i75 = i74 - 1;
                        int i76 = this.stampStats[i63 + this.bl][1];
                        int i77 = i75;
                        do {
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], (550 - (i77 * 29)) + (this.excessWidth / 2), 211, i76 % 10);
                            i76 /= 10;
                            i77++;
                        } while (i76 > 0);
                        atexturerenderer.drawScaledImagef(this.uiTextures[5], ((550 - (i77 * 29)) - 3) + (this.excessWidth / 2), 211, 16);
                        return;
                    }
                    i74--;
                }
            }
        }
    }

    void enemyGuideLoad() {
        for (int i = 0; i < getLength(this.gp); i++) {
            this.gp[i] = false;
        }
        //aAd.b().f();
        loadTextures2();
        for (int i2 = 6; i2 < getLength(this.uiTextures) - 6; i2++) {
            if (this.uiTextures[i2].isLoaded()) {
                this.uiTextures[i2].reset();
            }
        }
        this.gp[3] = true;
        for (int i3 = 0; i3 < getLength(this.buttonCoordinates1); i3++) {
            for (int i4 = 0; i4 < getLength(this.buttonCoordinates1[i3]); i4++) {
                this.buttonCoordinates1[i3][i4] = 0;
            }
        }
        for (int i5 = 0; i5 < getLength(this.gG); i5++) {
            this.gG[i5] = 0;
        }
        for (int i6 = 0; i6 < getLength(this.fs); i6++) {
            this.fs[i6] = 0;
        }
        for (int i7 = 0; i7 < getLength(this.gameStats1); i7++) {
            this.gameStats1[i7] = 0;
        }
        for (int i8 = 0; i8 < getLength(this.ei); i8++) {
            this.ei[i8] = 0;
        }
        for (int i9 = 0; i9 < getLength(this.boxCounts); i9++) {
            this.boxCounts[i9] = 0;
        }
        for (int i10 = 0; i10 < getLength(this.scrollAmount); i10++) {
            this.scrollAmount[i10] = 0;
        }
        this.buttonCoordinates1[5][0] = 4;
        this.buttonCoordinates1[5][1] = 541;
        this.buttonCoordinates1[5][2] = 95;
        this.buttonCoordinates1[5][3] = 95;
        this.buttonCoordinates1[13][0] = this.excessWidth + 344;
        this.buttonCoordinates1[13][1] = 560;
        this.buttonCoordinates1[13][2] = 247;
        this.buttonCoordinates1[13][3] = 88;
        this.buttonCoordinates1[14][0] = this.excessWidth + 680;
        this.buttonCoordinates1[14][1] = 552;
        this.buttonCoordinates1[14][2] = 88;
        this.buttonCoordinates1[14][3] = 88;
        this.buttonCoordinates1[15][0] = this.excessWidth + 626;
        this.buttonCoordinates1[15][1] = 0;
        this.buttonCoordinates1[15][2] = 88;
        this.buttonCoordinates1[15][3] = 88;
        this.fR[0] = 0;
        for (int i11 = 0; i11 < getLength(this.blinkFrame); i11++) {
            this.blinkFrame[i11] = 0;
        }
        if (this.previousScreen == 0) {
            this.blinkFrame[0] = getLength(cu) - 1;
        }
        for (int i12 = 0; i12 < getLength(this.gm); i12++) {
            this.gm[i12] = 0;
        }
        this.gm[1] = 297;
        for (int i13 = 0; i13 < getLength(this.fx); i13++) {
            this.fx[i13] = 0;
        }
        for (int i14 = 0; i14 < getLength(this.eK); i14++) {
            this.eK[i14] = 0;
        }
        for (int i15 = 0; i15 < getLength(this.hk); i15++) {
            this.hk[i15] = 0;
        }
        for (int i16 = 0; i16 < getLength(this.fC); i16++) {
            this.fC[i16] = 0;
        }
        for (int i17 = 0; i17 < getLength(this.fy); i17++) {
            this.fy[i17] = 0;
        }
        for (int i18 = 0; i18 < getLength(this.fz); i18++) {
            this.fz[i18] = 0;
        }
        for (int i19 = 0; i19 < getLength(this.gZ); i19++) {
            this.gZ[i19] = 0;
        }
        this.boxScale = getWidth();
        this.boxCounts[0] = 0;
        this.boxCounts[2] = 0;
        this.gameStats1[0] = -(this.boxScale * this.boxCounts[0]);
        this.boxCounts[1] = getLength(dt);
        this.ft = -1;
        a(1, this.fs[2]);
        if (this.uiTextures[6].isLoaded()) {
            this.uiTextures[6].reset();
        }
        if (!this.uiTextures[6].isLoaded()) {
            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 15)), MyUtility.getString(String.format("img%03d.imgcut", 15)));
        }
        if (this.uiTextures[7].isLoaded()) {
            this.uiTextures[7].reset();
        }
        if (!this.uiTextures[7].isLoaded()) {
            this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 16)), MyUtility.getString(String.format("img%03d.imgcut", 16)));
        }
        if (this.uiTextures[8].isLoaded()) {
            this.uiTextures[8].reset();
        }
        if (!this.uiTextures[8].isLoaded()) {
            this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 0)), MyUtility.getString(String.format("img%03d.imgcut", 0)));
        }
        if (this.uiTextures[9].isLoaded()) {
            this.uiTextures[9].reset();
        }
        if (!this.uiTextures[9].isLoaded()) {
            this.uiTextures[9].load(MyUtility.getString(String.format("img%03d.png", 21)), MyUtility.getString(String.format("img%03d.imgcut", 21)));
        }
        this.blinkFrame[6] = 126;
        for (int i20 = 0; i20 < getLength(this.eE); i20++) {
            this.eE[i20] = false;
        }
        this.eE[0] = true;
        this.isScrolling = false;
    }

    /* JADX WARN: Removed duplicated region for block: B:302:0x18e9  */
    /* JADX WARN: Removed duplicated region for block: B:305:0x18fc  */
    /* JADX WARN: Removed duplicated region for block: B:315:0x1cdf  */
    /* JADX WARN: Removed duplicated region for block: B:321:0x1d0b  */
    /* JADX WARN: Removed duplicated region for block: B:324:0x1da6  */
    /* JADX WARN: Removed duplicated region for block: B:332:0x1dcd  */
    /* JADX WARN: Removed duplicated region for block: B:335:0x1de3  */
    /* JADX WARN: Removed duplicated region for block: B:342:0x1ef2  */
    /* JADX WARN: Removed duplicated region for block: B:445:0x3011  */
    /* JADX WARN: Removed duplicated region for block: B:475:0x36d8  */
    /* JADX WARN: Removed duplicated region for block: B:478:0x3783  */
    /* JADX WARN: Removed duplicated region for block: B:482:0x386d  */
    /* JADX WARN: Removed duplicated region for block: B:497:0x391a  */
    /* JADX WARN: Removed duplicated region for block: B:504:0x3a2f  */
    /* JADX WARN: Removed duplicated region for block: B:576:0x3f7b  */
    /* JADX WARN: Removed duplicated region for block: B:586:0x1dbe A[EDGE_INSN: B:586:0x1dbe->B:329:0x1dbe BREAK  A[LOOP:3: B:327:0x1db6->B:481:0x3868], SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    void powerUpDraw(aTextureRenderer atexturerenderer) {

        float f = 0;
        float xBoxOffset = 0;
        int upgradeCost;
        int i2 = 0;
        int i3;
        int i4;
        atexturerenderer.drawScaledImage(this.uiTextures[7], 0, 0, getWidth(), 407, 0);
        if (this.currentBox[3] != 0) {
            atexturerenderer.drawScaledImage(this.uiTextures[7], 0, 362, getWidth(), 238, 1);
            atexturerenderer.drawScaledImagef(this.uiTextures[8], 0, 78, 48);
        } else if (this.currentBox[2] < this.gB[1]) {
            atexturerenderer.drawScaledImage(this.uiTextures[7], 0, 362, getWidth(), 238, 1);
            atexturerenderer.drawScaledImagef(this.uiTextures[8], 0, 78, 48);
        } else if (this.currentBox[2] < this.gB[0]) {
            atexturerenderer.drawScaledImage(this.uiTextures[7], 0, 362, getWidth(), 238, 1);
            atexturerenderer.drawScaledImagef(this.uiTextures[8], 0, 78, 48);
        } else {
            atexturerenderer.drawScaledImage(this.uiTextures[7], 0, 362, getWidth(), 238, 7);
            atexturerenderer.drawScaledImagef(this.uiTextures[8], 0, 78, 55);
        }
        atexturerenderer.setColor(255, 255, 255);
        if (this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1]) {
            atexturerenderer.drawScaledImage(this.textTextures[this.gA[4]], 146, 82, 1);
        }
        if (this.gz >= 0 && this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1]) {
            if (this.currentBox[2] < this.gB[1]) {
                if (this.bd == 0) {
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                    atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 4);
                    if (this.aY < hn) {
                        atexturerenderer.setImageColor(0, 0, 0);
                        atexturerenderer.setImageAlpha(127);
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                        atexturerenderer.setImageColor(255, 255, 255);
                        atexturerenderer.setImageAlpha(255);
                    }
                    if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 4);
                    } else {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 5);
                    }
                }
            } else if (this.currentBox[2] < this.gB[0]) {
                if (this.bu[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0) {
                    if (this.currentBox[3] == 0) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                        atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 4);
                        if (this.aY < this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1]) {
                            atexturerenderer.setImageColor(0, 0, 0);
                            atexturerenderer.setImageAlpha(127);
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                            atexturerenderer.setImageColor(255, 255, 255);
                            atexturerenderer.setImageAlpha(255);
                        }
                    } else if (this.catfood >= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1]) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                        atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 4);
                    } else {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                        atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 4);
                        atexturerenderer.setImageColor(0, 0, 0);
                        atexturerenderer.setImageAlpha(127);
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                        atexturerenderer.setImageColor(255, 255, 255);
                        atexturerenderer.setImageAlpha(255);
                    }
                    if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 4);
                    } else {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 5);
                    }
                } else if (this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1 < this.bi) {
                    atexturerenderer.drawScaledImage(this.uiTextures[7], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + (383 - dv[this.fx[0]]), dv[this.fx[0]] + 85, 2);
                    atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 3);
                    if (this.aY < this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) % 10) + 2] * (((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) / 10) + 1)) {
                        atexturerenderer.setImageColor(0, 0, 0);
                        atexturerenderer.setImageAlpha(127);
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                        atexturerenderer.setImageColor(255, 255, 255);
                        atexturerenderer.setImageAlpha(255);
                    }
                    if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 4);
                    } else {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 5);
                    }
                }
            } else if (this.currentBox[2] - this.gB[0] == 0) {
                if (this.bx[0] + 1 < this.bi) {
                    atexturerenderer.drawScaledImage(this.uiTextures[7], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + (383 - dv[this.fx[0]]), dv[this.fx[0]] + 85, 2);
                    atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 3);
                    if (this.aY < ac[0][(this.bx[0] + 1) % 10] * (((this.bx[0] + 1) / 10) + 1)) {
                        atexturerenderer.setImageColor(0, 0, 0);
                        atexturerenderer.setImageAlpha(127);
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                        atexturerenderer.setImageColor(255, 255, 255);
                        atexturerenderer.setImageAlpha(255);
                    }
                    if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 4);
                    } else {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 5);
                    }
                }
            } else if (this.currentBox[2] - this.gB[0] >= 1) {
                if (this.currentBox[2] - this.gB[0] == 1) {
                    if (this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1 < 10) {
                        atexturerenderer.drawScaledImage(this.uiTextures[7], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + (383 - dv[this.fx[0]]), dv[this.fx[0]] + 85, 2);
                        atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 3);
                        if (this.aY < ac[this.currentBox[2] - this.gB[0]][(this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) % 10] * (((this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) / 10) + 1)) {
                            atexturerenderer.setImageColor(0, 0, 0);
                            atexturerenderer.setImageAlpha(127);
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                            atexturerenderer.setImageColor(255, 255, 255);
                            atexturerenderer.setImageAlpha(255);
                        }
                        if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 4);
                        } else {
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 5);
                        }
                    }
                } else if (this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1 < this.bi) {
                    atexturerenderer.drawScaledImage(this.uiTextures[7], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + (383 - dv[this.fx[0]]), dv[this.fx[0]] + 85, 2);
                    atexturerenderer.drawScaledImage(this.uiTextures[7], 43 - (dv[this.fx[0]] / 2), 378 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 292, dv[this.fx[0]] + 62, 3);
                    if (this.aY < ac[this.currentBox[2] - this.gB[0]][(this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) % 10] * (((this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) / 10) + 1)) {
                        atexturerenderer.setImageColor(0, 0, 0);
                        atexturerenderer.setImageAlpha(127);
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4 - (dv[this.fx[0]] / 2), 367 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 383, dv[this.fx[0]] + 85, 3);
                        atexturerenderer.setImageColor(255, 255, 255);
                        atexturerenderer.setImageAlpha(255);
                    }
                    if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 4);
                    } else {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], 4, 367, 383, 85, 5);
                    }
                }
            }
            //this.gameStats1[0] = 0;
            if (this.currentBox[2] < this.gB[1]) {
                if (this.bd == 0) {
                    //this.gameStats1[0] = 1;
                }
            } else if (this.currentBox[2] < this.gB[0]) {
                if (this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1 < this.bi) {
                    //this.gameStats1[0] = 1;
                }
            } else if (this.currentBox[2] - this.gB[0] == 0) {
                if (this.bx[0] + 1 < this.bi) {
                    //this.gameStats1[0] = 1;
                }
            } else if (this.currentBox[2] - this.gB[0] >= 1) {
                if (this.currentBox[2] - this.gB[0] == 1) {
                    if (this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1 < 10) {
                        //this.gameStats1[0] = 1;
                    }
                } else if (this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1 < this.bi) {
                    //this.gameStats1[0] = 1;
                }
            }
        }
        if (this.currentBox[2] <= -1 || this.currentBox[2] >= this.boxCounts[1] + 1) {
            for (int i5 = this.gA[3]; i5 < this.gA[3] + 3; i5++) {
                atexturerenderer.drawScaledImage(this.textTextures[i5], (getWidth() / 2) + 20, (((i5 - this.gA[3]) * 36) + 470) - 5, 1);
            }
        } else if (this.currentBox[2] < this.gB[1]) {
            if (this.ct <= 0) {
                atexturerenderer.setColor(255, 255, 255);
                for (int i6 = this.gA[3]; i6 < this.gA[3] + 3; i6++) {
                    atexturerenderer.drawScaledImage(this.textTextures[i6], (getWidth() / 2) + 20, (((i6 - this.gA[3]) * 36) + 470) - 5, 1);
                }
            } else {
                atexturerenderer.setColor(255, 255, 0);
                atexturerenderer.drawScaledImage(this.textTextures[this.gA[5]], (getWidth() / 2) + 20, 465, 1);
            }
        } else if (this.currentBox[2] < this.gB[0]) {
            if (this.ct <= 0) {
                atexturerenderer.setColor(255, 255, 255);
                for (int i7 = this.gA[3]; i7 < this.gA[3] + 3; i7++) {
                    atexturerenderer.drawScaledImage(this.textTextures[i7], (getWidth() / 2) + 20, (((i7 - this.gA[3]) * 36) + 470) - 5, 1);
                }
            } else {
                atexturerenderer.setColor(255, 255, 0);
                atexturerenderer.drawScaledImage(this.textTextures[this.gA[5]], (getWidth() / 2) + 20, 465, 1);
            }
        } else if (this.ct <= 0) {
            atexturerenderer.setColor(255, 255, 255);
            for (int i8 = this.gA[3]; i8 < this.gA[3] + 3; i8++) {
                atexturerenderer.drawScaledImage(this.textTextures[i8], (getWidth() / 2) + 20, (((i8 - this.gA[3]) * 36) + 470) - 5, 1);
            }
        } else {
            atexturerenderer.setColor(255, 255, 0);
            atexturerenderer.drawScaledImage(this.textTextures[this.gA[5]], (getWidth() / 2) + 20, 465, 1);
        }
        int i9 = 1;
        int tempValue = 0;
        while (true) {
            int boxIndex = i9;
            if (boxIndex >= this.boxCounts[0] + 1 + this.boxCounts[1] + this.boxCounts[2]) {
                break;
            }
            if (this.currentBox[0] == boxIndex) {
                //this.gameStats1[0] = this.gH;
                tempValue = this.gH;
                if (this.currentBox[5] == 0) {
                    this.gameStats1[2] = this.fx[2];
                } else {
                    this.gameStats1[2] = 0;
                }
                xBoxOffset = -(328 - this.boxSize[boxIndex][0]);
            } else if (this.currentBox[0] + 1 == boxIndex) {
                //this.gameStats1[0] = 0;
                tempValue = 0;
                if (this.currentBox[5] == 1) {
                    this.gameStats1[2] = this.fx[2];
                } else {
                    this.gameStats1[2] = 0;
                }
                xBoxOffset = 328 - this.boxSize[boxIndex][0];
            } else if (this.currentBox[0] + 2 == boxIndex) {
                //this.gameStats1[0] = 0;
                tempValue = 0;
                this.gameStats1[2] = 0;
                xBoxOffset = (328 - this.boxSize[boxIndex][0]) + ((328 - this.boxSize[boxIndex - 1][0]) / 2.0f);
            } else if (this.currentBox[0] + 3 == boxIndex) {
                //this.gameStats1[0] = 0;
                tempValue = 0;
                this.gameStats1[2] = 0;
                xBoxOffset = (328 - this.boxSize[boxIndex][0]) + ((328 - this.boxSize[boxIndex - 1][0]) / 2.0f) + ((328 - this.boxSize[boxIndex - 2][0]) / 2.0f);
            } else if (this.currentBox[0] - 1 == boxIndex) {
                //this.gameStats1[0] = 0;
                tempValue = 0;
                if (this.currentBox[5] == -1) {
                    this.gameStats1[2] = this.fx[2];
                } else {
                    this.gameStats1[2] = 0;
                }
                xBoxOffset = -((328 - this.boxSize[boxIndex][0]) + ((328 - this.boxSize[boxIndex + 1][0]) / 2.0f));
            } else if (this.currentBox[0] - 2 == boxIndex) {
                this.gameStats1[2] = 0;
                xBoxOffset = -((328 - this.boxSize[boxIndex][0]) + ((328 - this.boxSize[boxIndex + 1][0]) / 2.0f));
            } else {
                i9 = boxIndex + 1;
            }
            if (boxIndex - this.boxCounts[0] <= -1 || boxIndex - this.boxCounts[0] >= this.boxCounts[1] + 1) {
                atexturerenderer.drawScaledImagef(this.uiTextures[8], ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) + (((cC[tempValue] * 328) / 100.0f) / 2.0f)) - (dv[this.gameStats1[2]] / 2), (347 - this.boxSize[boxIndex][1]) - (dv[this.gameStats1[2]] / 2), dv[this.gameStats1[2]] + (this.boxSize[boxIndex][0] - ((cC[tempValue] * 328) / 100.0f)), this.boxSize[boxIndex][1] + dv[this.gameStats1[2]], 53);
                if (boxIndex - this.boxCounts[0] <= -2 || boxIndex - this.boxCounts[0] >= this.boxCounts[1] + 2) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) + (((cC[tempValue] * 328) / 100.0f) / 2.0f)) - (dv[this.gameStats1[2]] / 2), (347.0f - ((183.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[2]] / 2), dv[this.gameStats1[2]] + (this.boxSize[boxIndex][0] - ((cC[tempValue] * 328) / 100.0f)), dv[this.gameStats1[2]] + ((60.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), 49);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) + ((132.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f)) + ((((132.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f)) - (dv[this.gameStats1[2]] / 2), (347.0f - ((126.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[2]] / 2), (((60.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((60.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f)) + dv[this.gameStats1[2]], ((60.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f) + dv[this.gameStats1[2]], ((boxIndex - this.boxCounts[0] <= -1 ? this.gE[(-(boxIndex - this.boxCounts[0])) - 1] : boxIndex - this.boxCounts[0] >= this.boxCounts[1] + 1 ? this.gE[((boxIndex - this.boxCounts[0]) - this.boxCounts[1]) - 1] : 0) - 1) + 73);
                } else {
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) + (((cC[tempValue] * 328) / 100.0f) / 2.0f)) - (dv[this.gameStats1[2]] / 2), (347.0f - ((162.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[2]] / 2), dv[this.gameStats1[2]] + (this.boxSize[boxIndex][0] - ((cC[tempValue] * 328) / 100.0f)), dv[this.gameStats1[2]] + ((60.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), 49);
                }
            } else if (boxIndex - this.boxCounts[0] < this.gB[1]) {
                atexturerenderer.drawScaledImagef(this.uiTextures[8], (((cC[tempValue] * 328) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347 - this.boxSize[boxIndex][1], this.boxSize[boxIndex][0] - ((cC[tempValue] * 328) / 100.0f), this.boxSize[boxIndex][1], 47);
            } else if (boxIndex - this.boxCounts[0] < this.gB[0]) {
                int i11 = this.baseUpgrades[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] + 1;
                if (this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]] < 0 || this.boxCatIDs[boxIndex - this.boxCounts[0]] < 0) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((cC[tempValue] * 328) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347 - this.boxSize[boxIndex][1], this.boxSize[boxIndex][0] - ((cC[tempValue] * 328) / 100.0f), this.boxSize[boxIndex][1], 0);
                } else if (this.bq[this.unitBuyStats[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]][15]] < this.unitBuyStats[this.boxCatIDs[boxIndex - this.boxCounts[0]] - this.gB[1]][0]) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((cC[tempValue] * 328) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347 - this.boxSize[boxIndex][1], this.boxSize[boxIndex][0] - ((cC[tempValue] * 328) / 100.0f), this.boxSize[boxIndex][1], 0);
                } else if (this.bu[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] == 0) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((cC[tempValue] * 328) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347 - this.boxSize[boxIndex][1], this.boxSize[boxIndex][0] - ((cC[tempValue] * 328) / 100.0f), this.boxSize[boxIndex][1], 47);
                } else if (i11 < this.bi) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((cC[tempValue] * 328) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347 - this.boxSize[boxIndex][1], this.boxSize[boxIndex][0] - ((cC[tempValue] * 328) / 100.0f), this.boxSize[boxIndex][1], 0);
                } else {
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((cC[tempValue] * 328) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347 - this.boxSize[boxIndex][1], this.boxSize[boxIndex][0] - ((cC[tempValue] * 328) / 100.0f), this.boxSize[boxIndex][1], 47);
                }
            } else {
                atexturerenderer.drawScaledImagef(this.uiTextures[8], (((cC[tempValue] * 328) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347 - this.boxSize[boxIndex][1], this.boxSize[boxIndex][0] - ((cC[tempValue] * 328) / 100.0f), this.boxSize[boxIndex][1], 54);
            }
            if (boxIndex - this.boxCounts[0] >= 0 && boxIndex - this.boxCounts[0] <= this.boxCounts[1]) {
                if (boxIndex - this.boxCounts[0] < this.gB[1]) {
                    int a = this.textTextures[boxIndex - this.boxCounts[0]].getImgWidth();
                    atexturerenderer.drawScaledImagef(this.textTextures[boxIndex - this.boxCounts[0]], (((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) + (((328.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) - (((a * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) + (((((a * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[tempValue]) / 100.0f) / 2.0f), 347.0f - ((254.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), ((a * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((a * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[tempValue]) / 100.0f), (30.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((((309.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset + ((6.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) + ((((6.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), 347.0f - ((102.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), ((309.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((309.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (92.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f, 56);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], ((180.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347.0f - ((138.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), (138.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f, (34.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f, 57);
                } else if (boxIndex - this.boxCounts[0] >= this.gB[0]) {
                    atexturerenderer.setColor(255, 255, 255);
                    int a2 = this.textTextures[boxIndex - this.boxCounts[0]].getImgWidth();
                    atexturerenderer.drawScaledImagef(this.textTextures[boxIndex - this.boxCounts[0]], ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) + (((328.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) - (((a2 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f), 347.0f - ((254.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), (a2 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f, (30.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f);
                } else if (this.bq[this.unitBuyStats[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]][15]] < this.unitBuyStats[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]][0]) {
                    int a3 = this.textTextures[boxIndex - this.boxCounts[0]].getImgWidth();
                    atexturerenderer.drawScaledImagef(this.textTextures[boxIndex - this.boxCounts[0]], (((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) + (((328.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) - (((a3 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) + (((((a3 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[tempValue]) / 100.0f) / 2.0f), 347.0f - ((254.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), ((a3 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((a3 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[tempValue]) / 100.0f), (30.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f);
                    atexturerenderer.setImageColor(255, 255, 255);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((((309.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset + ((6.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) + ((((6.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), 347.0f - ((102.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), ((309.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((309.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (92.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f, 56);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], ((180.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347.0f - ((138.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), (138.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f, (34.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f, 57);
                    if (this.currentBox[3] == 0) {
                        atexturerenderer.setImageColor(0, 0, 0);
                    }
                } else if (this.bu[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] == 0) {
                    atexturerenderer.setColor(255, 255, 255);
                    int a4 = this.textTextures[boxIndex - this.boxCounts[0]].getImgWidth();
                    atexturerenderer.drawScaledImagef(this.textTextures[boxIndex - this.boxCounts[0]], (((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) + (((328.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) - (((a4 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) + (((((a4 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[tempValue]) / 100.0f) / 2.0f), 347.0f - ((254.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), ((a4 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((a4 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[tempValue]) / 100.0f), (30.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f);
                    atexturerenderer.setImageColor(255, 255, 255);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((((309.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset + ((6.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) + ((((6.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), 347.0f - ((102.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), ((309.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((309.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (92.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f, 56);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], ((180.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347.0f - ((138.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), (138.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f, (34.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f, 57);
                    if (this.currentBox[3] == 0) {
                        atexturerenderer.setImageColor(0, 0, 0);
                    }
                } else {
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((((309.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset + ((6.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) + ((((6.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), 347.0f - ((102.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), ((309.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((309.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (92.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f, 56);
                    atexturerenderer.setColor(255, 255, 255);
                    if (this.bw[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] == 0) {
                        aTexture.measureText(this.unitExplanationText[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]][0][0], 30);
                    } else {
                        aTexture.measureText(this.unitExplanationText[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]][1][0], 30);
                    }
                    int a5 = this.textTextures[boxIndex - this.boxCounts[0]].getImgWidth();
                    atexturerenderer.drawScaledImagef(this.textTextures[boxIndex - this.boxCounts[0]], (((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) + (((328.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) - (((a5 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) + (((((a5 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[tempValue]) / 100.0f) / 2.0f), 347.0f - ((254.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), ((a5 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((a5 * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[tempValue]) / 100.0f), (30.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f);
                    atexturerenderer.setImageColor(255, 255, 255);
                }
                atexturerenderer.drawScaledImagef(this.uiTextures[(boxIndex + 11) - this.boxCounts[0]], (((((328.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347.0f - ((219.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((328.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((328.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (114.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 0);
                atexturerenderer.setImageColor(255, 255, 255);
                int i12 = 0;
                this.gameStats1[1] = 0;
                if (boxIndex - this.boxCounts[0] < this.gB[1]) {
                    i12 = hn;
                    if (this.bd == 0) {
                        this.gameStats1[1] = 1;
                        upgradeCost = i12;
                        if (boxIndex - this.boxCounts[0] < this.gB[1]) {
                            this.gameStats1[3] = 0;
                        } else if (boxIndex - this.boxCounts[0] < this.gB[0]) {
                            if (this.baseUpgrades[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] + 1 >= this.bi) {
                                this.gameStats1[1] = 0;
                            }
                            if (this.unitBuyStats[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]][12] == 0) {
                                this.gameStats1[3] = 0;
                            } else if (this.bu[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] == 0) {
                                this.gameStats1[3] = 1;
                            } else {
                                this.gameStats1[3] = 0;
                            }
                        } else {
                            int i13 = (boxIndex - this.boxCounts[0]) - this.gB[0] == 0 ? this.bx[(boxIndex - this.boxCounts[0]) - this.gB[0]] + 1 : this.bx[((boxIndex + 1) - this.boxCounts[0]) - this.gB[0]] + 1;
                            if ((boxIndex - this.boxCounts[0]) - this.gB[0] == 1) {
                                if (i13 >= 10) {
                                    this.gameStats1[1] = 0;
                                }
                            } else if (i13 >= this.bi) {
                                this.gameStats1[1] = 0;
                            }
                            this.gameStats1[3] = 0;
                        }
                        int i14 = this.boxCounts[0];
                        if (this.gameStats1[1] == 1) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[8], (((57.0f * (((this.boxSize[boxIndex][0] * 100.0f) / 328.0f) / 100.0f)) * cC[tempValue]) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset + ((107.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((88.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), ((213.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((213.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (45.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f, 72);
                            i2 = upgradeCost;
                            int i15 = 0;
                            do {
                                atexturerenderer.drawScaledImagef(this.uiTextures[5], ((((((-117.0f) + (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((281.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((86.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((30.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((30.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (42.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, i2 % 10);
                                i2 /= 10;
                                i15++;
                            } while (i2 > 0);
                            if (i15 >= 5) {
                                if (this.gameStats1[3] == 0) {
                                    atexturerenderer.drawScaledImagef(this.uiTextures[0], ((((((-79.0f) + (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((241.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((83.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (36.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 23);
                                    atexturerenderer.drawScaledImagef(this.uiTextures[5], ((((((-30.0f) + (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((194.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((75.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (28.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 15);
                                } else {
                                    atexturerenderer.drawScaledImagef(this.uiTextures[0], ((((((-81.0f) + (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((243.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((86.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((55.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (42.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 21);
                                    atexturerenderer.drawScaledImagef(this.uiTextures[5], ((((((-30.0f) + (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((194.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((75.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (28.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 15);
                                }
                            } else if (this.gameStats1[3] == 0) {
                                atexturerenderer.drawScaledImagef(this.uiTextures[0], (((((39.0f + (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((125.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((83.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (36.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 23);
                                atexturerenderer.drawScaledImagef(this.uiTextures[5], (((((86.0f + (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((78.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((75.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (28.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 15);
                            } else {
                                atexturerenderer.drawScaledImagef(this.uiTextures[0], (((((37.0f + (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((127.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((86.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((55.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (42.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 21);
                                atexturerenderer.drawScaledImagef(this.uiTextures[5], (((((86.0f + (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((78.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((75.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (28.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 15);
                            }
                        } else {
                            i2 = upgradeCost;
                        }
                        if (boxIndex - this.boxCounts[0] >= this.gB[1] && boxIndex - this.boxCounts[0] < this.gB[0] && this.bu[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] == 0) {
                            if (this.currentBox[3] != 0) {
                                atexturerenderer.drawScaledImagef(this.uiTextures[8], ((125.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347.0f - ((146.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), (187.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f, (53.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f, 58);
                            } else if (this.catfood >= this.unitBuyStats[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]][1]) {
                                atexturerenderer.drawScaledImagef(this.uiTextures[8], ((125.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347.0f - ((146.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), (187.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f, (53.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f, 58);
                            }
                        }
                        if (boxIndex - this.boxCounts[0] >= this.gB[1] && boxIndex - this.boxCounts[0] < this.gB[0]) {
                            i3 = 0;
                            while (true) {
                                i4 = i3;
                                if (i4 < getLength(this.slotCatIDs)) {
                                    break;
                                }
                                if (this.slotCatIDs[i4] == this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]] + 2) {
                                    atexturerenderer.drawScaledImagef(this.uiTextures[9], ((((-59.0f) * (((this.boxSize[boxIndex][0] * 100.0f) / 328.0f) / 100.0f)) * cC[tempValue]) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset + ((223.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((223.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((80.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((80.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (80.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 0);
                                }
                                i3 = i4 + 1;
                            }
                            i2 = i4;
                        }
                        if (boxIndex - this.boxCounts[0] < this.gB[1]) {
                            this.gameStats1[1] = 0;
                        } else if (boxIndex - this.boxCounts[0] < this.gB[0]) {
                            i2 = this.baseUpgrades[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] + 1;
                            if (this.bu[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] == 0) {
                                this.gameStats1[1] = 0;
                            } else {
                                this.gameStats1[1] = 2;
                            }
                        } else if ((boxIndex - this.boxCounts[0]) - this.gB[0] < 0) {
                            this.gameStats1[1] = 0;
                        } else if ((boxIndex - this.boxCounts[0]) - this.gB[0] == 0) {
                            i2 = this.bx[(boxIndex - this.boxCounts[0]) - this.gB[0]] + 1;
                            this.gameStats1[1] = 1;
                        } else {
                            i2 = this.bx[((boxIndex + 1) - this.boxCounts[0]) - this.gB[0]] + 1;
                            this.gameStats1[1] = 1;
                        }
                        if (boxIndex - this.boxCounts[0] != this.gB[0] + 1 && i2 >= 10 && this.currentBox[3] == 0) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[8], ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (1 * ((43.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((290.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) + ((((((1 * ((43.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f)) - 126.0f) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), 347.0f - ((144.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((58.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((58.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (35.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 52);
                        } else if (i2 < this.bi) {
                            int i16 = 0;
                            if (this.gameStats1[1] == 1 || this.gameStats1[1] == 2) {
                                do {
                                    int i17 = i16;
                                    atexturerenderer.drawScaledImagef(this.uiTextures[5], ((((((-117.0f) + (i17 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (i17 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((281.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((152.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((30.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((30.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (42.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, i2 % 10);
                                    i2 /= 10;
                                    i16 = i17 + 1;
                                } while (i2 > 0);
                            }
                        } else if (this.gameStats1[1] == 1 || this.gameStats1[1] == 2) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[8], ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (1 * ((43.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((290.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) + ((((((1 * ((43.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f)) - 126.0f) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), 347.0f - ((144.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((58.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((58.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (35.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 52);
                        }
                        if (this.gameStats1[1] == 2) {
                            if (boxIndex - this.boxCounts[0] < this.gB[0]) {
                                int baseLevel = this.baseUpgrades[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] + 1;
                            }
                            int i19 = this.boxCounts[0];
                        }
                    }
                    upgradeCost = i12;
                    if (boxIndex - this.boxCounts[0] < this.gB[1]) {
                    }
                    int i142 = this.boxCounts[0];
                    if (this.gameStats1[1] == 1) {
                    }
                    if (boxIndex - this.boxCounts[0] >= this.gB[1]) {
                        if (this.currentBox[3] != 0) {
                        }
                    }
                    if (boxIndex - this.boxCounts[0] >= this.gB[1]) {
                        i3 = 0;
                        while (true) {
                            i4 = i3;
                            if (i4 < getLength(this.slotCatIDs)) {
                            }
                            else{
                                break;
                            }
                            i3 = i4 + 1;
                        }
                        i2 = i4;
                    }
                    if (boxIndex - this.boxCounts[0] < this.gB[1]) {
                    }
                    if (boxIndex - this.boxCounts[0] != this.gB[0] + 1) {
                    }
                    if (i2 < this.bi) {
                    }
                    if (this.gameStats1[1] == 2) {
                    }
                } else {
                    upgradeCost = 0;
                    int baseLevel = 1;
                    if (boxIndex - this.boxCounts[0] >= this.gB[0]) {
                        if ((boxIndex - this.boxCounts[0]) - this.gB[0] >= 0) {
                            if ((boxIndex - this.boxCounts[0]) - this.gB[0] == 0) {
                                int i20 = ac[0][(this.bx[0] + 1) % 10] * (((this.bx[0] + 1) / 10) + 1);
                                this.gameStats1[1] = 1;
                                upgradeCost = i20;
                            } else {
                                i12 = ac[(boxIndex - this.boxCounts[0]) - this.gB[0]][(this.bx[((boxIndex - this.boxCounts[0]) - this.gB[0]) + 1] + 1) % 10] * (((this.bx[((boxIndex - this.boxCounts[0]) - this.gB[0]) + 1] + 1) / 10) + 1);
                                this.gameStats1[1] = 1;
                                upgradeCost = i12;
                            }
                        }
                    } else if (this.bq[this.unitBuyStats[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]][15]] < this.unitBuyStats[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]][0]) {
                        this.gameStats1[1] = 1;
                        upgradeCost = 0;
                    } else if (this.bu[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] == 0) {
                        this.gameStats1[1] = 1;
                        upgradeCost = this.unitBuyStats[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]][1];
                    } else {
                        this.gameStats1[1] = 1;
                        baseLevel = this.baseUpgrades[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] + 1;
                        upgradeCost = this.unitBuyStats[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]][((this.baseUpgrades[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] + 1) % 10) + 2] * (((this.baseUpgrades[this.boxCatIDs[(boxIndex - this.boxCounts[0]) - this.gB[1]]] + 1) / 10) + 1);
                    }
                    // TODO: Render "In Use" Icon
                    // TODO: Render Current Cat / Special Ability Level
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((57.0f * (((this.boxSize[boxIndex][0] * 100.0f) / 328.0f) / 100.0f)) * cC[tempValue]) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset + ((107.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((88.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f), ((213.0f * ((this.boxSize[boxIndex][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((213.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (45.0f * ((this.boxSize[boxIndex][1] * 10000.0f) / 263.0f)) / 10000.0f, 72);
                    i2 = upgradeCost;
                    int i15 = 0;
                    do {
                        atexturerenderer.drawScaledImagef(this.uiTextures[5], ((((((-117.0f) + (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((281.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((86.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((30.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((30.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (42.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, i2 % 10);
                        i2 /= 10;
                        i15++;
                    } while (i2 > 0);
                    if (i15 >= 5) {
                        if (this.gameStats1[3] == 0) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[0], ((((((-79.0f) + (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((241.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((83.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (36.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 23);
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], ((((((-30.0f) + (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((194.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((75.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (28.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 15);
                        } else {
                            atexturerenderer.drawScaledImagef(this.uiTextures[0], ((((((-81.0f) + (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((243.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((86.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((55.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (42.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 21);
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], ((((((-30.0f) + (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (i15 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((194.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((75.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (28.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 15);
                        }
                    } else if (this.gameStats1[3] == 0) {
                        atexturerenderer.drawScaledImagef(this.uiTextures[0], (((((39.0f + (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((125.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((83.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (36.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 23);
                        atexturerenderer.drawScaledImagef(this.uiTextures[5], (((((86.0f + (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((78.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((75.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (28.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 15);
                    } else {
                        atexturerenderer.drawScaledImagef(this.uiTextures[0], (((((37.0f + (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((127.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((86.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((55.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((62.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (42.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 21);
                        atexturerenderer.drawScaledImagef(this.uiTextures[5], (((((86.0f + (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[boxIndex][0] / 2.0f)) + (this.boxScale * boxIndex)) + this.gameStats1[0]) + xBoxOffset) - (0 * ((29.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f))) + ((78.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((75.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f), ((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) - ((((47.0f * ((this.boxSize[boxIndex][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (28.0f * ((this.boxSize[boxIndex][1] * 100.0f) / 263.0f)) / 100.0f, 15);
                    }
                    if (boxIndex - this.boxCounts[0] < this.gB[1]) {
                    }
                    int i1422 = this.boxCounts[0];
                    if (this.gameStats1[1] == 1) {
                    }
                    if (boxIndex - this.boxCounts[0] >= this.gB[1]) {
                    }
                    if (boxIndex - this.boxCounts[0] >= this.gB[1]) {
                    }
                    if (boxIndex - this.boxCounts[0] < this.gB[1]) {
                    }
                    if (boxIndex - this.boxCounts[0] != this.gB[0] + 1) {
                    }
                    if (i2 < this.bi) {
                    }
                    if (this.gameStats1[1] == 2) {
                    }
                }
                i9 = boxIndex + 1;
            }
            atexturerenderer.setColor(0, 0, 0);
            if (this.gI && this.currentBox[0] == boxIndex) {
                atexturerenderer.setAlpha((cC[tempValue] * 255) / 100);
            } else {
                atexturerenderer.setAlpha((255 - ((((this.boxSize[boxIndex][0] * 100) / 328) * 255) / 100)) * 2);
            }
            if (boxIndex - this.boxCounts[0] > -1 && boxIndex - this.boxCounts[0] < this.boxCounts[1] + 1) {
                atexturerenderer.fillRect(((getWidth() / 2) - (this.boxSize[boxIndex][0] / 2)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset + (((cC[tempValue] * 328) / 100) / 2), 347 - this.boxSize[boxIndex][1], this.boxSize[boxIndex][0] - ((cC[tempValue] * 328) / 100), this.boxSize[boxIndex][1]);
            }
            if (boxIndex - this.boxCounts[0] >= 0 && this.gG[boxIndex - this.boxCounts[0]] == 1) {
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.setAlpha(this.blinkFrame[5]);
                atexturerenderer.fillRect(((getWidth() / 2) - (this.boxSize[boxIndex][0] / 2)) + (this.boxScale * boxIndex) + this.gameStats1[0] + xBoxOffset, 347 - this.boxSize[boxIndex][1], this.boxSize[boxIndex][0], this.boxSize[boxIndex][1]);
            }
            i9 = boxIndex + 1;
        }
        if ((this.currentBox[2] <= -1 || this.currentBox[2] >= this.boxCounts[1] + 1) && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[9]) {
            if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                atexturerenderer.drawScaledImage(this.uiTextures[8], (this.excessWidth / 2) + 316, 83, 324, 260, 31);
            } else {
                atexturerenderer.drawScaledImage(this.uiTextures[8], (this.excessWidth / 2) + 316, 83, 324, 260, 32);
            }
        }
        int i21 = 1;
        tempValue = 0;
        while (true) {
            int i22 = i21;
            if (i22 >= this.boxCounts[0] + 1 + this.boxCounts[1] + this.boxCounts[2]) {
                break;
            }
            if (this.currentBox[0] == i22) {
                //this.gameStats1[0] = this.gH;
                tempValue = this.gH;
                if (this.currentBox[5] == 0) {
                    this.gameStats1[2] = this.fx[2];
                } else {
                    this.gameStats1[2] = 0;
                }
                f = -(328 - this.boxSize[i22][0]);
            } else if (this.currentBox[0] + 1 == i22) {
                //this.gameStats1[0] = 0;
                tempValue = 0;
                if (this.currentBox[5] == 1) {
                    this.gameStats1[2] = this.fx[2];
                } else {
                    this.gameStats1[2] = 0;
                }
                f = 328 - this.boxSize[i22][0];
            } else if (this.currentBox[0] + 2 == i22) {
                //this.gameStats1[0] = 0;
                tempValue = 0;
                this.gameStats1[2] = 0;
                f = (328 - this.boxSize[i22][0]) + ((328 - this.boxSize[i22 - 1][0]) / 2.0f);
            } else if (this.currentBox[0] + 3 == i22) {
                //this.gameStats1[0] = 0;
                tempValue = 0;
                this.gameStats1[2] = 0;
                f = (328 - this.boxSize[i22][0]) + ((328 - this.boxSize[i22 - 1][0]) / 2.0f) + ((328 - this.boxSize[i22 - 2][0]) / 2.0f);
            } else if (this.currentBox[0] - 1 == i22) {
                //this.gameStats1[0] = 0;
                tempValue = 0;
                if (this.currentBox[5] == -1) {
                    this.gameStats1[2] = this.fx[2];
                } else {
                    this.gameStats1[2] = 0;
                }
                f = -((328 - this.boxSize[i22][0]) + ((328 - this.boxSize[i22 + 1][0]) / 2.0f));
            } else if (this.currentBox[0] - 2 == i22) {
                //this.gameStats1[0] = 0;
                tempValue = 0;
                this.gameStats1[2] = 0;
                f = -((328 - this.boxSize[i22][0]) + ((328 - this.boxSize[i22 + 1][0]) / 2.0f));
            } else {
                i21 = i22 + 1;
            }
            if (i22 - this.boxCounts[0] <= -1 || i22 - this.boxCounts[0] >= this.boxCounts[1] + 1) {
                int i23 = 0;
                if (i22 - this.boxCounts[0] <= -1) {
                    i23 = (-(i22 - this.boxCounts[0])) - 1;
                } else if (i22 - this.boxCounts[0] >= this.boxCounts[1] + 1) {
                    i23 = (i22 - this.boxCounts[0]) - (this.boxCounts[1] + 1);
                }
                if (this.bC[this.gE[i23]] == 0 && (this.blinkFrame[3] % 8) / 4 == 0) {
                    atexturerenderer.drawScaledImagef(this.newTexture, ((((-135.0f) * (((this.boxSize[i22][0] * 100.0f) / 328.0f) / 100.0f)) * cC[tempValue]) / 100.0f) + f + ((getWidth() / 2.0f) - (this.boxSize[i22][0] / 2.0f)) + (this.boxScale * i22) + this.gameStats1[0] + ((269.0f * ((this.boxSize[i22][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((303.0f * ((this.boxSize[i22][1] * 10000.0f) / 263.0f)) / 10000.0f), ((80.0f * ((this.boxSize[i22][0] * 100.0f) / 328.0f)) / 100.0f) - ((((80.0f * ((this.boxSize[i22][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (80.0f * ((this.boxSize[i22][1] * 100.0f) / 263.0f)) / 100.0f, 0);
                }
            } else if (i22 - this.boxCounts[0] >= 0 && i22 - this.boxCounts[0] < this.gB[0] && i22 - this.boxCounts[0] >= this.gB[1] && this.bq[this.unitBuyStats[this.boxCatIDs[(i22 - this.boxCounts[0]) - this.gB[1]]][15]] >= this.unitBuyStats[this.boxCatIDs[(i22 - this.boxCounts[0]) - this.gB[1]]][0] && this.bu[this.boxCatIDs[(i22 - this.boxCounts[0]) - this.gB[1]]] == 0 && (this.blinkFrame[3] % 8) / 4 == 0) {
                atexturerenderer.drawScaledImagef(this.newTexture, ((((-135.0f) * (((this.boxSize[i22][0] * 100.0f) / 328.0f) / 100.0f)) * cC[tempValue]) / 100.0f) + f + ((getWidth() / 2.0f) - (this.boxSize[i22][0] / 2.0f)) + (this.boxScale * i22) + this.gameStats1[0] + ((269.0f * ((this.boxSize[i22][0] * 100.0f) / 328.0f)) / 100.0f), 347.0f - ((303.0f * ((this.boxSize[i22][1] * 10000.0f) / 263.0f)) / 10000.0f), ((80.0f * ((this.boxSize[i22][0] * 100.0f) / 328.0f)) / 100.0f) - ((((80.0f * ((this.boxSize[i22][0] * 100.0f) / 328.0f)) / 100.0f) * cC[tempValue]) / 100.0f), (80.0f * ((this.boxSize[i22][1] * 100.0f) / 263.0f)) / 100.0f, 0);
            }
            i21 = i22 + 1;
        }
        if (this.bq[0] >= 48 && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1] && this.currentBox[2] >= this.gB[1] && this.currentBox[2] < this.gB[0] && this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1 >= 10) {
            atexturerenderer.drawScaledImage(this.uiTextures[8], (((getWidth() / 2) - 164) + 285) - (dv[this.fx[1]] / 2), 304 - (dv[this.fx[1]] / 2), dv[this.fx[1]] + 69, dv[this.fx[1]] + 69, 46);
        }
        atexturerenderer.setImageAlpha(127);
        if (this.currentBox[2] > 1 - this.boxCounts[0]) {
            atexturerenderer.drawScaledImagef(this.uiTextures[10], (int) (49.0f + (10.0f * aMath.sin(this.blinkFrame[4] * 30))), 171, 0);
        }
        if (this.currentBox[2] < this.boxCounts[1] + this.boxCounts[2]) {
            atexturerenderer.setOrientation(1);
            atexturerenderer.drawScaledImagef(this.uiTextures[10], ((int) (849.0f - (10.0f * aMath.sin(this.blinkFrame[4] * 30)))) + this.excessWidth, 171, 0);
        }
        atexturerenderer.setOrientation(0);
        atexturerenderer.setImageAlpha(255);
        if (this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1]) {
            int i24 = -this.boxCounts[1];
            int i25 = this.boxCounts[1];
            int i26 = 0;
            do {
                if (this.currentBox[2] == i26) {
                    atexturerenderer.setImageColor(255, 255, 255);
                    atexturerenderer.setImageAlpha(255);
                } else {
                    atexturerenderer.setImageColor(0, 0, 0);
                    atexturerenderer.setImageAlpha(200);
                }
                atexturerenderer.drawScaledImagef(this.uiTextures[6], ((getWidth() / 2) - 6) + (i24 * 10), 60, 0);
                i24 += 2;
                i25--;
                i26++;
            } while (i25 >= 0);
        }
        atexturerenderer.setImageColor(255, 255, 255);
        atexturerenderer.setImageAlpha(255);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], ((getWidth() / 2) - 572) - this.fP, 0, 572, 637, 0);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], this.fP + (getWidth() / 2), 0, 572, 637, 1);
        int i27 = 0;
        if (this.fR[0] == 0) {
            i27 = cu[this.blinkFrame[0]];
        } else if (this.fR[0] == 1) {
            i27 = cv[this.blinkFrame[0]];
        } else {
            int i28 = this.fR[0];
        }
        atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i27, 355, 355, 0);
        if (this.blinkFrame[1] == 1 || this.blinkFrame[1] == 2 || this.blinkFrame[1] == 4 || this.blinkFrame[1] == 5) {
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i27, 355, 191, 2);
        }
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, -42, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 638, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 0, getWidth(), 55, 0);
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 585, getWidth(), 55, 0);
        atexturerenderer.setOrientation(0);
        if (this.gm[0] < 297) {
            if (this.previousScreen == 0) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 1);
            } else {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 8);
            }
        }
        if (this.gm[1] < 297) {
            atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[1], 3, 2);
        }
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.buttonCoordinates1[5][0] - (dv[this.fx[5]] / 2), this.buttonCoordinates1[5][1] - (dv[this.fx[5]] / 2), dv[this.fx[5]] + this.buttonCoordinates1[5][2], dv[this.fx[5]] + this.buttonCoordinates1[5][3], 9);
        atexturerenderer.drawScaledImage(this.uiTextures[0], (this.buttonCoordinates1[5][0] + 4) - (dv[this.fx[5]] / 2), (this.buttonCoordinates1[5][1] + 17) - (dv[this.fx[5]] / 2), dv[this.fx[5]] + 84, dv[this.fx[5]] + 60, 3);
        if (!this.eE[0] && !this.eE[1] && !this.eE[2] && !this.eE[13] && !this.eb && this.eE[10]) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], 3, 540, 96, 96, ((this.blinkFrame[3] % 4) / 2) + 12);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 0, 11);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 570, 17, 10);
        int i29 = this.aY;
        int i30 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i30 * 29)) + this.excessWidth, 6, i29 % 10);
            i29 /= 10;
            i30++;
        } while (i29 > 0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (633 - (dv[this.fx[15]] / 2)), 8 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 62, dv[this.fx[15]] + 36, 23);
        if (this.be >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (681 - (dv[this.fx[15]] / 2)), 23 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 27, dv[this.fx[15]] + 26, 18);
        }
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 585, 11);
        atexturerenderer.setOrientation(0);
        if (this.be >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (344 - (dv[this.fx[13]] / 2)), 590 - (dv[this.fx[13]] / 2), dv[this.fx[13]] + 247, dv[this.fx[13]] + 48, 22);
            if (this.be == 1 && (this.blinkFrame[3] % 8) / 4 == 0) {
                atexturerenderer.drawScaledImage(this.newTexture, this.excessWidth + 312, 550, 80, 80, 0);
            }
        }
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (688 - (dv[this.fx[14]] / 2)), 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
        if (this.bf >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (733 - (dv[this.fx[14]] / 2)), 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[0], this.excessWidth + 610, 607, 24);
        int i31 = this.catfood;
        int i32 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i32 * 29)) + this.excessWidth, 592, i31 % 10);
            i31 /= 10;
            i32++;
        } while (i31 > 0);
    }

    void stampDraw(aTextureRenderer atexturerenderer) {
        int i = 0;
        while (true) {
            int i2 = i;
            if (i2 >= 3) {
                break;
            }
            atexturerenderer.drawScaledImage(this.stampTextures[1], ((i2 - 1) * (this.excessWidth + 480)) + 0, 0, this.excessWidth + 484, 640, 21);
            i = i2 + 1;
        }
        atexturerenderer.setColor(255, 255, 255);
        atexturerenderer.drawScaledImage(this.textTextures[0], 31, 118, 0);
        atexturerenderer.drawScaledImage(this.textTextures[1], 74, 168, 0);
        int i3 = 0;
        while (true) {
            int i4 = i3;
            if (i4 >= 30) {
                break;
            }
            atexturerenderer.drawScaledImage(this.stampTextures[1], this.gameStats1[0] + ((getWidth() / 2) - 99) + (this.boxScale * i4), 244, 198, 199, 18);
            i3 = i4 + 1;
        }
        int i5 = 0;
        while (true) {
            int i6 = i5;
            if (i6 >= 30) {
                break;
            }
            if (i6 != 29) {
                atexturerenderer.drawScaledImage(this.stampTextures[1], ((getWidth() / 2) - 99) + (this.boxScale * i6) + this.gameStats1[0] + 14, 311, 165, 113, this.stampStats[i6][0] + 9);
            } else if (this.bn == 0) {
                atexturerenderer.drawScaledImage(this.stampTextures[1], ((getWidth() / 2) - 99) + (this.boxScale * i6) + this.gameStats1[0] + 14, 311, 165, 113, this.stampStats[i6][0] + 9);
            } else {
                atexturerenderer.drawScaledImage(this.stampTextures[1], ((getWidth() / 2) - 99) + (this.boxScale * i6) + this.gameStats1[0] + 14, 311, 165, 113, this.stampStats[i6 + 1][0] + 9);
            }
            i5 = i6 + 1;
        }
        int i7 = 0;
        while (true) {
            int i8 = i7;
            if (i8 >= 30) {
                break;
            }
            if (i8 == 29) {
                if (this.bn == 0) {
                    int i9 = this.stampStats[i8][0];
                } else {
                    int i10 = this.stampStats[i8 + 1][0];
                }
            } else if (this.stampStats[i8][0] == 0) {
                int i11 = this.stampStats[i8][1];
                int i12 = 0;
                while (true) {
                    i11 /= 10;
                    if (i11 <= 0) {
                        break;
                    }
                    i12--;
                }
                int i13 = i12 - 1;
                int i14 = this.stampStats[i8][1];
                do {
                    atexturerenderer.drawScaledImagef(this.uiTextures[5], ((((((getWidth() / 2) - 99) + (this.boxScale * i8)) + this.gameStats1[0]) + 99) - 15) - (i13 * 14), 366, i14 % 10);
                    i14 /= 10;
                    i13 += 2;
                } while (i14 > 0);
                atexturerenderer.drawScaledImagef(this.uiTextures[5], (((((((getWidth() / 2) - 99) + (this.boxScale * i8)) + this.gameStats1[0]) + 99) - 15) - (i13 * 14)) - 2, 366, 16);
            }
            if (this.bm[i8] >= 2) {
                atexturerenderer.drawScaledImagef(this.stampTextures[1], ((getWidth() / 2) - 99) + (this.boxScale * i8) + this.gameStats1[0] + 21, 293, 19);
            }
            atexturerenderer.setColor(255, 255, 255);
            i7 = i8 + 1;
        }
        int i15 = 0;
        int i16 = 0;
        while (true) {
            if (i16 >= 30) {
                i16 = i15;
                break;
            }
            if (this.bm[i16] == 0) {
                break;
            }
            i15 = i16 + 1;
            i16++;
        }
        for (int i17 = 0; i17 < 30; i17++) {
            atexturerenderer.setColor(0, 0, 0);
            if (i16 - 1 == i17) {
                atexturerenderer.drawScaledImage(this.textTextures[4], ((getWidth() / 2) - 99) + (this.boxScale * i17) + this.gameStats1[0] + 99, 267, 1);
            } else if (i16 == i17) {
                atexturerenderer.drawScaledImage(this.textTextures[5], ((getWidth() / 2) - 99) + (this.boxScale * i17) + this.gameStats1[0] + 99, 267, 1);
            }
        }
        if (!this.eE[0] && this.bn == 0) {
            atexturerenderer.drawScaledImagef(this.stampTextures[1], this.gameStats1[2] + 633 + this.excessWidth, 331, 20);
            this.stampModels[0].setAction(this.stampAnims[0], this.blinkFrame[0]);
            atexturerenderer.setTextures(this.stampModels[0], this.gameStats1[2] + 774 + this.excessWidth, 470);
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.drawScaledImage(this.textTextures[2], this.gameStats1[2] + 653 + this.excessWidth, 351);
            atexturerenderer.drawScaledImage(this.textTextures[3], this.gameStats1[2] + 653 + this.excessWidth, 381);
            atexturerenderer.setColor(255, 255, 255);
            atexturerenderer.drawScaledImage(this.textTextures[2], this.gameStats1[2] + 650 + this.excessWidth, 348);
            atexturerenderer.drawScaledImage(this.textTextures[3], this.gameStats1[2] + 650 + this.excessWidth, 378);
        }
        atexturerenderer.setOrientation(0);
        if (!this.gu && this.blinkFrame[1] >= this.stampAnims[1].a()) {
            atexturerenderer.setImageAlpha(127);
            if (this.hq[2] > 0) {
                atexturerenderer.drawScaledImagef(this.uiTextures[10], (int) (49.0f + (10.0f * aMath.sin(this.blinkFrame[4] * 30))), 293, 0);
            }
            atexturerenderer.setOrientation(1);
            if (this.hq[2] < 29) {
                atexturerenderer.drawScaledImagef(this.uiTextures[10], ((int) (849.0f - (10.0f * aMath.sin(this.blinkFrame[4] * 30)))) + this.excessWidth, 293, 0);
            }
            atexturerenderer.setOrientation(0);
            atexturerenderer.setImageAlpha(255);
        }
        atexturerenderer.setOrientation(0);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, -42, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 638, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 0, getWidth(), 55, 0);
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 585, getWidth(), 55, 0);
        atexturerenderer.setOrientation(0);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (225 - (dv[this.fx[0]] / 2)), 493 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 381, dv[this.fx[0]] + 72, 3);
        atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (288 - (dv[this.fx[0]] / 2)), 502 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 254, dv[this.fx[0]] + 55, 1);
        if (!this.gu && this.blinkFrame[1] >= this.stampAnims[1].a()) {
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (225 - (dv[this.fx[0]] / 2)), 493 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 381, dv[this.fx[0]] + 72, ((this.blinkFrame[4] % 4) / 2) + 4);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[2], 8, 3, 1);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 0, 11);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 570, 17, 10);
        int i18 = this.aY;
        int i19 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i19 * 29)) + this.excessWidth, 6, i18 % 10);
            i18 /= 10;
            i19++;
        } while (i18 > 0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (633 - (dv[this.fx[15]] / 2)), 8 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 62, dv[this.fx[15]] + 36, 23);
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 585, 11);
        atexturerenderer.setOrientation(0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (688 - (dv[this.fx[14]] / 2)), 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
        atexturerenderer.drawScaledImagef(this.uiTextures[0], this.excessWidth + 610, 607, 24);
        int i20 = this.catfood;
        int i21 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i21 * 29)) + this.excessWidth, 592, i20 % 10);
            i20 /= 10;
            i21++;
        } while (i20 > 0);
        for (int i22 = 0; i22 < 30; i22++) {
            if (this.bm[i22] == 1) {
                this.stampModels[1].setAction(this.stampAnims[1], this.blinkFrame[1]);
                atexturerenderer.setTextures(this.stampModels[1], ((getWidth() / 2) - 99) + (this.boxScale * i22) + this.gameStats1[0] + 21, 293);
            }
        }
    }

    boolean enemyGuideProcess() {
        if (!this.eE[0] && !this.eE[1] && !this.eE[13] && !this.eb) {
            int[] iArr = this.gameStats1;
            iArr[0] = iArr[0] + this.scrollAmount[0];
            int[] iArr2 = this.gameStats1;
            iArr2[1] = iArr2[1] - this.scrollAmount[0];
            this.scrollAmount[0] = (int) (this.scrollAmount[0] * 0.9d);
            if (this.gameStats1[0] >= (this.boxScale / 2) - 20) {
                this.gameStats1[0] = (this.boxScale / 2) - 20;
                this.gameStats1[1] = this.boxScale * 100;
                this.scrollAmount[0] = 0;
            } else if (this.gameStats1[0] < (-((((this.boxScale * ((this.boxCounts[0] + this.boxCounts[1]) + this.boxCounts[2])) - this.boxScale) + (this.boxScale / 2)) - 20))) {
                this.gameStats1[0] = -((((this.boxScale * ((this.boxCounts[0] + this.boxCounts[1]) + this.boxCounts[2])) - this.boxScale) + (this.boxScale / 2)) - 20);
                this.scrollAmount[0] = 0;
                this.gameStats1[1] = this.boxScale * 100;
            }
            if (!isPointerDown() || this.eb) {
                this.isScrolling = false;
                if ((this.scrollAmount[0] >= 0 && this.scrollAmount[0] < 8) || (this.scrollAmount[0] > -8 && this.scrollAmount[0] <= 0)) {
                    this.scrollAmount[0] = 0;
                    if (this.gameStats1[0] % this.boxScale != 0) {
                        if ((-this.gameStats1[0]) >= 0) {
                            if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
                                this.gameStats1[0] = this.gameStats1[0] - ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4);
                                if ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4 == 0) {
                                    this.gameStats1[0] = ((this.gameStats1[0] / this.boxScale) - 1) * this.boxScale;
                                }
                            } else {
                                this.gameStats1[0] = this.gameStats1[0] - (((this.gameStats1[0] % this.boxScale) - 4) / 4);
                                if (((this.gameStats1[0] % this.boxScale) - 4) / 4 == 0) {
                                    this.gameStats1[0] = (this.gameStats1[0] / this.boxScale) * this.boxScale;
                                }
                            }
                        } else if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
                            this.gameStats1[0] = this.gameStats1[0] - ((((this.gameStats1[0] % this.boxScale) + this.boxScale) - 4) / 4);
                            if ((((this.gameStats1[0] % this.boxScale) + this.boxScale) - 4) / 4 == 0) {
                                this.gameStats1[0] = ((this.gameStats1[0] / this.boxScale) - 1) * this.boxScale;
                            }
                        } else {
                            this.gameStats1[0] = this.gameStats1[0] - (((this.gameStats1[0] % this.boxScale) + 4) / 4);
                            if (((this.gameStats1[0] % this.boxScale) + 4) / 4 == 0) {
                                this.gameStats1[0] = (this.gameStats1[0] / this.boxScale) * this.boxScale;
                            }
                        }
                    }
                    if (!isPointerUp()) {
                        this.eE[9] = false;
                    }
                }
            } else {
                if (getCurrentXTouch() - getPreviousXTouch() <= -10 || getCurrentXTouch() - getPreviousXTouch() >= 10 || this.isScrolling) {
                    this.isScrolling = true;
                } else {
                    this.scrollAmount[0] = 0;
                }
                if (this.isScrolling) {
                    this.scrollAmount[0] = getCurrentXTouch() - getPreviousXTouch();
                    if (this.scrollAmount[0] != 0 && !this.eE[9]) {
                        this.eE[9] = true;
                    }
                }
            }
            if (this.scrollAmount[0] < 0) {
                if (this.fs[0] != (-(this.gameStats1[0] / this.boxScale))) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                this.gp[3] = false;
            } else if (this.scrollAmount[0] > 0) {
                if (this.fs[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                this.gp[3] = false;
            } else if (this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.gp[3]) {
                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                this.gp[3] = true;
            }
            if (this.fs[0] != (-(this.gameStats1[0] / this.boxScale)) && (-(this.gameStats1[0] / this.boxScale)) >= 0) {
                this.fs[0] = -(this.gameStats1[0] / this.boxScale);
            }
            if (this.fs[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
                this.fs[1] = ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale;
            }
            if ((-(this.gameStats1[0] - (this.boxScale / 2))) / this.boxScale != this.fs[2]) {
                this.fs[2] = (-(this.gameStats1[0] - (this.boxScale / 2))) / this.boxScale;
                this.ft = -1;
            }
        }
        if (this.bt[dt[this.fs[0]] - 2] != 0) {
            if (this.unitBattleStats[1][0][1] == 0) {
                int[] iArr3 = this.unitBattleStats[1][0];
                iArr3[2] = iArr3[2] + 1;
                int[] iArr4 = this.unitBattleStats[1][0];
                iArr4[3] = iArr4[3] + this.unitBattleStats[1][0][10];
                if (this.unitBattleStats[1][0][3] >= 0) {
                    this.unitBattleStats[1][0][3] = 0;
                }
                if (this.unitBattleStats[1][0][2] / this.enemySlotAnims[0][0].b() >= 4) {
                    this.unitBattleStats[1][0][1] = 1;
                }
            } else if (this.unitBattleStats[1][0][1] == 1) {
                if (this.enemySlotAnims[0][1].b() == 0) {
                    this.unitBattleStats[1][0][2] = (this.unitBattleStats[1][0][2] + 1) % 1;
                } else {
                    this.unitBattleStats[1][0][2] = (this.unitBattleStats[1][0][2] + 1) % this.enemySlotAnims[0][1].b();
                }
            } else if (this.unitBattleStats[1][0][1] == 2) {
                this.unitBattleStats[1][0][2] = (this.unitBattleStats[1][0][2] + 1) % this.enemySlotAnims[0][2].a();
            } else if (this.unitBattleStats[1][0][1] == 3) {
                this.unitBattleStats[1][0][2] = (this.unitBattleStats[1][0][2] + 1) % 24;
                int[] iArr5 = this.unitBattleStats[1][0];
                iArr5[4] = iArr5[4] + co[this.unitBattleStats[1][0][2]];
                this.unitBattleStats[1][0][3] -= 60;
            } else if (this.unitBattleStats[1][0][1] == 4) {
                this.unitBattleStats[1][0][2] = (this.unitBattleStats[1][0][2] + 1) % getLength(eT);
                int[] iArr6 = this.unitBattleStats[1][0];
                iArr6[4] = iArr6[4] - this.unitBattleStats[1][0][10];
                if (this.unitBattleStats[1][0][4] <= this.unitBattleStats[1][0][24]) {
                    int[] iArr7 = this.unitBattleStats[1][0];
                    iArr7[25] = iArr7[25] - this.unitBattleStats[1][0][26];
                    if (this.unitBattleStats[1][0][25] <= 0) {
                        this.unitBattleStats[1][0][25] = 0;
                    }
                }
                int[] iArr8 = this.unitBattleStats[1][0];
                iArr8[29] = iArr8[29] + this.unitBattleStats[1][0][28];
                if (this.unitBattleStats[1][0][25] <= 0) {
                    this.unitBattleStats[1][0][1] = 0;
                    this.unitBattleStats[1][0][2] = 0;
                    this.unitBattleStats[1][0][27] = 0;
                    this.unitBattleStats[1][0][28] = 0;
                    this.unitBattleStats[1][0][29] = 0;
                    this.unitBattleStats[1][0][4] = 0;
                    this.unitBattleStats[1][0][8] = 10;
                }
            } else if (this.unitBattleStats[1][0][1] == 5) {
                this.unitBattleStats[1][0][2] = (this.unitBattleStats[1][0][2] + 1) % 12;
            }
            if (this.unitBattleStats[1][0][2] == 0) {
                if (this.unitBattleStats[1][0][1] == 1) {
                    this.unitBattleStats[1][0][1] = 2;
                } else if (this.unitBattleStats[1][0][1] == 2) {
                    this.unitBattleStats[1][0][1] = 0;
                } else if (this.unitBattleStats[1][0][1] == 3) {
                    if (this.unitBattleStats[1][0][8] > 0) {
                        this.unitBattleStats[1][0][1] = 0;
                        this.fu = 0;
                    } else {
                        this.unitBattleStats[1][0][1] = 4;
                        this.unitBattleStats[1][0][2] = 0;
                        this.unitBattleStats[1][0][10] = (aMath.rand(12) + 10) * 10;
                        this.unitBattleStats[1][0][24] = -2000;
                        this.unitBattleStats[1][0][25] = 255;
                        this.unitBattleStats[1][0][26] = (this.unitBattleStats[1][0][10] / 10) + aMath.rand(10);
                        this.unitBattleStats[1][0][27] = aMath.rand(40) + 20;
                        this.unitBattleStats[1][0][28] = aMath.rand(10) + 5;
                        this.unitBattleStats[1][0][29] = 0;
                    }
                }
            }
        }
        if (!this.eE[0] && !this.eE[1] && !this.eE[13] && !this.eE[9] && !this.eb) {
            if (this.bt[dt[this.fs[0]] - 2] != 0 && isPointerUp() && isTouching(((getWidth() / 2) - 200) + (this.unitBattleStats[1][0][3] / 10), 100, 400, 280) && this.unitBattleStats[1][0][1] != 3 && this.unitBattleStats[1][0][1] != 4) {
                this.unitBattleStats[1][0][1] = 3;
                this.unitBattleStats[1][0][2] = 0;
            }
            if (this.fx[5] >= 1) {
                int[] iArr9 = this.fx;
                iArr9[5] = iArr9[5] + 1;
                if (this.fx[5] > getLength(dv) - 1) {
                    this.fx[5] = 0;
                    this.eE[1] = true;
                }
            } else if (this.fx[13] >= 1) {
                int[] iArr10 = this.fx;
                iArr10[13] = iArr10[13] + 1;
                if (this.fx[13] > getLength(dv) - 1) {
                    this.fx[13] = 0;
                    if (this.be >= 1) {
                        this.eE[13] = true;
                    }
                }
            } else if (this.fx[14] >= 1) {
                int[] iArr11 = this.fx;
                iArr11[14] = iArr11[14] + 1;
                if (this.fx[14] > getLength(dv) - 1) {
                    this.fx[14] = 0;
                    if (this.bB[8] == 0) {
                        screenTransition();
                        this.gU = true;
                        for (int i = 0; i < getLength(this.gV); i++) {
                            this.gV[i] = 0;
                        }
                        aSound.getInstance().setVolume(50);
                        return false;
                    } else if (this.catfood >= 900000) {
                        screenTransition();
                        this.gu = true;
                        this.gw = 10000;
                        return false;
                    } else {
                        screenTransition();
                        this.menuType = 0;
                        this.j = true;
                        return false;
                    }
                }
            } else {
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                    this.gp[5] = false;
                } else if (!this.gp[5]) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    this.gp[5] = true;
                }
                if (isPointerUp() && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    int[] iArr12 = this.fx;
                    iArr12[5] = iArr12[5] + 1;
                } else if (isBackPressed()) {
                    this.fx[5] = 0;
                    this.eE[1] = true;
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) && this.bf >= 1) {
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    int[] iArr13 = this.fx;
                    iArr13[14] = iArr13[14] + 1;
                }
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) || this.bf < 1) {
                    this.gp[14] = false;
                } else if (!this.gp[14]) {
                    this.gp[14] = true;
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
            }
        }
        a(1, this.fs[2]);
        if (this.eE[0]) {
            int[] iArr14 = this.blinkFrame;
            iArr14[2] = iArr14[2] + 1;
            this.gm[0] = (this.gm[0] * 2) + 1;
            if (this.gm[0] >= 297) {
                this.gm[0] = 297;
                this.gm[1] = this.gm[1] / 2;
                this.blinkFrame[6] = this.blinkFrame[6] / 2;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = getWidth();
                if (this.gm[1] <= 0) {
                    this.eE[0] = false;
                    this.blinkFrame[2] = 0;
                    this.previousScreen = 0;
                }
            } else {
                this.fP = fM[this.blinkFrame[2]];
            }
        } else if (this.eE[1]) {
            int[] iArr15 = this.blinkFrame;
            iArr15[2] = iArr15[2] + 1;
            this.gm[1] = (this.gm[1] * 2) + 1;
            this.blinkFrame[6] = (this.blinkFrame[6] * 2) + 1;
            if (this.gm[1] >= 297) {
                this.gm[1] = 297;
                this.blinkFrame[6] = 126;
                this.gm[0] = this.gm[0] / 2;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = 0;
                if (this.gm[0] <= 0) {
                    screenTransition();
                    this.setScreenType(ScreenType.CAT_BASE);
                    this.screenLoadState = -1;
                    this.blinkFrame[2] = 0;
                    this.eE[1] = false;
                    return false;
                }
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
        }
        if (this.eE[13]) {
            int[] iArr16 = this.blinkFrame;
            iArr16[2] = iArr16[2] + 1;
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.fP = 0;
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
            if (this.blinkFrame[2] > getLength(fM)) {
                this.fP = 0;
                this.blinkFrame[2] = 0;
                screenTransition();
                this.setScreenType(ScreenType.ITEM_SHOP);
                this.screenLoadState = -1;
                this.previousScreen = 5;
                return false;
            }
        }
        this.blinkFrame[0] -= 1;
        if (this.blinkFrame[0] <= 0) {
            this.blinkFrame[0] = 0;
        }
        int[] iArr17 = this.blinkFrame;
        iArr17[3] = iArr17[3] + 1;
        if (this.blinkFrame[3] > getLength(du) - 1) {
            this.blinkFrame[3] = 0;
        }
        int[] iArr18 = this.blinkFrame;
        iArr18[4] = iArr18[4] + 1;
        int[] iArr19 = this.blinkFrame;
        iArr19[5] = iArr19[5] + 1;
        if (this.eE[0] || this.eE[1] || this.eE[13] || this.gF[0] || this.gF[1] || this.eb || this.gI || this.eE[9]) {
            if (this.fx[5] == 0 && !this.eE[1]) {
                this.eE[10] = false;
            }
        } else if ((isPointerDown() || isPointerUp()) && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
            this.eE[10] = true;
        } else if (this.fx[5] == 0 && !this.eE[1]) {
            this.eE[10] = false;
        }
        return true;
    }

    void legendLoad() {
        for (int i = 0; i < getLength(this.gp); i++) {
            this.gp[i] = false;
        }
        loadTextures2();
        for (int i2 = 0; i2 < getLength(this.uiTextures); i2++) {
            if (this.uiTextures[i2].isLoaded()) {
                this.uiTextures[i2].reset();
            }
        }
        for (int i3 = 0; i3 < getLength(this.textTextures); i3++) {
            if (this.textTextures[i3].isLoaded()) {
                this.textTextures[i3].reset();
            }
        }
        for (int i4 = 0; i4 < getLength(this.fx); i4++) {
            this.fx[i4] = 0;
        }
        for (int i5 = 0; i5 < getLength(this.eK); i5++) {
            this.eK[i5] = 0;
        }
        for (int i6 = 0; i6 < getLength(this.hk); i6++) {
            this.hk[i6] = 0;
        }
        for (int i7 = 0; i7 < getLength(this.fC); i7++) {
            this.fC[i7] = 0;
        }
        for (int i8 = 0; i8 < getLength(this.fy); i8++) {
            this.fy[i8] = 0;
        }
        for (int i9 = 0; i9 < getLength(this.blinkFrame); i9++) {
            this.blinkFrame[i9] = 0;
        }
        this.buttonCoordinates1[0][0] = (this.excessWidth / 2) + 657;
        this.buttonCoordinates1[0][1] = 352;
        this.buttonCoordinates1[0][2] = 168;
        this.buttonCoordinates1[0][3] = 88;
        if (!this.uiTextures[0].isLoaded()) {
            this.uiTextures[0].load(MyUtility.getString(String.format("img_%03d_intro.png", 45)), MyUtility.getString(String.format("img_%03d_intro.imgcut", 45)));
        }
        if (!this.uiTextures[1].isLoaded()) {
            this.uiTextures[1].load(MyUtility.getString(String.format("img%03d.png", 6)), MyUtility.getString(String.format("img%03d.imgcut", 6)));
        }
        if (this.eQ >= 1) {
            if (!this.legendTextures[this.eQ - 1].isLoaded()) {
                this.legendTextures[this.eQ - 1].load(MyUtility.getString(String.format("i%03d_p.png", this.eQ - 1)), MyUtility.getString(String.format("%03d_p.imgcut", this.eQ - 1)));
            }
            this.aJ.load(String.format("%03d_p.mamodel", this.eQ - 1));
            for (int i10 = 0; i10 < getLength(this.legendAnims); i10++) {
                this.legendAnims[i10].load(String.format("%03d_p%02d.maanim", this.eQ - 1, i10));
            }
            this.aJ.setTextures(this.legendTextures);
            this.aJ.setAction();
            for (int i11 = 0; i11 < getLength(this.giftMessageText[this.eQ - 1]); i11++) {
                this.textTextures[i11].drawText(this.giftMessageText[this.eQ - 1][i11], "FONT_SYSTEM_BOLD", 30, 1);
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:101:0x03ca  */
    /* JADX WARN: Removed duplicated region for block: B:105:0x03d7  */
    /* JADX WARN: Removed duplicated region for block: B:366:0x1fd8  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x031f  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0349  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x0374  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x039f  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    void titleDraw(aTextureRenderer atexturerenderer) {
        float f = 0;
        int i;
        atexturerenderer.drawScaledImage(this.uiTextures[0], 0, (int) (-((((getWidth() / 960) * 720) - 640) / 2)), getWidth(), (int) (720.0f * (getWidth() / 960.0f)), 0);
        atexturerenderer.drawScaledImagef(this.uiTextures[1], 0, 0 - this.eZ, 1);
        atexturerenderer.drawScaledImagef(this.uiTextures[1], (this.excessWidth / 2) + 128, ds[this.blinkFrame[0]] + 10, 0);
        atexturerenderer.setColor(0, 0, 0);
        atexturerenderer.setAlpha(this.blinkFrame[1]);
        if (this.fG[0] == 0) {
            atexturerenderer.drawRectangle(0, 329, getWidth(), 203);
        } else if (this.fG[0] == 1) {
            atexturerenderer.drawRectangle(0, 241, getWidth(), 291);
        }
        if (this.fG[0] == 0) {
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + ((this.gameStats1[0] + 289) - (dv[this.fx[0]] / 2)), 349 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 381, dv[this.fx[0]] + 72, 3);
            atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + ((this.gameStats1[0] + 345) - (dv[this.fx[0]] / 2)), 358 - (dv[this.fx[0]] / 2), dv[this.fx[0]] + 254, dv[this.fx[0]] + 55, 2);
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + ((this.gameStats1[0] + 289) - (dv[this.fx[1]] / 2)), 441 - (dv[this.fx[1]] / 2), dv[this.fx[1]] + 381, dv[this.fx[1]] + 72, 3);
            atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + ((this.gameStats1[0] + 345) - (dv[this.fx[1]] / 2)), 450 - (dv[this.fx[1]] / 2), dv[this.fx[1]] + 254, dv[this.fx[1]] + 55, 3);
            if (!this.eE[0] && !this.eE[1] && !this.eE[2] && !this.eE[3] && !this.eE[4] && !this.eb && !this.gu) {
                if (isPointerDown() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + this.gameStats1[0] + 289, 349, 381, 72, ((this.blinkFrame[5] % 4) / 2) + 4);
                } else if (isPointerDown() && isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3])) {
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + this.gameStats1[0] + 289, 441, 381, 72, ((this.blinkFrame[5] % 4) / 2) + 4);
                }
            }
            if (!this.eE[0] && !this.eE[1] && !this.eE[2] && !this.eE[3] && !this.eE[4] && !this.gu && this.bq[0] >= 7) {
                atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + (677 - (dv[this.fx[6]] / 2)), 476 - (dv[this.fx[6]] / 2), dv[this.fx[6]] + 287, 178, 23);
            }
        } else if (this.fG[0] == 1) {
            int i2 = 2;
            while (true) {
                int i3 = i2;
                if (i3 >= this.boxCounts[0] + this.boxCounts[1]) {
                    break;
                }
                if (this.fG[1] == i3) {
                    this.gameStats1[0] = 0;
                    this.gameStats1[1] = this.fx[3];
                    this.gameStats1[2] = this.fx[4];
                    f = -(328 - this.boxSize[i3][0]);
                } else if (this.fG[1] + 1 == i3) {
                    this.gameStats1[0] = 0;
                    this.gameStats1[1] = 0;
                    this.gameStats1[2] = 0;
                    f = 328 - this.boxSize[i3][0];
                } else if (this.fG[1] + 2 == i3) {
                    this.gameStats1[0] = 0;
                    this.gameStats1[1] = 0;
                    this.gameStats1[2] = 0;
                    f = (328 - this.boxSize[i3][0]) + ((328 - this.boxSize[i3 - 1][0]) / 2.0f);
                } else if (this.fG[1] + 3 == i3) {
                    this.gameStats1[0] = 0;
                    this.gameStats1[1] = 0;
                    this.gameStats1[2] = 0;
                    f = (328 - this.boxSize[i3][0]) + ((328 - this.boxSize[i3 - 1][0]) / 2.0f) + ((328 - this.boxSize[i3 - 2][0]) / 2.0f);
                } else if (this.fG[1] - 1 == i3) {
                    this.gameStats1[0] = 0;
                    this.gameStats1[1] = 0;
                    this.gameStats1[2] = 0;
                    f = -((328 - this.boxSize[i3][0]) + ((328 - this.boxSize[i3 + 1][0]) / 2.0f));
                } else if (this.fG[1] - 2 == i3) {
                    this.gameStats1[0] = 0;
                    this.gameStats1[1] = 0;
                    this.gameStats1[2] = 0;
                    f = -((328 - this.boxSize[i3][0]) + ((328 - this.boxSize[i3 + 1][0]) / 2.0f));
                } else {
                    i2 = i3 + 1;
                }
                if (i3 <= this.gB[0] + 2) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[1], this.gameStats1[0] + (((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + (((cC[this.gameStats1[0]] * 328) / 100.0f) / 2.0f)) - (dv[this.gameStats1[1]] / 2)), (520 - this.boxSize[i3][1]) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (this.boxSize[i3][0] - ((cC[this.gameStats1[0]] * 328) / 100.0f)), this.boxSize[i3][1] + dv[this.gameStats1[1]], (i3 - 2) + 17);
                    int i4 = 48;
                    int i5 = 0;
                    do {
                        int i6 = i4;
                        atexturerenderer.drawScaledImagef(this.uiTextures[6], this.gameStats1[0] + ((((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + (((286 - (i5 * 17)) * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f)) + (((((286 - (i5 * 17)) * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)) - (dv[this.gameStats1[1]] / 2)), (520.0f - ((52.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (((18.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[1]] + ((27.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f), (i6 % 10) + 14);
                        i4 = i6 / 10;
                        i5++;
                    } while (i4 > 0);
                    atexturerenderer.drawScaledImagef(this.uiTextures[6], this.gameStats1[0] + ((((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + ((252 * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f)) + ((((252 * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)) - (dv[this.gameStats1[1]] / 2)), (520.0f - ((52.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (((18.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[1]] + ((27.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f), 101);
                    int i7 = 0;
                    for (int i8 = 0; i8 < getLength(this.bs[i3 - 2]); i8++) {
                        if (this.bs[i3 - 2][cm[i8]] == 3) {
                            i7++;
                        }
                    }
                    int i9 = 3;
                    int i10 = i7;
                    while (true) {
                        atexturerenderer.drawScaledImagef(this.uiTextures[6], this.gameStats1[0] + ((((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + (((286 - (i9 * 17)) * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f)) + (((((286 - (i9 * 17)) * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)) - (dv[this.gameStats1[1]] / 2)), (520.0f - ((52.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (((18.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[1]] + ((27.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f), (i10 % 10) + 14);
                        int i11 = i10 / 10;
                        int i12 = i9 + 1;
                        if (i11 <= 0) {
                            break;
                        }
                        i9 = i12;
                        i10 = i11;
                    }
                    int i13 = 0;
                    for (int i14 = 0; i14 < getLength(this.bs[i3 - 2]); i14++) {
                        if (this.bs[i3 - 2][cm[i14]] == 3) {
                            i13++;
                        }
                    }
                    atexturerenderer.drawScaledImagef(this.uiTextures[1], this.gameStats1[0] + ((((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + ((102.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f)) + ((((102.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)) - (dv[this.gameStats1[1]] / 2)), (520.0f - ((57.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (((109.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[1]] + ((33.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f), 8);
                    atexturerenderer.drawScaledImagef(this.uiTextures[9], this.gameStats1[0] + ((((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + ((34.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f)) + ((((34.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)) - (dv[this.gameStats1[1]] / 2)), (520.0f - ((67.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (((47.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[1]] + ((47.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f), 9);
                } else if (i3 >= this.gB[0]) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[0], this.gameStats1[0] + (((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + (((cC[this.gameStats1[0]] * 328) / 100.0f) / 2.0f)) - (dv[this.gameStats1[1]] / 2)), (520 - this.boxSize[i3][1]) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (this.boxSize[i3][0] - ((cC[this.gameStats1[0]] * 328) / 100.0f)), this.boxSize[i3][1] + dv[this.gameStats1[1]], 6);
                    atexturerenderer.drawScaledImagef(this.uiTextures[1], this.gameStats1[0] + ((((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + ((14.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f)) + ((((14.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)) - (dv[this.gameStats1[1]] / 2)), (520.0f - ((166.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (((296.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[1]] + ((69.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f), 5);
                    atexturerenderer.drawScaledImagef(this.uiTextures[0], (((((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + (((328.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) - (((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) + (((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f) / 2.0f)) + this.gameStats1[0]) - (dv[this.gameStats1[1]] / 2), (520.0f - ((256.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[1]] + ((55.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f), 5);
                    atexturerenderer.drawScaledImagef(this.uiTextures[1], ((((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + ((19.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f)) + ((((19.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)) + this.gameStats1[0]) - (dv[this.gameStats1[1]] / 2), (520.0f - ((182.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (((160.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[1]] + ((33.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f), 9);
                    atexturerenderer.drawScaledImagef(this.uiTextures[1], ((((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + ((271.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f)) + ((((271.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)) + this.gameStats1[0]) - (dv[this.gameStats1[1]] / 2), (520.0f - ((150.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (((33.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[1]] + ((33.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f), 11);
                    atexturerenderer.drawScaledImagef(this.uiTextures[6], ((((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + ((231.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f)) + ((((231.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)) + this.gameStats1[0]) - (dv[this.gameStats1[2]] / 2), (520.0f - ((92.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[2]] / 2), dv[this.gameStats1[2]] + (((68.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[2]] + ((68.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f), 98);
                    int i15 = this.aU;
                    int i16 = 0;
                    do {
                        int i17 = i15;
                        atexturerenderer.drawScaledImagef(this.uiTextures[6], this.gameStats1[0] + ((((((((getWidth() / 2.0f) - (this.boxSize[i3][0] / 2.0f)) + (this.boxScale * i3)) + this.gameStats1[2]) + f) + (((250 - (i16 * 17)) * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f)) + (((((250 - (i16 * 17)) * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)) - (dv[this.gameStats1[1]] / 2)), (520.0f - ((150.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (((18.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((254.0f * ((this.boxSize[i3][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[1]] + ((27.0f * ((this.boxSize[i3][1] * 10000.0f) / 263.0f)) / 10000.0f), (i17 % 10) + 14);
                        i15 = i17 / 10;
                        i16++;
                    } while (i15 > 0);
                }
                atexturerenderer.setColor(0, 0, 0);
                atexturerenderer.setAlpha((255 - ((((this.boxSize[i3][0] * 100) / 328) * 255) / 100)) * 2);
                atexturerenderer.fillRect(((getWidth() / 2) - (this.boxSize[i3][0] / 2)) + (this.boxScale * i3) + this.gameStats1[2] + f + (((cC[this.gameStats1[0]] * 328) / 100) / 2) + this.gameStats1[0], 520 - this.boxSize[i3][1], this.boxSize[i3][0] - ((cC[this.gameStats1[0]] * 328) / 100), this.boxSize[i3][1]);
                i2 = i3 + 1;
            }
            if (!this.eE[1] && !this.eE[2]) {
                atexturerenderer.drawScaledImage(this.uiTextures[2], this.excessWidth + (861 - (dv[this.fx[5]] / 2)), 194 - (dv[this.fx[5]] / 2), dv[this.fx[5]] + 95, dv[this.fx[5]] + 95, 9);
                atexturerenderer.drawScaledImage(this.uiTextures[2], this.excessWidth + (866 - (dv[this.fx[5]] / 2)), 211 - (dv[this.fx[5]] / 2), dv[this.fx[5]] + 84, dv[this.fx[5]] + 60, 11);
                if (!this.eE[9] && !this.gu && ((isPointerDown() || isPointerUp()) && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3]))) {
                    atexturerenderer.drawScaledImage(this.uiTextures[2], this.excessWidth + 860, 193, 96, 96, ((this.blinkFrame[5] % 4) / 2) + 12);
                }
                if (this.blinkFrame[5] % 4 == 0 || this.blinkFrame[5] % 4 == 1) {
                    atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + 316, 256, 324, 260, 7);
                } else {
                    atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + 316, 256, 324, 260, 8);
                }
            }
            if (!this.eE[1] && !this.eE[2]) {
                atexturerenderer.setImageAlpha(127);
                if (this.fG[3] >= 1) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[3], (int) (49.0f + (10.0f * aMath.sin(this.blinkFrame[6] * 30))), 324, 0);
                }
                if (this.fG[3] <= this.boxCounts[1] - 2) {
                    atexturerenderer.setOrientation(1);
                    atexturerenderer.drawScaledImagef(this.uiTextures[3], ((int) (849.0f - (10.0f * aMath.sin(this.blinkFrame[6] * 30)))) + this.excessWidth, 324, 0);
                }
                atexturerenderer.setOrientation(0);
                atexturerenderer.setImageAlpha(255);
            }
        }
        if (this.eE[3]) {
            atexturerenderer.setColor(0, 159, 214);
            atexturerenderer.drawRectangle((getWidth() / 2) - this.gameStats1[4], 0 - this.eZ, this.gameStats1[4] + this.gameStats1[4], getHeight());
            int i18 = 0;
            if (this.fR[0] == 0) {
                i18 = cu[this.blinkFrame[7]];
            } else if (this.fR[0] == 1) {
                i18 = cv[this.blinkFrame[7]];
            } else {
                int i19 = this.fR[0];
            }
            if (!this.eE[4]) {
                i = i18;
            } else if (this.regionState == 0) {
                if (this.blinkFrame[7] == 2 || this.blinkFrame[7] == 3 || this.blinkFrame[7] == 6 || this.blinkFrame[7] == 7 || this.blinkFrame[7] == 10 || this.blinkFrame[7] == 11 || this.blinkFrame[7] == 14 || this.blinkFrame[7] == 15 || this.blinkFrame[7] == 18 || this.blinkFrame[7] == 19) {
                    i = 308;
                    if (this.blinkFrame[7] >= 2) {
                        if (this.regionState == 0) {
                            if (this.blinkFrame[7] - 2 == 0) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) - 28, -1, 504, 504, 0);
                            } else if (this.blinkFrame[7] - 2 == 1) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 35, 62, 378, 378, 0);
                            } else if (this.blinkFrame[7] - 2 == 2) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 98, 125, 252, 252, 0);
                            } else if (this.blinkFrame[7] - 2 >= 3) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 161, 188, 126, 126, 0);
                            }
                        } else if (this.regionState == 1) {
                            if (this.blinkFrame[7] - 2 == 0) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) - 244, -1, 980, 504, 0);
                            } else if (this.blinkFrame[7] - 2 == 1) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) - 122, 62, 735, 378, 0);
                            } else if (this.blinkFrame[7] - 2 == 2) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 1, 125, 490, 252, 0);
                            } else if (this.blinkFrame[7] - 2 >= 3) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 123, 188, 245, 126, 0);
                            }
                        }
                    }
                    if (this.blinkFrame[7] >= 6) {
                        if (this.regionState == 0) {
                            if (this.blinkFrame[7] - 6 == 0) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 100, -1, 504, 504, 1);
                            } else if (this.blinkFrame[7] - 6 == 1) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 163, 62, 378, 378, 1);
                            } else if (this.blinkFrame[7] - 6 == 2) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 226, 125, 252, 252, 1);
                            } else if (this.blinkFrame[7] - 6 >= 3) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 289, 188, 126, 126, 1);
                            }
                        } else if (this.regionState == 1) {
                            if (this.blinkFrame[7] - 6 == 0) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) - 191, -1, 1500, 504, 1);
                            } else if (this.blinkFrame[7] - 6 == 1) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) - 4, 62, 1125, 378, 1);
                            } else if (this.blinkFrame[7] - 6 == 2) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 184, 125, 750, 252, 1);
                            } else if (this.blinkFrame[7] - 6 >= 3) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 371, 188, 375, 126, 1);
                            }
                        }
                    }
                    if (this.blinkFrame[7] >= 10) {
                        if (this.regionState == 0) {
                            if (this.blinkFrame[7] - 10 == 0) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 228, -1, 504, 504, 2);
                            } else if (this.blinkFrame[7] - 10 == 1) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 291, 62, 378, 378, 2);
                            } else if (this.blinkFrame[7] - 10 == 2) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 354, 125, 252, 252, 2);
                            } else if (this.blinkFrame[7] - 10 >= 3) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 417, 188, 126, 126, 2);
                            }
                        } else if (this.regionState == 1) {
                            if (this.blinkFrame[7] - 10 == 0) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 683, -1, 176, 504, 2);
                            } else if (this.blinkFrame[7] - 10 == 1) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 705, 62, 132, 378, 2);
                            } else if (this.blinkFrame[7] - 10 == 2) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 727, 125, 88, 252, 2);
                            } else if (this.blinkFrame[7] - 10 >= 3) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 749, 188, 44, 126, 2);
                            }
                        }
                    }
                    if (this.blinkFrame[7] >= 14) {
                        if (this.regionState == 0) {
                            if (this.blinkFrame[7] - 14 == 0) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 356, -1, 504, 504, 3);
                            } else if (this.blinkFrame[7] - 14 == 1) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 419, 62, 378, 378, 3);
                            } else if (this.blinkFrame[7] - 14 == 2) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 482, 125, 252, 252, 3);
                            } else if (this.blinkFrame[7] - 14 >= 3) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 545, 188, 126, 126, 3);
                            }
                        } else if (this.regionState == 1) {
                            if (this.blinkFrame[7] - 14 == 0) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 727, -1, 176, 504, 3);
                            } else if (this.blinkFrame[7] - 14 == 1) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 749, 62, 132, 378, 3);
                            } else if (this.blinkFrame[7] - 14 == 2) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 771, 125, 88, 252, 3);
                            } else if (this.blinkFrame[7] - 14 >= 3) {
                                atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 793, 188, 44, 126, 3);
                            }
                        }
                    }
                    if (this.blinkFrame[7] >= 18 && this.regionState == 0) {
                        if (this.blinkFrame[7] - 18 != 0) {
                            atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 484, -1, 504, 504, 4);
                        } else if (this.blinkFrame[7] - 18 == 1) {
                            atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 547, 62, 378, 378, 4);
                        } else if (this.blinkFrame[7] - 18 == 2) {
                            atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 610, 125, 252, 252, 4);
                        } else if (this.blinkFrame[7] - 18 >= 3) {
                            atexturerenderer.drawScaledImage(this.uiTextures[5], (this.excessWidth / 2) + 673, 188, 126, 126, 4);
                        }
                    }
                }
                i = 312;
                if (this.blinkFrame[7] >= 2) {
                }
                if (this.blinkFrame[7] >= 6) {
                }
                if (this.blinkFrame[7] >= 10) {
                }
                if (this.blinkFrame[7] >= 14) {
                }
                if (this.blinkFrame[7] >= 18) {
                    if (this.blinkFrame[7] - 18 != 0) {
                    }
                }
            } else {
                if (this.regionState == 1 && (this.blinkFrame[7] == 2 || this.blinkFrame[7] == 3 || this.blinkFrame[7] == 6 || this.blinkFrame[7] == 7 || this.blinkFrame[7] == 10 || this.blinkFrame[7] == 11 || this.blinkFrame[7] == 14 || this.blinkFrame[7] == 15)) {
                    i = 308;
                    if (this.blinkFrame[7] >= 2) {
                    }
                    if (this.blinkFrame[7] >= 6) {
                    }
                    if (this.blinkFrame[7] >= 10) {
                    }
                    if (this.blinkFrame[7] >= 14) {
                    }
                    if (this.blinkFrame[7] >= 18) {
                    }
                }
                i = 312;
                if (this.blinkFrame[7] >= 2) {
                }
                if (this.blinkFrame[7] >= 6) {
                }
                if (this.blinkFrame[7] >= 10) {
                }
                if (this.blinkFrame[7] >= 14) {
                }
                if (this.blinkFrame[7] >= 18) {
                }
            }
            atexturerenderer.drawScaledImage(this.uiTextures[4], this.excessWidth + 659, this.eZ + i + 55, 355, 355, 0);
            if (!this.eE[1] && (this.blinkFrame[1] == 1 || this.blinkFrame[1] == 2 || this.blinkFrame[1] == 4 || this.blinkFrame[1] == 5)) {
                atexturerenderer.drawScaledImage(this.uiTextures[4], 659, this.eZ + i + 55, 355, 191, 2);
            }
        }
        if (this.ee) {
            atexturerenderer.setColor(0, 0, 0);
            atexturerenderer.setAlpha(178);
            atexturerenderer.drawRectangle(0, -this.eZ, getWidth(), getHeight());
            atexturerenderer.drawScaledImagef(this.settingsMenuTexture[1], (this.excessWidth / 2) + 248, 84, 0);
            atexturerenderer.drawScaledImagef(this.settingsMenuTexture[1], (this.excessWidth / 2) + 248 + 131, 113, 16);
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 404) - (dv[this.fC[5]] / 2), 48 - (dv[this.fC[5]] / 2), dv[this.fC[5]] + 96, dv[this.fC[5]] + 96, 21);
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 40) - (dv[this.fC[6]] / 2), 464 - (dv[this.fC[6]] / 2), dv[this.fC[6]] + 384, dv[this.fC[6]] + 72, 6);
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 288) + 65) - (dv[this.fC[6]] / 2), 472 - (dv[this.fC[6]] / 2), dv[this.fC[6]] + 254, dv[this.fC[6]] + 55, 9);
            //if (!aFacebook.getInstance().f()) {
            //    if (aFacebook.getInstance().e()) {
            //        atexturerenderer.a(this.af[1], ((this.w / 2) + 535) - (dv[this.fC[2]] / 2), 299 - (dv[this.fC[2]] / 2), dv[this.fC[2]] + 106, dv[this.fC[2]] + 42, 20);
            //    } else {
            //        atexturerenderer.a(this.af[1], ((this.w / 2) + 535) - (dv[this.fC[2]] / 2), 299 - (dv[this.fC[2]] / 2), dv[this.fC[2]] + 106, dv[this.fC[2]] + 42, 19);
            //    }
            //}
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], ((this.excessWidth / 2) + 500) - (dv[this.fC[12]] / 2), 199 - (dv[this.fC[12]] / 2), dv[this.fC[12]] + 172, dv[this.fC[12]] + 68, 3);
            if (aSound.getInstance().isMutedBGM()) {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 252) - (dv[this.fC[3]] / 2), 373 - (dv[this.fC[3]] / 2), dv[this.fC[3]] + 68, dv[this.fC[3]] + 68, 5);
            } else {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 252) - (dv[this.fC[3]] / 2), 373 - (dv[this.fC[3]] / 2), dv[this.fC[3]] + 68, dv[this.fC[3]] + 68, 4);
            }
            if (aSound.getInstance().isMutedSE()) {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 356) - (dv[this.fC[4]] / 2), 373 - (dv[this.fC[4]] / 2), dv[this.fC[4]] + 68, dv[this.fC[4]] + 68, 8);
            } else {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 356) - (dv[this.fC[4]] / 2), 373 - (dv[this.fC[4]] / 2), dv[this.fC[4]] + 68, dv[this.fC[4]] + 68, 7);
            }
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (((this.excessWidth / 2) + 248) + 40) - (dv[this.fC[7]] / 2), 197 - (dv[this.fC[7]] / 2), dv[this.fC[7]] + 170, dv[this.fC[7]] + 72, 1);
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], ((this.excessWidth / 2) + 298) - (dv[this.fC[7]] / 2), 205 - (dv[this.fC[7]] / 2), dv[this.fC[7]] + 150, dv[this.fC[7]] + 55, 13);
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], ((this.excessWidth / 2) + 288) - (dv[this.fC[8]] / 2), 284 - (dv[this.fC[8]] / 2), dv[this.fC[8]] + 170, dv[this.fC[8]] + 72, 1);
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], ((this.excessWidth / 2) + 298) - (dv[this.fC[8]] / 2), 292 - (dv[this.fC[8]] / 2), dv[this.fC[8]] + 150, dv[this.fC[8]] + 55, 11);
            if (this.bj != 0) {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], ((this.excessWidth / 2) + 288) - (dv[this.fC[9]] / 2), 371 - (dv[this.fC[9]] / 2), dv[this.fC[9]] + 168, dv[this.fC[9]] + 72, 1);
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], ((this.excessWidth / 2) + 298) - (dv[this.fC[9]] / 2), 379 - (dv[this.fC[9]] / 2), dv[this.fC[9]] + 150, dv[this.fC[9]] + 55, 12);
            }
            if (!this.ef) {
                if (isPointerDown() && isTouching(this.fB[7][0], this.fB[7][1], this.fB[7][2], this.fB[7][3])) {
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (this.excessWidth / 2) + 288, 197, 170, 72, ((this.blinkFrame[5] % 4) / 2) + 14);
                } else if (isPointerDown() && isTouching(this.fB[8][0], this.fB[8][1], this.fB[8][2], this.fB[8][3])) {
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (this.excessWidth / 2) + 288, 284, 170, 72, ((this.blinkFrame[5] % 4) / 2) + 14);
                } else if (isPointerDown() && isTouching(this.fB[9][0], this.fB[9][1], this.fB[9][2], this.fB[9][3]) && this.bj != 0) {
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (this.excessWidth / 2) + 288, 371, 170, 72, ((this.blinkFrame[5] % 4) / 2) + 14);
                } else if (isPointerDown() && isTouching(this.fB[6][0], this.fB[6][1], this.fB[6][2], this.fB[6][3])) {
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (this.excessWidth / 2) + 288, 464, 384, 72, ((this.blinkFrame[5] % 4) / 2) + 17);
                }
            }
            if (this.ef) {
                atexturerenderer.drawScaledImage(this.popupTexture, (this.excessWidth / 2) + 135, 250, 690, 229, 0);
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[10], getWidth() / 2, 295, 1);
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (251 - (dv[this.fC[10]] / 2)), 382 - (dv[this.fC[10]] / 2), dv[this.fC[10]] + 168, dv[this.fC[10]] + 72, 0);
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (541 - (dv[this.fC[11]] / 2)), 382 - (dv[this.fC[11]] / 2), dv[this.fC[11]] + 168, dv[this.fC[11]] + 72, 0);
                atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (260 - (dv[this.fC[10]] / 2)), 390 - (dv[this.fC[10]] / 2), dv[this.fC[10]] + 150, dv[this.fC[10]] + 55, 4);
                atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (550 - (dv[this.fC[11]] / 2)), 390 - (dv[this.fC[11]] / 2), dv[this.fC[11]] + 150, dv[this.fC[11]] + 55, 5);
                if (isPointerDown() && isTouching(this.fB[10][0], this.fB[10][1], this.fB[10][2], this.fB[10][3]) && !this.eb && !this.gu) {
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 250, 381, 168, 72, ((this.blinkFrame[5] % 4) / 2) + 1);
                } else if (isPointerDown() && isTouching(this.fB[11][0], this.fB[11][1], this.fB[11][2], this.fB[11][3]) && !this.eb && !this.gu) {
                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 540, 381, 168, 72, ((this.blinkFrame[5] % 4) / 2) + 1);
                }
            }
            if (isPointerDown() && isTouching(this.fB[5][0], this.fB[5][1], this.fB[5][2], this.fB[5][3])) {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[1], (this.excessWidth / 2) + 248 + 404, 48, 96, 96, ((this.blinkFrame[5] % 4) / 2) + 22);
            }
        }
    }

    void treasureDraw(aTextureRenderer atexturerenderer) {
        int i;
        int i2 = 0;
        atexturerenderer.setColor(0, 0, 0);
        atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
        atexturerenderer.drawScaledImage(this.uiTextures[6], 0, 0, getWidth(), 640, 0);
        for (int i3 = 0; i3 < this.boxCounts[1]; i3++) {
            atexturerenderer.drawScaledImagef(this.uiTextures[8], this.gameStats1[0] + 179 + (this.boxScale * i3) + (this.excessWidth / 2), 68, 0);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[7], this.gameStats1[0] + 179 + (this.fq[2] * this.boxScale) + (this.excessWidth / 2), 68, 0);
        int b = this.textTextures[3].isLoaded() ? aTexture.measureText(this.treasure3Text[this.fq[2]][0], 30) + 30 + aTexture.measureText(String.format("%d", this.bO[this.eQ][this.fq[2]]), 30) + aTexture.measureText(this.treasure2Text[8], 30) + aTexture.measureText(this.treasure2Text[7], 30) : 0;
        atexturerenderer.setColor(255, 255, 255);
        if (this.textTextures[3].isLoaded()) {
            atexturerenderer.drawScaledImage(this.textTextures[0], ((getWidth() / 2) - (b / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 75, 0);
            int ah = ((getWidth() / 2) - (b / 2)) + aTexture.measureText(this.treasure3Text[this.fq[2]][0], 30) + 30;
            atexturerenderer.setColor(255, 255, 0);
            atexturerenderer.drawScaledImage(this.textTextures[3], ah + this.gameStats1[0] + (this.fq[2] * this.boxScale), 75, 0);
        } else {
            atexturerenderer.drawScaledImage(this.textTextures[0], (getWidth() / 2) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 75, 1);
        }
        atexturerenderer.setColor(255, 255, 255);
        atexturerenderer.drawScaledImage(this.textTextures[1], (getWidth() / 2) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 232, 1);
        atexturerenderer.drawScaledImage(this.textTextures[2], (getWidth() / 2) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 268, 1);
        for (int i4 = 0; i4 < getLength(cy); i4++) {
            for (int i5 = 0; i5 < cy[i4]; i5++) {
                if (this.bs[this.eQ][cz[i4][i5]] == 0) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[6], ((i5 % 4) * 133) + 224 + this.gameStats1[0] + (this.boxScale * i4) + (this.excessWidth / 2), ((i5 / 4) * 90) + 325, 1);
                } else if (this.bs[this.eQ][cz[i4][i5]] == 1) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[6], ((i5 % 4) * 133) + 224 + this.gameStats1[0] + (this.boxScale * i4) + (this.excessWidth / 2), ((i5 / 4) * 90) + 325, 2);
                } else if (this.bs[this.eQ][cz[i4][i5]] == 2) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[6], ((i5 % 4) * 133) + 224 + this.gameStats1[0] + (this.boxScale * i4) + (this.excessWidth / 2), ((i5 / 4) * 90) + 325, 3);
                } else if (this.bs[this.eQ][cz[i4][i5]] == 3) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[6], ((i5 % 4) * 133) + 224 + this.gameStats1[0] + (this.boxScale * i4) + (this.excessWidth / 2), ((i5 / 4) * 90) + 325, 4);
                }
            }
        }
        for (int i6 = 0; i6 < 8; i6++) {
            if (i6 == this.fq[3]) {
                if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[6], ((i6 % 4) * 133) + 217 + this.gameStats1[0] + (this.fq[2] * this.boxScale) + (this.excessWidth / 2), ((i6 / 4) * 90) + 319, 5);
                } else {
                    atexturerenderer.drawScaledImagef(this.uiTextures[6], ((i6 % 4) * 133) + 217 + this.gameStats1[0] + (this.fq[2] * this.boxScale) + (this.excessWidth / 2), ((i6 / 4) * 90) + 319, 6);
                }
            }
        }
        if (this.regionState == 0) {
            if (this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] == 0) {
                int b2 = aTexture.measureText(this.treasure2Text[3], 30) + 15 + aTexture.measureText(this.treasure1Text[48], 30);
                atexturerenderer.setColor(255, 255, 0);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 0], ((getWidth() / 2) - (b2 / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                int ah2 = ((getWidth() / 2) - (b2 / 2)) + aTexture.measureText(this.treasure2Text[3], 30) + 15;
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 1], ah2 + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                if (this.fq[2] != 10) {
                    atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 2], ((getWidth() / 2) - ((aTexture.measureText(this.stageNameText[cz[this.fq[2]][this.fq[3]]], 30) + aTexture.measureText(this.treasure2Text[9], 30)) / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 541, 0);
                }
            } else if (this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] == 1) {
                int b3 = aTexture.measureText(this.treasure2Text[3], 30) + 15 + aTexture.measureText(this.treasure2Text[0], 30) + aTexture.measureText(this.treasure1Text[cz[this.fq[2]][this.fq[3]]], 30);
                atexturerenderer.setColor(255, 255, 0);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 0], ((getWidth() / 2) - (b3 / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                int ah3 = ((getWidth() / 2) - (b3 / 2)) + aTexture.measureText(this.treasure2Text[3], 30) + 15;
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 1], ah3 + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 2], ((getWidth() / 2) - ((aTexture.measureText(this.stageNameText[cz[this.fq[2]][this.fq[3]]], 30) + aTexture.measureText(this.treasure2Text[4], 30)) / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 541, 0);
            } else if (this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] == 2) {
                int b4 = aTexture.measureText(this.treasure2Text[3], 30) + 15 + aTexture.measureText(this.treasure2Text[1], 30) + aTexture.measureText(this.treasure1Text[cz[this.fq[2]][this.fq[3]]], 30);
                atexturerenderer.setColor(255, 255, 0);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 0], ((getWidth() / 2) - (b4 / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                int ah4 = ((getWidth() / 2) - (b4 / 2)) + aTexture.measureText(this.treasure2Text[3], 30) + 15;
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 1], ah4 + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 2], ((getWidth() / 2) - ((aTexture.measureText(this.stageNameText[cz[this.fq[2]][this.fq[3]]], 30) + aTexture.measureText(this.treasure2Text[4], 30)) / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 541, 0);
            } else if (this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] == 3) {
                int b5 = aTexture.measureText(this.treasure2Text[3], 30) + 15 + aTexture.measureText(this.treasure2Text[2], 30) + aTexture.measureText(this.treasure1Text[cz[this.fq[2]][this.fq[3]]], 30);
                atexturerenderer.setColor(255, 255, 0);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 0], ((getWidth() / 2) - (b5 / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                int ah5 = ((getWidth() / 2) - (b5 / 2)) + aTexture.measureText(this.treasure2Text[3], 30) + 15;
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 1], ah5 + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 2], ((getWidth() / 2) - ((aTexture.measureText(this.stageNameText[cz[this.fq[2]][this.fq[3]]], 30) + aTexture.measureText(this.treasure2Text[4], 30)) / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 541, 0);
            }
        } else if (this.regionState == 1) {
            if (this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] == 0) {
                int b6 = aTexture.measureText(this.treasure2Text[3], 30) + aTexture.measureText(String.format(" ", new Object[0]), 30) + aTexture.measureText(this.treasure1Text[48], 30);
                atexturerenderer.setColor(255, 255, 0);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 0], ((getWidth() / 2) - (b6 / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                int ah6 = ((getWidth() / 2) - (b6 / 2)) + aTexture.measureText(this.treasure2Text[3], 30) + aTexture.measureText(String.format(" ", new Object[0]), 30);
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 1], ah6 + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                if (this.fq[2] != 10) {
                    atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 2], ((getWidth() / 2) - (aTexture.measureText(String.format("%s %s", this.treasure2Text[4], this.stageNameText[cz[this.fq[2]][this.fq[3]] + 49]), 30) / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 541, 0);
                }
            } else if (this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] == 1) {
                int b7 = aTexture.measureText(this.treasure2Text[10], 30) + aTexture.measureText(String.format(" ", new Object[0]), 30) + aTexture.measureText(this.treasure2Text[0], 30) + aTexture.measureText(String.format(" ", new Object[0]), 30) + aTexture.measureText(this.treasure1Text[cz[this.fq[2]][this.fq[3]]], 30);
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 0], ((getWidth() / 2) - (b7 / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                int ah7 = ((getWidth() / 2) - (b7 / 2)) + aTexture.measureText(this.treasure2Text[10], 30) + aTexture.measureText(String.format(" ", new Object[0]), 30);
                atexturerenderer.setColor(255, 255, 0);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 1], ah7 + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 2], ((getWidth() / 2) - (aTexture.measureText(String.format("%s %s", this.treasure2Text[4], this.stageNameText[cz[this.fq[2]][this.fq[3]] + 49]), 30) / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 541, 0);
            } else if (this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] == 2) {
                int b8 = aTexture.measureText(this.treasure2Text[10], 30) + aTexture.measureText(String.format(" ", new Object[0]), 30) + aTexture.measureText(this.treasure2Text[1], 30) + aTexture.measureText(String.format(" ", new Object[0]), 30) + aTexture.measureText(this.treasure1Text[cz[this.fq[2]][this.fq[3]]], 30);
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 0], ((getWidth() / 2) - (b8 / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                int ah8 = ((getWidth() / 2) - (b8 / 2)) + aTexture.measureText(this.treasure2Text[10], 30) + aTexture.measureText(String.format(" ", new Object[0]), 30);
                atexturerenderer.setColor(255, 255, 0);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 1], ah8 + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 2], ((getWidth() / 2) - (aTexture.measureText(String.format("%s %s", this.treasure2Text[4], this.stageNameText[cz[this.fq[2]][this.fq[3]] + 49]), 30) / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 541, 0);
            } else if (this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] == 3) {
                int b9 = aTexture.measureText(this.treasure2Text[10], 30) + aTexture.measureText(String.format(" ", new Object[0]), 30) + aTexture.measureText(this.treasure2Text[2], 30) + aTexture.measureText(String.format(" ", new Object[0]), 30) + aTexture.measureText(this.treasure1Text[cz[this.fq[2]][this.fq[3]]], 30);
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 0], ((getWidth() / 2) - (b9 / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                int ah9 = ((getWidth() / 2) - (b9 / 2)) + aTexture.measureText(this.treasure2Text[10], 30) + aTexture.measureText(String.format(" ", new Object[0]), 30);
                atexturerenderer.setColor(255, 255, 0);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 1], ah9 + this.gameStats1[0] + (this.fq[2] * this.boxScale), 505, 0);
                atexturerenderer.setColor(255, 255, 255);
                atexturerenderer.drawScaledImage(this.textTextures[(this.fq[3] * 3) + 4 + 2], ((getWidth() / 2) - (aTexture.measureText(String.format("%s %s", this.treasure2Text[4], this.stageNameText[cz[this.fq[2]][this.fq[3]] + 49]), 30) / 2)) + this.gameStats1[0] + (this.fq[2] * this.boxScale), 541, 0);
            }
        }
        if (this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] != 0 ? this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] != 1 ? this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] != 2 ? this.bs[this.eQ][cz[this.fq[2]][this.fq[3]]] != 3 || this.regionState != 0 : this.regionState == 0 : this.regionState == 0 : this.regionState == 0) {
        }
        atexturerenderer.setImageAlpha(127);
        if (this.fq[2] > 0) {
            atexturerenderer.drawScaledImagef(this.uiTextures[0], (int) (49.0f + (10.0f * aMath.sin(this.blinkFrame[4] * 30))), 171, 8);
        }
        atexturerenderer.setOrientation(1);
        if (this.fq[2] < this.boxCounts[1] - 1) {
            atexturerenderer.drawScaledImagef(this.uiTextures[0], ((int) (849.0f - (10.0f * aMath.sin(this.blinkFrame[4] * 30)))) + this.excessWidth, 171, 8);
        }
        atexturerenderer.setOrientation(0);
        atexturerenderer.setOrientation(0);
        atexturerenderer.setImageAlpha(255);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], ((getWidth() / 2) - 572) - this.fP, 0, 572, 637, 0);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], (getWidth() / 2) + this.fP, 0, 572, 637, 1);
        if (this.fR[0] == 0) {
            i = cu[this.blinkFrame[0]];
        } else if (this.fR[0] == 1) {
            i = cv[this.blinkFrame[0]];
        } else {
            int i7 = this.fR[0];
            i = 0;
        }
        atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i, 355, 355, 0);
        if (this.blinkFrame[1] == 1 || this.blinkFrame[1] == 2 || this.blinkFrame[1] == 4 || this.blinkFrame[1] == 5) {
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i, 355, 191, 2);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[2], 0, -42, 10);
        atexturerenderer.drawScaledImagef(this.uiTextures[2], 0, 638, 10);
        atexturerenderer.drawScaledImagef(this.uiTextures[2], 0, 0, 0);
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImagef(this.uiTextures[2], 0, 585, 0);
        atexturerenderer.setOrientation(0);
        if (this.gm[0] < 297) {
            if (this.previousScreen == 0) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 1);
            } else {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 8);
            }
        }
        if (this.gm[1] < 297) {
            atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[1], 3, 4);
        }
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.buttonCoordinates1[5][0] - (dv[this.fx[5]] / 2), this.buttonCoordinates1[5][1] - (dv[this.fx[5]] / 2), this.buttonCoordinates1[5][2] + dv[this.fx[5]], this.buttonCoordinates1[5][3] + dv[this.fx[5]], 9);
        atexturerenderer.drawScaledImage(this.uiTextures[0], (this.buttonCoordinates1[5][0] + 4) - (dv[this.fx[5]] / 2), (this.buttonCoordinates1[5][1] + 17) - (dv[this.fx[5]] / 2), dv[this.fx[5]] + 84, dv[this.fx[5]] + 60, 3);
        if (!this.eE[0] && !this.eE[1] && !this.eE[2] && !this.eE[13] && !this.eb && this.eE[10]) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], 3, 540, 96, 96, ((this.blinkFrame[3] % 4) / 2) + 12);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 0, 11);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 570, 17, 10);
        int i8 = this.aY;
        int i9 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i9 * 29)) + this.excessWidth, 6, i8 % 10);
            i8 /= 10;
            i9++;
        } while (i8 > 0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], (633 - (dv[this.fx[15]] / 2)) + this.excessWidth, 8 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 62, dv[this.fx[15]] + 36, 23);
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 585, 11);
        atexturerenderer.setOrientation(0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], (688 - (dv[this.fx[14]] / 2)) + this.excessWidth, 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
        if (this.bf >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], (733 - (dv[this.fx[14]] / 2)) + this.excessWidth, 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[0], this.excessWidth + 610, 607, 24);
        int i10 = this.catfood;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i2 * 29)) + this.excessWidth, 592, i10 % 10);
            i10 /= 10;
            i2++;
        } while (i10 > 0);
    }

    boolean legendProcess() {
        int[] iArr = this.blinkFrame;
        iArr[0] = iArr[0] + 1;
        int[] iArr2 = this.blinkFrame;
        iArr2[4] = iArr2[4] + 1;
        if (this.blinkFrame[1] == 0) {
            if (this.blinkFrame[0] >= this.legendAnims[0].b() * 4) {
                this.blinkFrame[0] = 0;
                this.blinkFrame[1] = 1;
            }
        } else if (this.blinkFrame[1] == 1 && this.blinkFrame[0] >= this.legendAnims[1].b()) {
            this.blinkFrame[0] = 0;
            this.blinkFrame[1] = 0;
        }
        if (!this.eb) {
            int[] iArr3 = this.blinkFrame;
            iArr3[2] = iArr3[2] + 1;
            if (this.blinkFrame[2] == 1) {
                aSound.getInstance().play(SoundType.POPUP);
            }
            if (this.blinkFrame[2] > getLength(eO) - 1) {
                this.blinkFrame[2] = getLength(eO) - 1;
                int[] iArr4 = this.blinkFrame;
                iArr4[3] = iArr4[3] + 1;
            }
            if (this.blinkFrame[3] >= 10) {
                this.blinkFrame[3] = 10;
                if (this.fx[0] >= 1) {
                    int[] iArr5 = this.fx;
                    iArr5[0] = iArr5[0] + 1;
                    if (this.fx[0] > getLength(dv) - 1) {
                        this.fx[0] = 0;
                        screenTransition();
                        this.eb = true;
                        this.ed = 0;
                        return false;
                    }
                } else {
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                        this.gp[0] = false;
                    } else if (!this.gp[0]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[0] = true;
                    }
                    if (isPointerUp() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr6 = this.fx;
                        iArr6[0] = iArr6[0] + 1;
                    }
                }
            }
        }
        return true;
    }

    void q(aTextureRenderer atexturerenderer) {
        int i;
        int i2;
        int i3;
        int i4;
        int i5;
        switch (getScene2Type()) {
            case MAIN:
                if (this.bB[6] == 1) {
                    atexturerenderer.setColor(0, 0, 0, 204);
                    atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                    if (this.gV[1] >= 10) {
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 388 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                        atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 396 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                        if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 387, 168, 72, ((this.gV[2] % 4) / 2) + 1);
                        }
                    }
                    atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), (320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                    if (this.gV[0] >= getLength(eO) - 1) {
                        int i6 = 0;
                        for (int i7 = 0; i7 < 4; i7++) {
                            if (this.tutorialTextTextures[i7].isLoaded()) {
                                i6 = -(i7 - 1);
                            }
                        }
                        for (int i8 = 0; i8 < 4; i8++) {
                            if (i8 == 0) {
                                atexturerenderer.setColor(255, 255, 0);
                            } else {
                                atexturerenderer.setColor(255, 255, 255);
                            }
                            if (this.tutorialTextTextures[i8].isLoaded()) {
                                atexturerenderer.drawScaledImage(this.tutorialTextTextures[i8], getWidth() / 2, ((i6 * 18) + 287) - 30, 1);
                            }
                            i6 += 2;
                        }
                        return;
                    }
                    return;
                } else if (this.bB[7] != 1) {
                    if (this.bB[8] == 1) {
                        atexturerenderer.setColor(0, 0, 0, 204);
                        atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                        atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), (320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                        if (this.gV[0] >= getLength(eO) - 1) {
                            int i9 = 0;
                            for (int i10 = 0; i10 < 4; i10++) {
                                if (this.tutorialTextTextures[i10].isLoaded()) {
                                    i9 = -(i10 - 1);
                                }
                            }
                            for (int i11 = 0; i11 < 4; i11++) {
                                if (i11 == 0) {
                                    atexturerenderer.setColor(255, 255, 0);
                                } else {
                                    atexturerenderer.setColor(255, 255, 255);
                                }
                                if (this.tutorialTextTextures[i11].isLoaded()) {
                                    atexturerenderer.drawScaledImage(this.tutorialTextTextures[i11], getWidth() / 2, ((i9 * 18) + 287) - 30, 1);
                                }
                                i9 += 2;
                            }
                        }
                        if (this.gV[1] >= 10) {
                            atexturerenderer.drawScaledImage(this.arrowTexture, this.excessWidth + 667, (int) (470.0f + (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 388 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                            atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 396 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                            if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 387, 168, 72, ((this.gV[2] % 4) / 2) + 1);
                            }
                        }
                        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (688 - (dv[this.fx[14]] / 2)), 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
                        if (this.bf >= 1) {
                            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (733 - (dv[this.fx[14]] / 2)), 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
                            return;
                        }
                        return;
                    }
                    return;
                } else {
                    atexturerenderer.setColor(0, 0, 0, 204);
                    atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                    if (this.gV[1] >= 10) {
                        atexturerenderer.drawScaledImage(this.arrowTexture, getWidth() - 96, (int) (392.0f + (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 388 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                        atexturerenderer.drawScaledImage(this.uiTextures[0], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 396 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                        if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 387, 168, 72, ((this.gV[2] % 4) / 2) + 1);
                        }
                    }
                    atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), (320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                    if (this.gV[0] >= getLength(eO) - 1) {
                        int i12 = 0;
                        for (int i13 = 0; i13 < 4; i13++) {
                            if (this.tutorialTextTextures[i13].isLoaded()) {
                                i12 = -(i13 - 1);
                            }
                        }
                        for (int i14 = 0; i14 < 4; i14++) {
                            if (i14 == 0) {
                                atexturerenderer.setColor(255, 255, 0);
                            } else {
                                atexturerenderer.setColor(255, 255, 255);
                            }
                            if (this.tutorialTextTextures[i14].isLoaded()) {
                                atexturerenderer.drawScaledImage(this.tutorialTextTextures[i14], getWidth() / 2, ((i12 * 18) + 287) - 30, 1);
                            }
                            i12 += 2;
                        }
                    }
                    if (this.gN) {
                        return;
                    }
                    int i15 = 0;
                    while (true) {
                        int i16 = i15;
                        if (i16 >= 6) {
                            return;
                        }
                        atexturerenderer.drawScaledImage(this.uiTextures[7], this.excessWidth + (((i16 * 88) + 447) - (dv[this.eK[i16]] / 2)), 500 - (dv[this.eK[i16]] / 2), dv[this.eK[i16]] + 58, dv[this.eK[i16]] + 58, i16 + 50);
                        atexturerenderer.setImageAlpha(63);
                        atexturerenderer.drawScaledImage(this.uiTextures[7], this.excessWidth + (i16 * 88) + 436, 559, 80, 22, 63);
                        atexturerenderer.setImageAlpha(255);
                        if (this.eM[i16]) {
                            i3 = 1;
                            i4 = 10;
                            i5 = this.bA[i16] - 1;
                        } else {
                            i3 = 1;
                            i4 = 10;
                            i5 = this.bA[i16];
                        }
                        while (i4 <= i5) {
                            i4 *= 10;
                            i3--;
                        }
                        atexturerenderer.drawScaledImagef(this.uiTextures[13], ((((i16 * 88) + 476) + ((i3 - 2) * 6)) - 7) + this.excessWidth, 561, 102);
                        while (true) {
                            i4 /= 10;
                            if (i4 < 1) {
                                break;
                            }
                            atexturerenderer.drawScaledImagef(this.uiTextures[13], ((((i16 * 88) + 476) + (i3 * 6)) - 7) + this.excessWidth, 561, ((i5 / i4) % 10) + 57);
                            i3 += 2;
                        }
                        i15 = i16 + 1;
                    }
                }
            case BATTLE:
                if (this.hH == 1) {
                    atexturerenderer.setColor(0, 0, 0, 204);
                    atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                    if (this.gW == 1) {
                        this.gameStats1[3] = 0;
                        if (this.battleData[25] % 4 == 1 || this.battleData[25] % 4 == 2) {
                            this.gameStats1[3] = 68;
                        }
                        this.gameStats1[1] = getWidth() - 4;
                        this.gameStats1[1] -= 30;
                        atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, this.gameStats1[3] + 11);
                        this.gameStats1[1] -= 29;
                        int i17 = this.battleData[9] / 100;
                        do {
                            int i18 = i17;
                            atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, this.gameStats1[3] + (i18 % 10));
                            i17 = i18 / 10;
                            this.gameStats1[1] -= 29;
                        } while (i17 > 0);
                        atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 29, 42, this.gameStats1[3] + 10);
                        this.gameStats1[1] -= 28;
                        int i19 = this.battleData[10] / 100;
                        do {
                            int i20 = i19;
                            atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, this.gameStats1[3] + (i20 % 10));
                            i19 = i20 / 10;
                            this.gameStats1[1] -= 29;
                        } while (i19 > 0);
                    }
                    if (this.gW == 0) {
                        int i21 = 0;
                        while (true) {
                            int i22 = i21;
                            if (i22 < 5) {
                                atexturerenderer.drawScaledImage(this.uiTextures[i22 + 5], (this.excessWidth / 2) + (fb[i22] - (dv[this.fy[i22]] / 2)), ((this.eI[0] + 544) + this.eZ) - (dv[this.fy[i22]] / 2), dv[this.fy[i22]] + 110, dv[this.fy[i22]] + 85, 0);
                                if (this.slotCatIDs[i22] != -1) {
                                    int i23 = this.battleData[10] >= this.unitStats[this.slotCatIDs[i22]][this.slotFormIDs[i22]][6] + (((this.unitStats[this.slotCatIDs[i22]][this.slotFormIDs[i22]][6] * this.eQ) * 50) / 100) ? 0 : 1;
                                    if (i23 == 1 || this.rechargeTimes[i22] != 0) {
                                        atexturerenderer.setColor(0, 0, 0);
                                        atexturerenderer.setAlpha(100);
                                        atexturerenderer.drawRectangle(fb[i22] + (this.excessWidth / 2), this.eI[0] + 544 + this.eZ, 110, 85);
                                    }
                                    atexturerenderer.setAlpha(255);
                                    if (this.rechargeTimes[i22] != 0) {
                                        a(atexturerenderer, i22, 0, 0);
                                    } else if (this.slotCatIDs[i22] != -1) {
                                        drawCost(atexturerenderer, (this.unitStats[this.slotCatIDs[i22]][this.slotFormIDs[i22]][6] / 100) + ((((this.unitStats[this.slotCatIDs[i22]][this.slotFormIDs[i22]][6] / 100) * this.eQ) * 50) / 100), fb[i22] + 90 + (this.excessWidth / 2), this.eI[0] + 544 + 50 + this.eZ, i23, 0, 0);
                                    }
                                }
                                i21 = i22 + 1;
                            }
                            else{
                                break;
                            }
                        }
                    }
                    if (this.gV[1] >= 10) {
                        if (this.gW == 0) {
                            atexturerenderer.drawScaledImage(this.arrowTexture, (this.excessWidth / 2) + ((fb[0] + 55) - 48), (int) (this.eZ + 402 + (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                        } else {
                            atexturerenderer.setOrientation(2);
                            atexturerenderer.drawScaledImage(this.arrowTexture, this.excessWidth + 831, (int) ((58 - this.eZ) - (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                        }
                        atexturerenderer.setOrientation(0);
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 388 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                        atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 396 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                        if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 387, 168, 72, ((this.gV[2] % 4) / 2) + 1);
                        }
                    }
                    atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), (320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                    if (this.gV[0] >= getLength(eO) - 1) {
                        int i24 = 0;
                        for (int i25 = 0; i25 < 4; i25++) {
                            if (this.tutorialTextTextures[i25].isLoaded()) {
                                i24 = -(i25 - 1);
                            }
                        }
                        for (int i26 = 0; i26 < 4; i26++) {
                            if (i26 == 0) {
                                atexturerenderer.setColor(255, 255, 0);
                            } else {
                                atexturerenderer.setColor(255, 255, 255);
                            }
                            if (this.tutorialTextTextures[i26].isLoaded()) {
                                atexturerenderer.drawScaledImage(this.tutorialTextTextures[i26], getWidth() / 2, ((i24 * 18) + 287) - 30, 1);
                            }
                            i24 += 2;
                        }
                        return;
                    }
                    return;
                } else if (this.bB[0] == 1) {
                    atexturerenderer.setColor(0, 0, 0, 204);
                    atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                    if (this.bN[0] == 7) {
                        atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 6);
                        atexturerenderer.drawScaledImagef(this.uiTextures[4], this.buttonCoordinates1[1][0] + 4, this.eI[0] + this.buttonCoordinates1[1][1] + 96, 81);
                        atexturerenderer.drawScaledImagef(this.uiTextures[4], 4, ((this.eI[0] + 515) - 5) + this.eZ, 13);
                        atexturerenderer.drawScaledImagef(this.uiTextures[4], 73, ((this.eI[0] + 515) - 5) + this.eZ, this.bN[0] + 14 + 1);
                    } else if (this.battleData[11] + 1 >= 8) {
                        if (this.battleData[10] >= (((this.battleData[11] + 1) - 7) * 2000) + 10000 + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0])) {
                            if ((this.gV[3] % 6) / 3 == 0) {
                                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 6);
                            } else {
                                atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 24);
                            }
                            drawCost(atexturerenderer, (((((this.battleData[11] + 1) - 7) * 2000) + 10000) + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0])) / 100, this.buttonCoordinates1[1][0] + 4, this.eI[0] + this.buttonCoordinates1[1][1] + 96, 2, 0, 0);
                            atexturerenderer.drawScaledImagef(this.uiTextures[4], 4, ((this.eI[0] + 515) - 5) + this.eZ, 13);
                            atexturerenderer.drawScaledImagef(this.uiTextures[4], 73, ((this.eI[0] + 515) - 5) + this.eZ, this.bN[0] + 14 + 1);
                        } else {
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 5);
                            drawCost(atexturerenderer, (((((this.battleData[11] + 1) - 7) * 2000) + 10000) + (((((this.battleData[11] + 1) - 7) * 2000) + 10000) * this.bN[0])) / 100, this.buttonCoordinates1[1][0] + 4, this.eI[0] + this.buttonCoordinates1[1][1] + 96, 3, 0, 0);
                            atexturerenderer.drawScaledImagef(this.uiTextures[4], 4, ((this.eI[0] + 515) - 5) + this.eZ, 24);
                            atexturerenderer.drawScaledImagef(this.uiTextures[4], 73, ((this.eI[0] + 515) - 5) + this.eZ, this.bN[0] + 25 + 1);
                        }
                    } else if (this.battleData[10] >= ((this.battleData[11] + 1) * 1000) + 3000 + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0])) {
                        if ((this.gV[3] % 6) / 3 == 0) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 6);
                        } else {
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 24);
                        }
                        drawCost(atexturerenderer, ((((this.battleData[11] + 1) * 1000) + 3000) + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0])) / 100, this.buttonCoordinates1[1][0] + 4, this.eI[0] + this.buttonCoordinates1[1][1] + 96, 2, 0, 0);
                        atexturerenderer.drawScaledImagef(this.uiTextures[4], 4, ((this.eI[0] + 515) - 5) + this.eZ, 13);
                        atexturerenderer.drawScaledImagef(this.uiTextures[4], 73, ((this.eI[0] + 515) - 5) + this.eZ, this.bN[0] + 14 + 1);
                    } else {
                        atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1] + this.eI[0], 5);
                        drawCost(atexturerenderer, ((((this.battleData[11] + 1) * 1000) + 3000) + ((((this.battleData[11] + 1) * 1000) + 3000) * this.bN[0])) / 100, this.buttonCoordinates1[1][0] + 4, this.eI[0] + this.buttonCoordinates1[1][1] + 96, 3, 0, 0);
                        atexturerenderer.drawScaledImagef(this.uiTextures[4], 4, ((this.eI[0] + 515) - 5) + this.eZ, 24);
                        atexturerenderer.drawScaledImagef(this.uiTextures[4], 73, ((this.eI[0] + 515) - 5) + this.eZ, this.bN[0] + 25 + 1);
                    }
                    this.gameStats1[3] = 0;
                    if (this.battleData[25] % 4 == 1 || this.battleData[25] % 4 == 2) {
                        this.gameStats1[3] = 68;
                    }
                    this.gameStats1[1] = getWidth() - 4;
                    this.gameStats1[1] -= 30;
                    atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, this.gameStats1[3] + 11);
                    this.gameStats1[1] -= 29;
                    int i27 = this.battleData[9] / 100;
                    do {
                        int i28 = i27;
                        atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, this.gameStats1[3] + (i28 % 10));
                        i27 = i28 / 10;
                        this.gameStats1[1] -= 29;
                    } while (i27 > 0);
                    atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 29, 42, this.gameStats1[3] + 10);
                    this.gameStats1[1] -= 28;
                    int i29 = this.battleData[10] / 100;
                    do {
                        int i30 = i29;
                        atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, this.gameStats1[3] + (i30 % 10));
                        i29 = i30 / 10;
                        this.gameStats1[1] -= 29;
                    } while (i29 > 0);
                    if (this.gV[1] >= 10) {
                        atexturerenderer.drawScaledImage(this.arrowTexture, 30, (int) (this.eZ + 402 + (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                        atexturerenderer.setOrientation(2);
                        atexturerenderer.drawScaledImage(this.arrowTexture, this.excessWidth + 831, (int) ((58 - this.eZ) - (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                        atexturerenderer.setOrientation(0);
                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 388 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                        atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 396 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                        if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 387, 168, 72, ((this.gV[2] % 4) / 2) + 1);
                        }
                    }
                    atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), (320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                    if (this.gV[0] >= getLength(eO) - 1) {
                        int i31 = 0;
                        for (int i32 = 0; i32 < 4; i32++) {
                            if (this.tutorialTextTextures[i32].isLoaded()) {
                                i31 = -(i32 - 1);
                            }
                        }
                        for (int i33 = 0; i33 < 4; i33++) {
                            if (i33 == 0) {
                                atexturerenderer.setColor(255, 255, 0);
                            } else {
                                atexturerenderer.setColor(255, 255, 255);
                            }
                            if (this.tutorialTextTextures[i33].isLoaded()) {
                                atexturerenderer.drawScaledImage(this.tutorialTextTextures[i33], getWidth() / 2, ((i31 * 18) + 287) - 30, 1);
                            }
                            i31 += 2;
                        }
                        return;
                    }
                    return;
                } else if (this.bB[1] != 1) {
                    if (this.bB[2] == 1) {
                        atexturerenderer.setColor(0, 0, 0, 204);
                        atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                        if ((this.gV[3] % 6) / 3 == 0) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 96 + this.eI[0], 11);
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 84 + this.eI[0], 12);
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 72 + this.eI[0], 13);
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 60 + this.eI[0], 14);
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 48 + this.eI[0], 15);
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 36 + this.eI[0], 16);
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 24 + this.eI[0], 17);
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 12 + this.eI[0], 18);
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + 22 + 0 + this.eI[0], 19);
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + this.eI[0], 20);
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], (getWidth() - 125) - 4, this.eI[0] + 581 + this.eZ, 9);
                        } else {
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1] + this.eI[0], 7);
                            atexturerenderer.drawScaledImagef(this.uiTextures[15], (getWidth() - 125) - 4, this.eI[0] + 581 + this.eZ, 10);
                        }
                        atexturerenderer.drawScaledImagef(this.uiTextures[15], (getWidth() / 2) - 34, this.eZ + 529, 1);
                        if (this.gV[1] >= 10 || this.gW >= 1) {
                            atexturerenderer.drawScaledImage(this.arrowTexture, this.buttonCoordinates1[0][0] + 30, (int) (this.eZ + 402 + (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                            atexturerenderer.drawScaledImage(this.arrowTexture, (getWidth() / 2) - 48, (int) (this.eZ + 402 + (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                        }
                        if (this.gV[1] >= 10) {
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 388 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                            atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 396 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                            if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 387, 168, 72, ((this.gV[2] % 4) / 2) + 1);
                            }
                        }
                        atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), (320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                        if (this.gV[0] >= getLength(eO) - 1) {
                            int i34 = 0;
                            for (int i35 = 0; i35 < 4; i35++) {
                                if (this.tutorialTextTextures[i35].isLoaded()) {
                                    i34 = -(i35 - 1);
                                }
                            }
                            for (int i36 = 0; i36 < 4; i36++) {
                                if (i36 == 0) {
                                    atexturerenderer.setColor(255, 255, 0);
                                } else {
                                    atexturerenderer.setColor(255, 255, 255);
                                }
                                if (this.tutorialTextTextures[i36].isLoaded()) {
                                    atexturerenderer.drawScaledImage(this.tutorialTextTextures[i36], getWidth() / 2, ((i34 * 18) + 287) - 30, 1);
                                }
                                i34 += 2;
                            }
                            return;
                        }
                        return;
                    } else if (this.bB[3] != 1) {
                        if (this.bB[4] == 1) {
                            atexturerenderer.setColor(0, 0, 0, 204);
                            atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                            atexturerenderer.drawScaledImage(this.uiTextures[15], ((getWidth() / 2) - 65) - (dv[this.hk[0]] / 2), (((-24) - this.eZ) - this.he[0]) - (dv[this.hk[0]] / 2), dv[this.hk[0]] + 131, dv[this.hk[0]] + 131, 0, 0, 0, 5, this.hb[0], 40);
                            atexturerenderer.drawScaledImage(this.uiTextures[15], ((getWidth() / 2) - 38) - (dv[this.hk[0]] / 2), ((1 - this.he[0]) - this.eZ) - (dv[this.hk[0]] / 2), dv[this.hk[0]] + 76, dv[this.hk[0]] + 76, 41);
                            if (this.gV[1] >= 10) {
                                atexturerenderer.setOrientation(2);
                                atexturerenderer.drawScaledImage(this.arrowTexture, (getWidth() / 2) - 48, (int) (((float) ((((-24) - this.eZ) + 131) - 10)) - (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                                atexturerenderer.setOrientation(0);
                                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 388 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                                atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 396 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                                if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 387, 168, 72, ((this.gV[2] % 4) / 2) + 1);
                                }
                            }
                            atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), (320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                            if (this.gV[0] >= getLength(eO) - 1) {
                                int i37 = 0;
                                for (int i38 = 0; i38 < 4; i38++) {
                                    if (this.tutorialTextTextures[i38].isLoaded()) {
                                        i37 = -(i38 - 1);
                                    }
                                }
                                for (int i39 = 0; i39 < 4; i39++) {
                                    if (i39 == 0) {
                                        atexturerenderer.setColor(255, 255, 0);
                                    } else {
                                        atexturerenderer.setColor(255, 255, 255);
                                    }
                                    if (this.tutorialTextTextures[i39].isLoaded()) {
                                        atexturerenderer.drawScaledImage(this.tutorialTextTextures[i39], getWidth() / 2, ((i37 * 18) + 287) - 30, 1);
                                    }
                                    i37 += 2;
                                }
                                return;
                            }
                            return;
                        } else if (this.bB[5] == 1) {
                            atexturerenderer.setColor(0, 0, 0, 204);
                            atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                            if (this.gV[1] >= 10) {
                                int i40 = 0;
                                int i41 = 0;
                                while (true) {
                                    i = i40;
                                    if (i41 >= getLength(this.eM)) {
                                        atexturerenderer.setOrientation(2);
                                        atexturerenderer.drawScaledImage(this.arrowTexture, this.excessWidth + 868, (int) ((136 - this.eZ) - (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                                        atexturerenderer.setOrientation(0);
                                        atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 388 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                                        atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 396 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                                        if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 387, 168, 72, ((this.gV[2] % 4) / 2) + 1);
                                        }
                                        break;
                                    } else {
                                        i40 = this.eM[i41] ? i + 1 : i;
                                        i41++;
                                    }
                                }
                            } else {
                                i = 0;
                            }
                            atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), (320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                            if (this.gV[0] >= getLength(eO) - 1) {
                                int i42 = i;
                                for (int i43 = 0; i43 < 4; i43++) {
                                    if (this.tutorialTextTextures[i43].isLoaded()) {
                                        i42 = -(i43 - 1);
                                    }
                                }
                                for (int i44 = 0; i44 < 4; i44++) {
                                    if (i44 == 0) {
                                        atexturerenderer.setColor(255, 255, 0);
                                    } else {
                                        atexturerenderer.setColor(255, 255, 255);
                                    }
                                    if (this.tutorialTextTextures[i44].isLoaded()) {
                                        atexturerenderer.drawScaledImage(this.tutorialTextTextures[i44], getWidth() / 2, ((i42 * 18) + 287) - 30, 1);
                                    }
                                    i42 += 2;
                                }
                            }
                            int i45 = 5;
                            for (int i46 = 5; i46 >= 0; i46--) {
                                if (this.eM[i46]) {
                                    if (this.eL[i46] == 0) {
                                        atexturerenderer.drawScaledImage(this.uiTextures[15], this.excessWidth + (((i45 * 88) + 447) - (dv[this.eK[i46]] / 2)), (58 - this.eZ) - (dv[this.eK[i46]] / 2), dv[this.eK[i46]] + 58, dv[this.eK[i46]] + 58, i46 + 33);
                                    } else {
                                        atexturerenderer.drawScaledImage(this.uiTextures[15], this.excessWidth + (((i45 * 88) + 447) - (dv[this.eK[i46]] / 2)), (58 - this.eZ) - (dv[this.eK[i46]] / 2), dv[this.eK[i46]] + 58, dv[this.eK[i46]] + 58, i46 + 27);
                                    }
                                    i2 = i45 - 1;
                                } else {
                                    i2 = i45;
                                }
                                i45 = i2;
                            }
                            return;
                        } else if (this.bB[8] == 1) {
                            atexturerenderer.setColor(0, 0, 0, 204);
                            atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                            atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), (320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                            if (this.gV[0] >= getLength(eO) - 1) {
                                int i47 = 0;
                                for (int i48 = 0; i48 < 4; i48++) {
                                    if (this.tutorialTextTextures[i48].isLoaded()) {
                                        i47 = -(i48 - 1);
                                    }
                                }
                                for (int i49 = 0; i49 < 4; i49++) {
                                    if (i49 == 0) {
                                        atexturerenderer.setColor(255, 255, 0);
                                    } else {
                                        atexturerenderer.setColor(255, 255, 255);
                                    }
                                    if (this.tutorialTextTextures[i49].isLoaded()) {
                                        atexturerenderer.drawScaledImage(this.tutorialTextTextures[i49], getWidth() / 2, ((i47 * 18) + 287) - 30, 1);
                                    }
                                    i47 += 2;
                                }
                            }
                            if (this.gV[1] >= 10) {
                                atexturerenderer.drawScaledImage(this.arrowTexture, 667, (int) (470.0f + (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 388 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                                atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 396 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                                if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 387, 168, 72, ((this.gV[2] % 4) / 2) + 1);
                                }
                            }
                            atexturerenderer.drawScaledImage(this.uiTextures[21], 688 - (dv[this.fx[14]] / 2), 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
                            atexturerenderer.drawScaledImage(this.uiTextures[21], 733 - (dv[this.fx[14]] / 2), 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
                            return;
                        } else if (this.bB[9] == 1) {
                            atexturerenderer.setColor(0, 0, 0, 204);
                            atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                            if (this.gV[1] >= 10) {
                                atexturerenderer.drawScaledImage(this.arrowTexture, (this.excessWidth / 2) + 786, (int) (235.0f + (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                            }
                            atexturerenderer.drawScaledImage(this.uiTextures[25], (this.excessWidth / 2) + (786 - (dv[this.hk[4]] / 2)), ((this.he[1] + 345) - (dv[this.hk[4]] / 2)) - 10, dv[this.hk[4]] + 96, dv[this.hk[4]] + 96, 3);
                            atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), (320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                            if (this.gV[0] >= getLength(eO) - 1) {
                                int i50 = 0;
                                for (int i51 = 0; i51 < 4; i51++) {
                                    if (this.tutorialTextTextures[i51].isLoaded()) {
                                        i50 = -(i51 - 1);
                                    }
                                }
                                for (int i52 = 0; i52 < 4; i52++) {
                                    if (i52 == 0) {
                                        atexturerenderer.setColor(255, 255, 0);
                                    } else {
                                        atexturerenderer.setColor(255, 255, 255);
                                    }
                                    if (this.tutorialTextTextures[i52].isLoaded()) {
                                        atexturerenderer.drawScaledImage(this.tutorialTextTextures[i52], getWidth() / 2, ((i50 * 18) + 287) - 30, 1);
                                    }
                                    i50 += 2;
                                }
                            }
                            if (this.gV[1] >= 10) {
                                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 388 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                                atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 396 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                                if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 387, 168, 72, ((this.gV[2] % 4) / 2) + 1);
                                    return;
                                }
                                return;
                            }
                            return;
                        } else {
                            return;
                        }
                    } else {
                        atexturerenderer.setColor(0, 0, 0, 204);
                        atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                        if (this.eE[0]) {
                            if (this.eD[0] == 0) {
                                if (this.eD[5] <= 4) {
                                    int i53 = ((100 - this.eD[4]) * 110) / 100;
                                    int i54 = ((100 - this.eD[4]) * 85) / 100;
                                    int i55 = 0;
                                    while (true) {
                                        int i56 = i55;
                                        if (i56 >= 5) {
                                            int i57 = ((100 - this.eD[3]) * 110) / 100;
                                            int i58 = ((100 - this.eD[3]) * 85) / 100;
                                            int i59 = 0;
                                            while (true) {
                                                int i60 = i59;
                                                if (i60 < 5) {
                                                    atexturerenderer.drawScaledImage(this.uiTextures[i60 + 5], (this.excessWidth / 2) + fb[i60] + ((110 - i57) / 2), this.eZ + this.eI[0] + 544 + this.eD[1] + ((85 - i58) / 2), i57, i58, 0);
                                                    atexturerenderer.setColor(0, 0, 0);
                                                    atexturerenderer.setAlpha(100);
                                                    atexturerenderer.drawRectangle(fb[i60] + ((110 - i57) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[1] + ((85 - i58) / 2) + this.eZ, i57, i58);
                                                    atexturerenderer.setAlpha(255);
                                                    i59 = i60 + 1;
                                                }
                                                else{
                                                    break;
                                                }
                                            }
                                            break;
                                        } else {
                                            atexturerenderer.drawScaledImage(this.uiTextures[i56 + 10], (this.excessWidth / 2) + fb[i56 + 5] + ((110 - i53) / 2), this.eZ + this.eI[0] + 544 + this.eD[2] + ((85 - i54) / 2), i53, i54, 0);
                                            atexturerenderer.setColor(0, 0, 0);
                                            atexturerenderer.setAlpha(100);
                                            atexturerenderer.drawRectangle(fb[i56 + 5] + ((110 - i53) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[2] + ((85 - i54) / 2) + this.eZ, i53, i54);
                                            atexturerenderer.setAlpha(255);
                                            i55 = i56 + 1;
                                        }
                                    }
                                } else {
                                    int i61 = ((100 - this.eD[3]) * 110) / 100;
                                    int i62 = ((100 - this.eD[3]) * 85) / 100;
                                    int i63 = 0;
                                    while (true) {
                                        int i64 = i63;
                                        if (i64 >= 5) {
                                            int i65 = ((100 - this.eD[4]) * 110) / 100;
                                            int i66 = ((100 - this.eD[4]) * 85) / 100;
                                            int i67 = 0;
                                            while (true) {
                                                int i68 = i67;
                                                if (i68 < 5) {
                                                    atexturerenderer.drawScaledImage(this.uiTextures[i68 + 10], (this.excessWidth / 2) + fb[i68 + 5] + ((110 - i65) / 2), this.eZ + this.eI[0] + 544 + this.eD[2] + ((85 - i66) / 2), i65, i66, 0);
                                                    atexturerenderer.setColor(0, 0, 0);
                                                    atexturerenderer.setAlpha(100);
                                                    atexturerenderer.drawRectangle(fb[i68 + 5] + ((110 - i65) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[2] + ((85 - i66) / 2) + this.eZ, i65, i66);
                                                    atexturerenderer.setAlpha(255);
                                                    i67 = i68 + 1;
                                                }
                                                else{
                                                    break;
                                                }
                                            }
                                            break;
                                        } else {
                                            atexturerenderer.drawScaledImage(this.uiTextures[i64 + 5], (this.excessWidth / 2) + fb[i64] + ((110 - i61) / 2), this.eZ + this.eI[0] + 544 + this.eD[1] + ((85 - i62) / 2), i61, i62, 0);
                                            atexturerenderer.setColor(0, 0, 0);
                                            atexturerenderer.setAlpha(100);
                                            atexturerenderer.drawRectangle(fb[i64] + ((110 - i61) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[1] + ((85 - i62) / 2) + this.eZ, i61, i62);
                                            atexturerenderer.setAlpha(255);
                                            i63 = i64 + 1;
                                        }
                                    }
                                }
                            } else if (this.eD[0] == 1) {
                                if (this.eD[5] <= 4) {
                                    int i69 = ((100 - this.eD[4]) * 110) / 100;
                                    int i70 = ((100 - this.eD[4]) * 85) / 100;
                                    int i71 = 0;
                                    while (true) {
                                        int i72 = i71;
                                        if (i72 >= 5) {
                                            int i73 = ((100 - this.eD[3]) * 110) / 100;
                                            int i74 = ((100 - this.eD[3]) * 85) / 100;
                                            int i75 = 0;
                                            while (true) {
                                                int i76 = i75;
                                                if (i76 < 5) {
                                                    atexturerenderer.drawScaledImage(this.uiTextures[i76 + 10], (this.excessWidth / 2) + fb[i76 + 5] + ((110 - i73) / 2), this.eZ + this.eI[0] + 544 + this.eD[1] + ((85 - i74) / 2), i73, i74, 0);
                                                    atexturerenderer.setColor(0, 0, 0);
                                                    atexturerenderer.setAlpha(100);
                                                    atexturerenderer.drawRectangle(fb[i76 + 5] + ((110 - i73) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[1] + ((85 - i74) / 2) + this.eZ, i73, i74);
                                                    atexturerenderer.setAlpha(255);
                                                    i75 = i76 + 1;
                                                }
                                                else{
                                                    break;
                                                }
                                            }
                                            break;
                                        } else {
                                            atexturerenderer.drawScaledImage(this.uiTextures[i72 + 5], (this.excessWidth / 2) + fb[i72] + ((110 - i69) / 2), this.eZ + this.eI[0] + 544 + this.eD[2] + ((85 - i70) / 2), i69, i70, 0);
                                            atexturerenderer.setColor(0, 0, 0);
                                            atexturerenderer.setAlpha(100);
                                            atexturerenderer.drawRectangle(fb[i72] + ((110 - i69) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[2] + ((85 - i70) / 2) + this.eZ, i69, i70);
                                            atexturerenderer.setAlpha(255);
                                            i71 = i72 + 1;
                                        }
                                    }
                                } else {
                                    int i77 = ((100 - this.eD[3]) * 110) / 100;
                                    int i78 = ((100 - this.eD[3]) * 85) / 100;
                                    int i79 = 0;
                                    while (true) {
                                        int i80 = i79;
                                        if (i80 >= 5) {
                                            int i81 = ((100 - this.eD[4]) * 110) / 100;
                                            int i82 = ((100 - this.eD[4]) * 85) / 100;
                                            int i83 = 0;
                                            while (true) {
                                                int i84 = i83;
                                                if (i84 < 5) {
                                                    atexturerenderer.drawScaledImage(this.uiTextures[i84 + 5], (this.excessWidth / 2) + fb[i84] + ((110 - i81) / 2), this.eZ + this.eI[0] + 544 + this.eD[2] + ((85 - i82) / 2), i81, i82, 0);
                                                    atexturerenderer.setColor(0, 0, 0);
                                                    atexturerenderer.setAlpha(100);
                                                    atexturerenderer.drawRectangle(fb[i84] + ((110 - i81) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[2] + ((85 - i82) / 2) + this.eZ, i81, i82);
                                                    atexturerenderer.setAlpha(255);
                                                    i83 = i84 + 1;
                                                }
                                                else{
                                                    break;
                                                }
                                            }
                                            break;
                                        } else {
                                            atexturerenderer.drawScaledImage(this.uiTextures[i80 + 10], (this.excessWidth / 2) + fb[i80 + 5] + ((110 - i77) / 2), this.eZ + this.eI[0] + 544 + this.eD[1] + ((85 - i78) / 2), i77, i78, 0);
                                            atexturerenderer.setColor(0, 0, 0);
                                            atexturerenderer.setAlpha(100);
                                            atexturerenderer.drawRectangle(fb[i80 + 5] + ((110 - i77) / 2) + (this.excessWidth / 2), this.eI[0] + 544 + this.eD[1] + ((85 - i78) / 2) + this.eZ, i77, i78);
                                            atexturerenderer.setAlpha(255);
                                            i79 = i80 + 1;
                                        }
                                    }
                                }
                            }
                        } else if (this.eD[0] == 0) {
                            if (this.gO) {
                                int i85 = 0;
                                while (true) {
                                    int i86 = i85;
                                    if (i86 < 5) {
                                        atexturerenderer.drawScaledImage(this.uiTextures[i86 + 10], (this.excessWidth / 2) + fb[i86 + 5], this.eZ + this.eI[0] + 544 + 12, 110, 85, 0);
                                        atexturerenderer.setColor(0, 0, 0);
                                        atexturerenderer.setAlpha(100);
                                        atexturerenderer.drawRectangle(fb[i86 + 5] + (this.excessWidth / 2), this.eI[0] + 544 + 12 + this.eZ, 110, 85);
                                        atexturerenderer.setAlpha(255);
                                        i85 = i86 + 1;
                                    }
                                    else{
                                        break;
                                    }
                                }
                            }
                            int i87 = 0;
                            while (true) {
                                int i88 = i87;
                                if (i88 < 5) {
                                    atexturerenderer.drawScaledImage(this.uiTextures[i88 + 5], (this.excessWidth / 2) + (fb[i88] - (dv[this.fy[i88]] / 2)), ((this.eI[0] + 544) + this.eZ) - (dv[this.fy[i88]] / 2), dv[this.fy[i88]] + 110, dv[this.fy[i88]] + 85, 0);
                                    int i89 = this.battleData[10] >= this.unitStats[this.slotCatIDs[i88]][this.slotFormIDs[i88]][6] + (((this.unitStats[this.slotCatIDs[i88]][this.slotFormIDs[i88]][6] * this.eQ) * 50) / 100) ? 0 : 1;
                                    if (i89 == 1 || this.rechargeTimes[i88] != 0) {
                                        atexturerenderer.setColor(0, 0, 0);
                                        atexturerenderer.setAlpha(100);
                                        atexturerenderer.drawRectangle(fb[i88] + (this.excessWidth / 2), this.eI[0] + 544 + this.eZ, 110, 85);
                                    }
                                    atexturerenderer.setAlpha(255);
                                    if (this.rechargeTimes[i88] != 0) {
                                        a(atexturerenderer, i88, 0, 0);
                                    } else if (this.slotCatIDs[i88] != -1) {
                                        drawCost(atexturerenderer, (this.unitStats[this.slotCatIDs[i88]][this.slotFormIDs[i88]][6] / 100) + ((((this.unitStats[this.slotCatIDs[i88]][this.slotFormIDs[i88]][6] / 100) * this.eQ) * 50) / 100), fb[i88] + 90 + (this.excessWidth / 2), this.eI[0] + 544 + 50 + this.eZ, i89, 0, 0);
                                    }
                                    i87 = i88 + 1;
                                }
                                else{
                                    break;
                                }
                            }
                        } else if (this.eD[0] == 1) {
                            int i90 = 0;
                            while (true) {
                                int i91 = i90;
                                if (i91 >= 5) {
                                    int i92 = 0;
                                    while (true) {
                                        int i93 = i92;
                                        if (i93 < 5) {
                                            atexturerenderer.drawScaledImage(this.uiTextures[i93 + 10], (this.excessWidth / 2) + (fb[i93 + 5] - (dv[this.fy[i93]] / 2)), ((this.eI[0] + 544) + this.eZ) - (dv[this.fy[i93]] / 2), dv[this.fy[i93]] + 110, dv[this.fy[i93]] + 85, 0);
                                            if (this.slotCatIDs[i93 + 5] != -1) {
                                                int i94 = this.battleData[10] >= this.unitStats[this.slotCatIDs[i93 + 5]][this.slotFormIDs[i93 + 5]][6] + (((this.unitStats[this.slotCatIDs[i93 + 5]][this.slotFormIDs[i93 + 5]][6] * this.eQ) * 50) / 100) ? 0 : 1;
                                                if (i94 == 1 || this.rechargeTimes[i93 + 5] != 0) {
                                                    atexturerenderer.setColor(0, 0, 0);
                                                    atexturerenderer.setAlpha(100);
                                                    atexturerenderer.drawRectangle(fb[i93 + 5] + (this.excessWidth / 2), this.eI[0] + 544 + this.eZ, 110, 85);
                                                }
                                                atexturerenderer.setAlpha(255);
                                                if (this.rechargeTimes[i93 + 5] != 0) {
                                                    a(atexturerenderer, i93 + 5, 0, 0);
                                                } else if (this.slotCatIDs[i93 + 5] != -1) {
                                                    drawCost(atexturerenderer, (this.unitStats[this.slotCatIDs[i93 + 5]][this.slotFormIDs[i93 + 5]][6] / 100) + ((((this.unitStats[this.slotCatIDs[i93 + 5]][this.slotFormIDs[i93 + 5]][6] / 100) * this.eQ) * 50) / 100), fb[i93 + 5] + 90 + (this.excessWidth / 2), this.eI[0] + 544 + 50 + this.eZ, i94, 0, 0);
                                                }
                                            }
                                            i92 = i93 + 1;
                                        }
                                        else{
                                            break;
                                        }
                                    }
                                    break;
                                } else {
                                    atexturerenderer.drawScaledImage(this.uiTextures[i91 + 5], (this.excessWidth / 2) + fb[i91], this.eZ + this.eI[0] + 544 + 12, 110, 85, 0);
                                    atexturerenderer.setColor(0, 0, 0);
                                    atexturerenderer.setAlpha(100);
                                    atexturerenderer.drawRectangle(fb[i91] + (this.excessWidth / 2), this.eI[0] + 544 + 12 + this.eZ, 110, 85);
                                    atexturerenderer.setAlpha(255);
                                    i90 = i91 + 1;
                                }
                            }
                        }
                        atexturerenderer.setImageAlpha(255);
                        atexturerenderer.setImageColor(255, 255, 255);
                        if (this.gV[1] >= 10 || this.gW >= 1) {
                            atexturerenderer.drawScaledImage(this.arrowTexture, (getWidth() / 2) - 48, this.gV[2] + 276, 96, 96, 0);
                            atexturerenderer.setOrientation(0);
                        }
                        if (this.gV[1] >= 10) {
                            atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 238 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                            atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 246 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                            if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 237, 168, 72, ((this.gV[3] % 4) / 2) + 1);
                            }
                        }
                        atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), ((320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30) - 150, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                        if (this.gV[0] >= getLength(eO) - 1) {
                            int i95 = 0;
                            for (int i96 = 0; i96 < 4; i96++) {
                                if (this.tutorialTextTextures[i96].isLoaded()) {
                                    i95 = -(i96 - 1);
                                }
                            }
                            for (int i97 = 0; i97 < 4; i97++) {
                                if (i97 == 0) {
                                    atexturerenderer.setColor(255, 255, 0);
                                } else {
                                    atexturerenderer.setColor(255, 255, 255);
                                }
                                if (this.tutorialTextTextures[i97].isLoaded()) {
                                    atexturerenderer.drawScaledImage(this.tutorialTextTextures[i97], getWidth() / 2, (((i95 * 18) + 287) - 30) - 150, 1);
                                }
                                i95 += 2;
                            }
                            return;
                        }
                        return;
                    }
                } else {
                    atexturerenderer.setColor(0, 0, 0, 204);
                    atexturerenderer.drawRectangle(0, 0 - this.eZ, getWidth(), getHeight());
                    this.gameStats1[3] = 0;
                    if (this.battleData[25] % 4 == 1 || this.battleData[25] % 4 == 2) {
                        this.gameStats1[3] = 68;
                    }
                    this.gameStats1[1] = getWidth() - 4;
                    this.gameStats1[1] -= 30;
                    atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, this.gameStats1[3] + 11);
                    this.gameStats1[1] -= 29;
                    int i98 = this.battleData[9] / 100;
                    do {
                        int i99 = i98;
                        atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, this.gameStats1[3] + (i99 % 10));
                        i98 = i99 / 10;
                        this.gameStats1[1] -= 29;
                    } while (i98 > 0);
                    atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 29, 42, this.gameStats1[3] + 10);
                    this.gameStats1[1] -= 28;
                    int i100 = this.battleData[10] / 100;
                    do {
                        int i101 = i100;
                        atexturerenderer.drawScaledImage(this.uiTextures[4], this.gameStats1[1], (10 - this.eI[0]) - this.eZ, 30, 42, this.gameStats1[3] + (i101 % 10));
                        i100 = i101 / 10;
                        this.gameStats1[1] -= 29;
                    } while (i100 > 0);
                    int i102 = 0;
                    while (true) {
                        int i103 = i102;
                        if (i103 >= 5) {
                            if (this.gV[1] >= 10) {
                                atexturerenderer.drawScaledImage(this.arrowTexture, (this.excessWidth / 2) + ((fb[0] + 55) - 48), (int) (this.eZ + 402 + (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                                atexturerenderer.setOrientation(2);
                                atexturerenderer.drawScaledImage(this.arrowTexture, this.excessWidth + 831, (int) ((58 - this.eZ) - (10.0f * aMath.sin(this.gV[2] * 30))), 96, 96, 0);
                                atexturerenderer.setOrientation(0);
                                atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + (615 - (dv[this.gZ[0]] / 2)), 388 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 168, dv[this.gZ[0]] + 72, 0);
                                atexturerenderer.drawScaledImage(this.uiTextures[21], (this.excessWidth / 2) + (651 - (dv[this.gZ[0]] / 2)), 396 - (dv[this.gZ[0]] / 2), dv[this.gZ[0]] + 97, dv[this.gZ[0]] + 55, 20);
                                if (isPointerDown() && isTouching(this.gX[0][0], this.gX[0][1], this.gX[0][2], this.gX[0][3]) && !this.eb) {
                                    atexturerenderer.drawScaledImage(this.settingsMenuTexture[2], (this.excessWidth / 2) + 614, 387, 168, 72, ((this.gV[2] % 4) / 2) + 1);
                                }
                            }
                            atexturerenderer.drawScaledImage(this.popupTexture, (getWidth() / 2) - (((eO[this.gV[0]] * 690) / 100) / 2), (320 - (((eO[this.gV[0]] * 179) / 100) / 2)) - 30, (eO[this.gV[0]] * 690) / 100, (eO[this.gV[0]] * 179) / 100, 0);
                            if (this.gV[0] >= getLength(eO) - 1) {
                                int i104 = 0;
                                for (int i105 = 0; i105 < 4; i105++) {
                                    if (this.tutorialTextTextures[i105].isLoaded()) {
                                        i104 = -(i105 - 1);
                                    }
                                }
                                for (int i106 = 0; i106 < 4; i106++) {
                                    if (i106 == 0) {
                                        atexturerenderer.setColor(255, 255, 0);
                                    } else {
                                        atexturerenderer.setColor(255, 255, 255);
                                    }
                                    if (this.tutorialTextTextures[i106].isLoaded()) {
                                        atexturerenderer.drawScaledImage(this.tutorialTextTextures[i106], getWidth() / 2, ((i104 * 18) + 287) - 30, 1);
                                    }
                                    i104 += 2;
                                }
                                return;
                            }
                            return;
                        }
                        atexturerenderer.drawScaledImage(this.uiTextures[i103 + 5], (this.excessWidth / 2) + (fb[i103] - (dv[this.fy[i103]] / 2)), ((this.eI[0] + 544) + this.eZ) - (dv[this.fy[i103]] / 2), dv[this.fy[i103]] + 110, dv[this.fy[i103]] + 85, 0);
                        if (this.slotCatIDs[i103] != -1) {
                            int i107 = this.battleData[10] >= this.unitStats[this.slotCatIDs[i103]][this.slotFormIDs[i103]][6] + (((this.unitStats[this.slotCatIDs[i103]][this.slotFormIDs[i103]][6] * this.eQ) * 50) / 100) ? 0 : 1;
                            if (i107 == 1 || this.rechargeTimes[i103] != 0) {
                                atexturerenderer.setColor(0, 0, 0);
                                atexturerenderer.setAlpha(100);
                                atexturerenderer.drawRectangle(fb[i103] + (this.excessWidth / 2), this.eI[0] + 544 + this.eZ, 110, 85);
                            }
                            atexturerenderer.setAlpha(255);
                            if (this.rechargeTimes[i103] != 0) {
                                a(atexturerenderer, i103, 0, 0);
                            } else if (this.slotCatIDs[i103] != -1) {
                                drawCost(atexturerenderer, (this.unitStats[this.slotCatIDs[i103]][this.slotFormIDs[i103]][6] / 100) + ((((this.unitStats[this.slotCatIDs[i103]][this.slotFormIDs[i103]][6] / 100) * this.eQ) * 50) / 100), fb[i103] + 90 + (this.excessWidth / 2), this.eI[0] + 544 + 50 + this.eZ, i107, 0, 0);
                            }
                        }
                        i102 = i103 + 1;
                    }
                }
            default:
                return;
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:101:0x034c  */
    /* JADX WARN: Removed duplicated region for block: B:649:0x14aa  */
    /* JADX WARN: Removed duplicated region for block: B:654:0x14c6  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    boolean q() {
        boolean z;
        int i;
        if (this.hc[1] == 0) {
            float[] fArr = this.hb;
            fArr[1] = fArr[1] + 0.5f;
            float[] fArr2 = this.hb;
            fArr2[0] = fArr2[0] + this.hb[1];
            this.he[0] -= 1;
            if (this.hb[1] >= 30.0f) {
                this.hc[1] = 1;
                this.he[0] = -100;
                for (int i2 = 0; i2 < getLength(this.textTextures); i2++) {
                    if (this.textTextures[i2].isLoaded()) {
                        this.textTextures[i2].reset();
                    }
                }
                this.hc[3] = 300;
                this.textTextures[0].drawText(this.god1Text[0][0], "FONT_SYSTEM_BOLD", 30, 1);
                this.textTextures[1].drawText(this.god1Text[0][1], "FONT_SYSTEM_BOLD", 30, 1);
                this.textTextures[2].drawText(this.godNameText, "FONT_SYSTEM_BOLD", 30, 1);
            }
        } else if (this.hc[1] == 1) {
            int[] iArr = this.hg;
            iArr[0] = iArr[0] + 40;
            int[] iArr2 = this.he;
            iArr2[0] = iArr2[0] + this.hg[0];
            int[] iArr3 = this.hc;
            iArr3[0] = iArr3[0] + 20;
            if (this.hc[0] > 178) {
                this.hc[0] = 178;
                this.hc[1] = 2;
                this.he[1] = -600;
                this.hb[0] = 0.0f;
            }
        } else if (this.hc[1] == 2) {
            this.he[1] = (int) (this.he[1] * 0.7d);
            if (this.he[1] >= 0) {
                this.he[1] = 0;
                this.hc[1] = 3;
            }
        } else if (this.hc[1] == 3) {
            float[] fArr3 = this.hb;
            fArr3[0] = fArr3[0] + 6.0f;
            this.he[2] = (int) (10.0f * aMath.sin(this.hb[0]));
            if (this.bB[9] == 0) {
                int[] iArr4 = this.hc;
                iArr4[27] = iArr4[27] + 1;
                if (this.hc[27] >= 60) {
                    screenTransition();
                    this.hc[27] = 0;
                    this.bB[9] = 1;
                    this.gU = true;
                    for (int i3 = 0; i3 < getLength(this.gV); i3++) {
                        this.gV[i3] = 0;
                    }
                    return false;
                }
            }
            if (this.bB[9] >= 2) {
                int[] iArr5 = this.hc;
                iArr5[28] = iArr5[28] + 1;
                if (this.hk[1] >= 1) {
                    int[] iArr6 = this.hk;
                    iArr6[1] = iArr6[1] + 1;
                    if (this.hk[1] > getLength(dv) - 1) {
                        this.hk[1] = 0;
                        this.hl = 0;
                        this.ha[1] = true;
                        if (this.bB[9] >= 3 && this.catfood < ab[this.hl]) {
                            this.hc[3] = 300;
                            this.textTextures[0].drawText(this.god3Text[0][0], "FONT_SYSTEM_BOLD", 30, 1);
                            this.textTextures[1].drawText(this.god3Text[0][1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                        this.textTextures[3].drawText(this.godItemNameText[this.hl], "FONT_SYSTEM_BOLD", 30, 1);
                        this.textTextures[4].drawText(this.godItemExplanationText[this.hl][0], "FONT_SYSTEM_BOLD", 30, 1);
                        this.textTextures[5].drawText(this.godItemExplanationText[this.hl][1], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else if (this.hk[2] >= 1) {
                    int[] iArr7 = this.hk;
                    iArr7[2] = iArr7[2] + 1;
                    if (this.hk[2] > getLength(dv) - 1) {
                        this.hk[2] = 0;
                        this.hl = 1;
                        this.ha[1] = true;
                        if (this.bB[9] >= 3 && this.catfood < ab[this.hl]) {
                            this.hc[3] = 300;
                            this.textTextures[0].drawText(this.god3Text[0][0], "FONT_SYSTEM_BOLD", 30, 1);
                            this.textTextures[1].drawText(this.god3Text[0][1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                        this.textTextures[3].drawText(this.godItemNameText[this.hl], "FONT_SYSTEM_BOLD", 30, 1);
                        this.textTextures[4].drawText(this.godItemExplanationText[this.hl][0], "FONT_SYSTEM_BOLD", 30, 1);
                        this.textTextures[5].drawText(this.godItemExplanationText[this.hl][1], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else if (this.hk[3] >= 1) {
                    int[] iArr8 = this.hk;
                    iArr8[3] = iArr8[3] + 1;
                    if (this.hk[3] > getLength(dv) - 1) {
                        this.hk[3] = 0;
                        this.hl = 2;
                        this.ha[1] = true;
                        if (this.bB[9] >= 3 && this.catfood < ab[this.hl]) {
                            this.hc[3] = 300;
                            this.textTextures[0].drawText(this.god3Text[0][0], "FONT_SYSTEM_BOLD", 30, 1);
                            this.textTextures[1].drawText(this.god3Text[0][1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                        this.textTextures[3].drawText(this.godItemNameText[this.hl], "FONT_SYSTEM_BOLD", 30, 1);
                        this.textTextures[4].drawText(this.godItemExplanationText[this.hl][0], "FONT_SYSTEM_BOLD", 30, 1);
                        this.textTextures[5].drawText(this.godItemExplanationText[this.hl][1], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else if (this.hk[4] >= 1) {
                    int[] iArr9 = this.hk;
                    iArr9[4] = iArr9[4] + 1;
                    if (this.hk[4] > getLength(dv) - 1) {
                        this.hk[4] = 0;
                        this.hl = 3;
                        this.ha[1] = true;
                        if (this.bB[9] >= 3 && this.catfood < ab[this.hl]) {
                            this.hc[3] = 300;
                            this.textTextures[0].drawText(this.god3Text[0][0], "FONT_SYSTEM_BOLD", 30, 1);
                            this.textTextures[1].drawText(this.god3Text[0][1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                        this.textTextures[3].drawText(this.godItemNameText[this.hl], "FONT_SYSTEM_BOLD", 30, 1);
                        this.textTextures[4].drawText(this.godItemExplanationText[this.hl][0], "FONT_SYSTEM_BOLD", 30, 1);
                        this.textTextures[5].drawText(this.godItemExplanationText[this.hl][1], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else if (this.hk[5] >= 1) {
                    int[] iArr10 = this.hk;
                    iArr10[5] = iArr10[5] + 1;
                    if (this.hk[5] > getLength(dv) - 1) {
                        this.hk[5] = 0;
                        screenTransition();
                        for (int i4 = 0; i4 < getLength(this.ha); i4++) {
                            this.ha[i4] = false;
                        }
                        for (int i5 = 0; i5 < getLength(this.hc); i5++) {
                            this.hc[i5] = 0;
                        }
                        for (int i6 = 0; i6 < getLength(this.hd); i6++) {
                            this.hd[i6] = 0;
                        }
                        for (int i7 = 0; i7 < getLength(this.hf); i7++) {
                            this.hf[i7] = 0;
                        }
                        for (int i8 = 0; i8 < getLength(this.he); i8++) {
                            this.he[i8] = 0;
                        }
                        for (int i9 = 0; i9 < getLength(this.hg); i9++) {
                            this.hg[i9] = 0;
                        }
                        for (int i10 = 0; i10 < getLength(this.hh); i10++) {
                            this.hh[i10] = 0;
                        }
                        for (int i11 = 0; i11 < getLength(this.hi); i11++) {
                            this.hi[i11] = 0;
                        }
                        for (int i12 = 0; i12 < getLength(this.hb); i12++) {
                            this.hb[i12] = 0.0f;
                        }
                        for (int i13 = 0; i13 < getLength(this.textTextures); i13++) {
                            if (this.textTextures[i13].isLoaded()) {
                                this.textTextures[i13].reset();
                            }
                        }
                        this.textTextures[0].drawText(this.warning1Text[5], "FONT_SYSTEM_BOLD", 30, 1);
                        for (int i14 = 0; i14 < 4; i14++) {
                            this.textTextures[i14 + 1].drawText(this.stageFirstMessageText[0][i14], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                        this.textTextures[10].drawText(this.optionText[1], "FONT_SYSTEM_BOLD", 30, 1);
                        this.gameStats1[0] = 0;
                        int i15 = 0;
                        while (true) {
                            if (i15 >= 10) {
                                break;
                            } else if (this.eQ == i15 && this.battleData[0] == 47) {
                                this.gameStats1[0] = i15;
                                break;
                            } else {
                                i15++;
                            }
                        }
                        if (this.gameStats1[0] >= 1) {
                            int[] iArr11 = this.gameStats1;
                            iArr11[0] = iArr11[0] + 1;
                        }
                        if (this.cj[4] == 0) {
                            aSound.getInstance().stop(-1);
                            aSound.getInstance().play(cn[(this.battleData[0] + this.gameStats1[0]) * 3]);
                            return false;
                        }
                        aSound.getInstance().stop(-1);
                        aSound.getInstance().play(cn[((this.battleData[0] + this.gameStats1[0]) * 3) + 2]);
                        return false;
                    }
                } else if (this.hk[6] >= 1) {
                    int[] iArr12 = this.hk;
                    iArr12[6] = iArr12[6] + 1;
                    if (this.hk[6] > getLength(dv) - 1) {
                        this.hk[6] = 0;
                        if (this.bB[9] < 3) {
                            this.textTextures[0].drawText(this.god4Text[0][0], "FONT_SYSTEM_BOLD", 30, 1);
                            this.textTextures[1].drawText(this.god4Text[0][1], "FONT_SYSTEM_BOLD", 30, 1);
                            this.bB[9] = 3;
                            this.ha[1] = false;
                            this.hc[1] = 4;
                            aSave();
                        } else if (this.catfood < ab[this.hl]) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 1;
                            return false;
                        } else {
                            this.catfood -= ab[this.hl];
                            this.textTextures[0].drawText(this.god4Text[0][0], "FONT_SYSTEM_BOLD", 30, 1);
                            this.textTextures[1].drawText(this.god4Text[0][1], "FONT_SYSTEM_BOLD", 30, 1);
                            this.ha[1] = false;
                            this.hc[1] = 4;
                            if (this.hl < getLength(this.hE)) {
                                int[] iArr13 = this.hE;
                                int i16 = this.hl;
                                iArr13[i16] = iArr13[i16] + 1;
                                if (this.hE[this.hl] >= 999999999) {
                                    this.hE[this.hl] = 999999999;
                                }
                            }
                            aSave();
                        }
                    }
                } else if (this.hk[7] >= 1) {
                    int[] iArr14 = this.hk;
                    iArr14[7] = iArr14[7] + 1;
                    if (this.hk[7] > getLength(dv) - 1) {
                        this.hk[7] = 0;
                        this.ha[1] = false;
                        if (this.bB[9] >= 3 && this.catfood < ab[this.hl]) {
                            int rand = aMath.rand(getLength(this.god2Text));
                            this.textTextures[0].drawText(this.god2Text[rand][0], "FONT_SYSTEM_BOLD", 30, 1);
                            this.textTextures[1].drawText(this.god2Text[rand][1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                } else if (this.fx[14] >= 1) {
                    int[] iArr15 = this.fx;
                    iArr15[14] = iArr15[14] + 1;
                    if (this.fx[14] > getLength(dv) - 1) {
                        this.fx[14] = 0;
                        if (this.bB[8] == 0) {
                            screenTransition();
                            this.bB[8] = 1;
                            this.gU = true;
                            for (int i17 = 0; i17 < getLength(this.gV); i17++) {
                                this.gV[i17] = 0;
                            }
                            aSound.getInstance().setVolume(50);
                            return false;
                        } else if (this.catfood >= 900000) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 10000;
                            return false;
                        } else {
                            screenTransition();
                            this.menuType = 0;
                            this.j = true;
                            return false;
                        }
                    }
                } else {
                    if (this.ha[1]) {
                        if (!isPointerDown() || !isTouching(this.hj[6][0], this.hj[6][1], this.hj[6][2], this.hj[6][3])) {
                            this.gr[6] = false;
                        } else if (!this.gr[6]) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gr[6] = true;
                        }
                        if (this.bB[9] >= 3) {
                            if (!isPointerDown() || !isTouching(this.hj[7][0], this.hj[7][1], this.hj[7][2], this.hj[7][3])) {
                                this.gr[7] = false;
                            } else if (!this.gr[7]) {
                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                this.gr[7] = true;
                            }
                        }
                        if (isPointerUp() && isTouching(this.hj[6][0], this.hj[6][1], this.hj[6][2], this.hj[6][3])) {
                            if (this.bB[9] < 3) {
                                aSound.getInstance().play(SoundType.UPGRADE);
                            } else if (this.catfood >= ab[this.hl]) {
                                aSound.getInstance().play(SoundType.UPGRADE);
                            } else {
                                aSound.getInstance().play(SoundType.CANT_PRESS);
                            }
                            int[] iArr16 = this.hk;
                            iArr16[6] = iArr16[6] + 1;
                        } else if (isPointerUp() && isTouching(this.hj[7][0], this.hj[7][1], this.hj[7][2], this.hj[7][3]) && this.bB[9] >= 3) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr17 = this.hk;
                            iArr17[7] = iArr17[7] + 1;
                        }
                    } else {
                        if (this.bB[9] >= 3) {
                            if (!isPointerDown() || !isTouching(this.hj[1][0], this.hj[1][1], this.hj[1][2], this.hj[1][3])) {
                                this.gr[1] = false;
                            } else if (!this.gr[1]) {
                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                this.gr[1] = true;
                            }
                            if (!isPointerDown() || !isTouching(this.hj[2][0], this.hj[2][1], this.hj[2][2], this.hj[2][3])) {
                                this.gr[2] = false;
                            } else if (!this.gr[2]) {
                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                this.gr[2] = true;
                            }
                            if (!isPointerDown() || !isTouching(this.hj[3][0], this.hj[3][1], this.hj[3][2], this.hj[3][3])) {
                                this.gr[3] = false;
                            } else if (!this.gr[3]) {
                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                this.gr[3] = true;
                            }
                        }
                        if (this.bB[9] >= 2) {
                            if (!isPointerDown() || !isTouching(this.hj[4][0], this.hj[4][1], this.hj[4][2], this.hj[4][3])) {
                                this.gr[4] = false;
                            } else if (!this.gr[4]) {
                                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                                this.gr[4] = true;
                            }
                        }
                        if (this.bB[9] >= 3) {
                            if (isPointerUp() && isTouching(this.hj[1][0], this.hj[1][1], this.hj[1][2], this.hj[1][3])) {
                                aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                int[] iArr18 = this.hk;
                                iArr18[1] = iArr18[1] + 1;
                            }
                            if (isPointerUp() && isTouching(this.hj[2][0], this.hj[2][1], this.hj[2][2], this.hj[2][3])) {
                                aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                int[] iArr19 = this.hk;
                                iArr19[2] = iArr19[2] + 1;
                            }
                            if (isPointerUp() && isTouching(this.hj[3][0], this.hj[3][1], this.hj[3][2], this.hj[3][3])) {
                                aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                int[] iArr20 = this.hk;
                                iArr20[3] = iArr20[3] + 1;
                            }
                        }
                        if (this.bB[9] >= 2 && isPointerUp() && isTouching(this.hj[4][0], this.hj[4][1], this.hj[4][2], this.hj[4][3])) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr21 = this.hk;
                            iArr21[4] = iArr21[4] + 1;
                        }
                    }
                    if (this.bB[9] >= 3) {
                        if (!isPointerDown() || !isTouching(this.hj[5][0], this.hj[5][1], this.hj[5][2], this.hj[5][3])) {
                            this.gr[5] = false;
                        } else if (!this.gr[5]) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gr[5] = true;
                        }
                        if (!isPointerDown() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3])) {
                            this.gp[14] = false;
                        } else if (!this.gp[14]) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gp[14] = true;
                        }
                        if (isPointerUp() && isTouching(this.hj[5][0], this.hj[5][1], this.hj[5][2], this.hj[5][3])) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr22 = this.hk;
                            iArr22[5] = iArr22[5] + 1;
                        } else if (isBackPressed() && !this.ha[1]) {
                            this.hk[5] = 0;
                            screenTransition();
                            for (int i18 = 0; i18 < getLength(this.ha); i18++) {
                                this.ha[i18] = false;
                            }
                            for (int i19 = 0; i19 < getLength(this.hc); i19++) {
                                this.hc[i19] = 0;
                            }
                            for (int i20 = 0; i20 < getLength(this.hd); i20++) {
                                this.hd[i20] = 0;
                            }
                            for (int i21 = 0; i21 < getLength(this.hf); i21++) {
                                this.hf[i21] = 0;
                            }
                            for (int i22 = 0; i22 < getLength(this.he); i22++) {
                                this.he[i22] = 0;
                            }
                            for (int i23 = 0; i23 < getLength(this.hg); i23++) {
                                this.hg[i23] = 0;
                            }
                            for (int i24 = 0; i24 < getLength(this.hh); i24++) {
                                this.hh[i24] = 0;
                            }
                            for (int i25 = 0; i25 < getLength(this.hi); i25++) {
                                this.hi[i25] = 0;
                            }
                            for (int i26 = 0; i26 < getLength(this.hb); i26++) {
                                this.hb[i26] = 0.0f;
                            }
                            for (int i27 = 0; i27 < getLength(this.textTextures); i27++) {
                                if (this.textTextures[i27].isLoaded()) {
                                    this.textTextures[i27].reset();
                                }
                            }
                            this.textTextures[0].drawText(this.warning1Text[5], "FONT_SYSTEM_BOLD", 30, 1);
                            for (int i28 = 0; i28 < 4; i28++) {
                                this.textTextures[i28 + 1].drawText(this.stageFirstMessageText[0][i28], "FONT_SYSTEM_BOLD", 30, 1);
                            }
                            this.textTextures[10].drawText(this.optionText[1], "FONT_SYSTEM_BOLD", 30, 1);
                            this.gameStats1[0] = 0;
                            int i29 = 0;
                            while (true) {
                                if (i29 >= 10) {
                                    break;
                                } else if (this.eQ == i29 && this.battleData[0] == 47) {
                                    this.gameStats1[0] = i29;
                                    break;
                                } else {
                                    i29++;
                                }
                            }
                            if (this.gameStats1[0] >= 1) {
                                int[] iArr23 = this.gameStats1;
                                iArr23[0] = iArr23[0] + 1;
                            }
                            if (this.cj[4] == 0) {
                                aSound.getInstance().stop(-1);
                                aSound.getInstance().play(cn[(this.battleData[0] + this.gameStats1[0]) * 3]);
                                return false;
                            }
                            aSound.getInstance().stop(-1);
                            aSound.getInstance().play(cn[((this.battleData[0] + this.gameStats1[0]) * 3) + 2]);
                            return false;
                        } else if (isBackPressed() && this.ha[1]) {
                            if (this.bB[9] >= 3) {
                                this.hk[7] = 0;
                                this.ha[1] = false;
                                if (this.catfood < ab[this.hl]) {
                                    int rand2 = aMath.rand(getLength(this.god2Text));
                                    this.textTextures[0].drawText(this.god2Text[rand2][0], "FONT_SYSTEM_BOLD", 30, 1);
                                    this.textTextures[1].drawText(this.god2Text[rand2][1], "FONT_SYSTEM_BOLD", 30, 1);
                                }
                            }
                        } else if (isPointerUp() && isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3])) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr24 = this.fx;
                            iArr24[14] = iArr24[14] + 1;
                        }
                    }
                }
                if (!this.ha[1]) {
                    this.hc[3] -= 1;
                    if (this.hc[3] <= 0) {
                        int rand3 = aMath.rand(getLength(this.god2Text));
                        this.textTextures[0].drawText(this.god2Text[rand3][0], "FONT_SYSTEM_BOLD", 30, 1);
                        this.textTextures[1].drawText(this.god2Text[rand3][1], "FONT_SYSTEM_BOLD", 30, 1);
                        this.hc[3] = 300;
                    }
                } else if (this.bB[9] < 3) {
                    this.hc[3] -= 1;
                    if (this.hc[3] <= 0) {
                        int rand4 = aMath.rand(getLength(this.god2Text));
                        this.textTextures[0].drawText(this.god2Text[rand4][0], "FONT_SYSTEM_BOLD", 30, 1);
                        this.textTextures[1].drawText(this.god2Text[rand4][1], "FONT_SYSTEM_BOLD", 30, 1);
                        this.hc[3] = 300;
                    }
                } else if (this.catfood >= ab[this.hl]) {
                    this.hc[3] -= 1;
                    if (this.hc[3] <= 0) {
                        int rand5 = aMath.rand(getLength(this.god2Text));
                        this.textTextures[0].drawText(this.god2Text[rand5][0], "FONT_SYSTEM_BOLD", 30, 1);
                        this.textTextures[1].drawText(this.god2Text[rand5][1], "FONT_SYSTEM_BOLD", 30, 1);
                        this.hc[3] = 300;
                    }
                }
            }
        } else if (this.hc[1] == 4) {
            int[] iArr25 = this.hc;
            iArr25[5] = iArr25[5] + 1;
            if (this.hc[5] == 1) {
                this.he[1] = 0;
                this.hg[1] = -2;
            } else if (this.hc[5] > 50) {
                int[] iArr26 = this.he;
                iArr26[1] = iArr26[1] + this.hg[1];
                int[] iArr27 = this.hg;
                iArr27[1] = iArr27[1] + this.hg[1];
            } else if (this.hc[5] / 10 <= 2) {
                if (this.hc[5] % 3 == 0) {
                    this.he[1] -= 1;
                }
            } else if (this.hc[5] / 10 <= 3) {
                if (this.hc[5] % 2 == 0) {
                    this.he[1] -= 1;
                }
            } else if (this.hc[5] / 10 <= 4) {
                this.he[1] -= 1;
            } else if (this.hc[5] / 10 <= 5) {
                this.he[1] -= 2;
            }
            if (this.he[1] <= -2000) {
                this.hc[1] = 5;
            }
        }
        if ((this.hc[1] == 4 || this.hc[1] == 5) && this.hc[26] == 0) {
            int[] iArr28 = this.hc;
            iArr28[21] = iArr28[21] + 1;
            if (this.hc[21] == 1) {
                this.hc[20] = this.zoomLevel - (this.battleData[28] * 100);
                this.hc[22] = this.zoomLevel;
                this.hc[23] = this.battleData[5];
            }
            this.gameStats1[0] = this.zoomLevel / 100;
            this.gameStats1[1] = this.zoomLevel / 100;
            float f = this.gameStats1[0] / 100.0f;
            this.zoomLevel -= this.hc[20] / 200;
            if (this.zoomLevel < this.battleData[28] * 100) {
                this.zoomLevel = this.battleData[28] * 100;
            } else if (this.zoomLevel > 10000) {
                this.zoomLevel = 10000;
            }
            this.gameStats1[0] = this.zoomLevel / 100;
            this.gameStats1[2] = this.zoomLevel / 100;
            float f2 = this.gameStats1[0] / 100.0f;
            this.gameStats1[0] = this.gameStats1[1] - this.gameStats1[2];
            float f3 = 0.0f;
            float f4 = 0.0f;
            do {
                if (this.gameStats1[0] > 0) {
                    this.gameStats1[0] -= 1;
                    if (f3 != 0.0f) {
                        f4 -= 0.01f;
                    }
                    f3 -= 0.01f;
                } else if (this.gameStats1[0] != 0) {
                    int[] iArr29 = this.gameStats1;
                    iArr29[0] = iArr29[0] + 1;
                    if (f3 != 0.0f) {
                        f4 += 0.01f;
                    }
                    f3 += 0.01f;
                }
                this.battleData[5] = (int) (-(((((f + f2) * (f + f4)) / (f + f3)) - ((int) (((getWidth() / 2) / (f + f3)) - (-((this.battleData[5] + 5) / 10))))) * 10.0f));
                if (this.battleData[5] < 0) {
                    this.battleData[5] = 0;
                }
            } while (this.gameStats1[0] != 0);
            if (this.zoomLevel < this.battleData[28] * 100) {
                this.zoomLevel = this.battleData[28] * 100;
            } else if (this.zoomLevel > 10000) {
                this.zoomLevel = 10000;
            }
            this.gameStats1[1] = this.zoomLevel / 100;
            float f5 = this.gameStats1[1] / 100.0f;
            if (this.battleData[5] < 0) {
                this.battleData[5] = 0;
                if (this.battleData[14] == 0) {
                    this.battleData[12] = 0;
                }
            } else if (this.battleData[5] > ((int) (((this.bV[0] * f5) - 9600) / f5))) {
                this.battleData[5] = (int) (((this.bV[0] * f5) - 9600) / f5);
                if (this.battleData[14] == 0) {
                    this.battleData[12] = 0;
                }
            }
        }
        if (this.hc[1] == 5) {
            int[] iArr30 = this.hc;
            iArr30[6] = iArr30[6] + 1;
            int i30 = this.hl == 0 ? 40 : 0;
            if (this.hc[6] == 1) {
                if (this.hl == 0) {
                    aSound.getInstance().play(SoundType.MERGE_1);
                }
                if (this.hl == 1) {
                    aSound.getInstance().play(SoundType.MERGE_2);
                }
                if (this.hl == 2) {
                    aSound.getInstance().play(SoundType.MERGE_3);
                }
                if (this.hl == 3) {
                    aSound.getInstance().play(SoundType.MERGE_4);
                }
            }
            if (this.hc[6] >= this.godAnim[aB[this.hl]][0].a() - i30 || (aB[this.hl] == 3 && this.hc[6] >= 380)) {
                this.hc[6] = this.godAnim[aB[this.hl]][0].a();
                if (this.hl == 0) {
                    int[] iArr31 = this.hc;
                    iArr31[7] = iArr31[7] + 1;
                    if (this.hc[7] == 1) {
                        aSound.getInstance().play(SoundType.GOD_1);
                    }
                    if (this.hc[7] == 32) {
                        aSound.getInstance().play(SoundType.GOD_2);
                    }
                    if (this.hc[7] >= 30) {
                        int[] iArr32 = this.hc;
                        iArr32[8] = iArr32[8] + 1;
                        if (this.hc[7] >= this.godAnim[1][1].a()) {
                            this.hc[7] = this.godAnim[1][1].a();
                        }
                    }
                    if (this.hc[8] == 1) {
                        aSound.getInstance().play(SoundType.GOD_1);
                    }
                    if (this.hc[8] == 32) {
                        aSound.getInstance().play(SoundType.GOD_2);
                    }
                    if (this.hc[8] >= 30) {
                        int[] iArr33 = this.hc;
                        iArr33[9] = iArr33[9] + 1;
                        if (this.hc[8] >= this.godAnim[1][1].a()) {
                            this.hc[8] = this.godAnim[1][1].a();
                        }
                    }
                    if (this.hc[9] == 1) {
                        aSound.getInstance().play(SoundType.GOD_1);
                    }
                    if (this.hc[9] == 32) {
                        aSound.getInstance().play(SoundType.GOD_2);
                    }
                    if (this.hc[9] >= this.godAnim[1][1].a()) {
                        this.hc[9] = this.godAnim[1][1].a();
                        z = true;
                        if (z) {
                            this.hc[0] -= 20;
                            this.hc[26] = 1;
                            if (this.hc[0] <= 0) {
                                this.hc[0] = 0;
                            }
                            this.hc[21] = 0;
                            int[] iArr34 = this.hc;
                            iArr34[24] = iArr34[24] + 1;
                            if (this.hc[24] == 1) {
                                this.hc[25] = (this.hc[20] / 5) * 2;
                            }
                            this.gameStats1[0] = this.zoomLevel / 100;
                            this.gameStats1[1] = this.zoomLevel / 100;
                            float f6 = this.gameStats1[0] / 100.0f;
                            this.zoomLevel += this.hc[20] / 10;
                            if (this.zoomLevel < this.battleData[28] * 100) {
                                this.zoomLevel = this.battleData[28] * 100;
                            } else if (this.zoomLevel > 10000) {
                                this.zoomLevel = 10000;
                            }
                            this.gameStats1[0] = this.zoomLevel / 100;
                            this.gameStats1[2] = this.zoomLevel / 100;
                            float f7 = this.gameStats1[0] / 100.0f;
                            this.gameStats1[0] = this.gameStats1[1] - this.gameStats1[2];
                            float f8 = 0.0f;
                            float f9 = 0.0f;
                            do {
                                if (this.gameStats1[0] > 0) {
                                    this.gameStats1[0]-= 1;
                                    if (f8 != 0.0f) {
                                        f9 -= 0.01f;
                                    }
                                    f8 -= 0.01f;
                                } else if (this.gameStats1[0] != 0) {
                                    int[] iArr35 = this.gameStats1;
                                    iArr35[0] = iArr35[0] + 1;
                                    if (f8 != 0.0f) {
                                        f9 += 0.01f;
                                    }
                                    f8 += 0.01f;
                                }
                                this.battleData[5] = (int) (-(((((f6 + f7) * (f6 + f9)) / (f6 + f8)) - ((int) (((getWidth() / 2) / (f6 + f8)) - (-((this.battleData[5] + 5) / 10))))) * 10.0f));
                                if (this.battleData[5] < 0) {
                                    this.battleData[5] = 0;
                                }
                            } while (this.gameStats1[0] != 0);
                            if (this.zoomLevel < this.battleData[28] * 100) {
                                this.zoomLevel = this.battleData[28] * 100;
                            } else if (this.zoomLevel > this.hc[22]) {
                                this.zoomLevel = this.hc[22];
                            }
                            this.gameStats1[1] = this.zoomLevel / 100;
                            float f10 = this.gameStats1[1] / 100.0f;
                            if (this.battleData[5] < 0) {
                                this.battleData[5] = 0;
                                if (this.battleData[14] == 0) {
                                    this.battleData[12] = 0;
                                }
                            } else if (this.battleData[5] > ((int) (((this.bV[0] * f10) - 9600) / f10))) {
                                this.battleData[5] = (int) (((this.bV[0] * f10) - 9600) / f10);
                                if (this.battleData[14] == 0) {
                                    this.battleData[12] = 0;
                                }
                            }
                            aSound.getInstance().setVolume(100 - (this.hc[24] * 10));
                            if (this.hc[24] >= 10) {
                                this.hc[24] = 10;
                            }
                            if (this.hc[0] <= 0 && this.zoomLevel >= this.hc[22]) {
                                if (this.hl == 3) {
                                    if (this.bN[0] != 7) {
                                        if (this.battleData[11] + 1 >= 8) {
                                            this.fU = 0;
                                            this.bN[0] = 7;
                                            this.bN[1] = 0;
                                            this.bN[2] = 0;
                                            this.battleData[9] = (this.battleData[7] * ((this.bN[0] * 5) + 10)) / 10;
                                            for (int i31 = 0; i31 < 10; i31++) {
                                                int[] iArr36 = this.battleData;
                                                iArr36[9] = iArr36[9] + ((cB[1] * this.bO[i31][1]) / 100);
                                            }
                                            this.battleData[8] = (this.battleData[6] * (this.bN[0] + 10)) / 10;
                                            for (int i32 = 0; i32 < 10; i32++) {
                                                int[] iArr37 = this.battleData;
                                                iArr37[8] = iArr37[8] + ((cB[0] * this.bO[i32][0]) / 100);
                                            }
                                            this.battleData[25] = 14;
                                        } else {
                                            this.fU = 0;
                                            this.bN[0] = 7;
                                            this.bN[1] = 0;
                                            this.bN[2] = 0;
                                            this.battleData[9] = (this.battleData[7] * ((this.bN[0] * 5) + 10)) / 10;
                                            for (int i33 = 0; i33 < 10; i33++) {
                                                int[] iArr38 = this.battleData;
                                                iArr38[9] = iArr38[9] + ((cB[1] * this.bO[i33][1]) / 100);
                                            }
                                            this.battleData[8] = (this.battleData[6] * (this.bN[0] + 10)) / 10;
                                            for (int i34 = 0; i34 < 10; i34++) {
                                                int[] iArr39 = this.battleData;
                                                iArr39[8] = iArr39[8] + ((cB[0] * this.bO[i34][0]) / 100);
                                            }
                                            this.battleData[25] = 14;
                                        }
                                    }
                                    this.battleData[10] = this.battleData[9];
                                }
                                for (int i35 = 0; i35 < getLength(this.ha); i35++) {
                                    this.ha[i35] = false;
                                }
                                for (int i36 = 0; i36 < getLength(this.hc); i36++) {
                                    this.hc[i36] = 0;
                                }
                                for (int i37 = 0; i37 < getLength(this.hd); i37++) {
                                    this.hd[i37] = 0;
                                }
                                for (int i38 = 0; i38 < getLength(this.hf); i38++) {
                                    this.hf[i38] = 0;
                                }
                                for (int i39 = 0; i39 < getLength(this.he); i39++) {
                                    this.he[i39] = 0;
                                }
                                for (int i40 = 0; i40 < getLength(this.hg); i40++) {
                                    this.hg[i40] = 0;
                                }
                                for (int i41 = 0; i41 < getLength(this.hb); i41++) {
                                    this.hb[i41] = 0.0f;
                                }
                                for (int i42 = 0; i42 < getLength(this.hh); i42++) {
                                    this.hh[i42] = 0;
                                }
                                for (int i43 = 0; i43 < getLength(this.hi); i43++) {
                                    this.hi[i43] = 0;
                                }
                                for (int i44 = 0; i44 < getLength(this.textTextures); i44++) {
                                    if (this.textTextures[i44].isLoaded()) {
                                        this.textTextures[i44].reset();
                                    }
                                }
                                for (int i45 = 0; i45 < 4; i45++) {
                                    this.textTextures[i45 + 1].drawText(this.stageFirstMessageText[0][i45], "FONT_SYSTEM_BOLD", 30, 1);
                                }
                                this.textTextures[10].drawText(this.optionText[1], "FONT_SYSTEM_BOLD", 30, 1);
                                if (aB[this.hl] == 0 || aB[this.hl] == 1 || aB[this.hl] == 3) {
                                    this.hm[aB[this.hl]] = 1;
                                }
                                this.gameStats1[0] = 0;
                                int i46 = 0;
                                while (true) {
                                    if (i46 >= 10) {
                                        break;
                                    } else if (this.eQ == i46 && this.battleData[0] == 47) {
                                        this.gameStats1[0] = i46;
                                        break;
                                    } else {
                                        i46++;
                                    }
                                }
                                if (this.gameStats1[0] >= 1) {
                                    int[] iArr40 = this.gameStats1;
                                    iArr40[0] = iArr40[0] + 1;
                                }
                                if (this.cj[4] == 0) {
                                    aSound.getInstance().stop(-1);
                                    aSound.getInstance().play(cn[(this.gameStats1[0] + this.battleData[0]) * 3]);
                                } else {
                                    aSound.getInstance().stop(-1);
                                    aSound.getInstance().play(cn[((this.gameStats1[0] + this.battleData[0]) * 3) + 2]);
                                }
                            }
                        }
                    }
                    z = false;
                    if (z) {
                    }
                } else if (this.hl == 1) {
                    int[] iArr41 = this.hc;
                    iArr41[7] = iArr41[7] + 1;
                    if (this.hc[7] == 1) {
                        this.hm[2] = 1;
                        if (this.hm[2] == 1) {
                            i = 0;
                            for (int i47 = 1; i47 < getLength(this.unitBattleStats[1]); i47++) {
                                if (this.unitBattleStats[1][i47][0] != 0 && this.unitBattleStats[1][i47][1] != 4) {
                                    int i48 = 0;
                                    while (true) {
                                        if (i48 >= 10) {
                                            break;
                                        } else if (this.slotEnemyIDs[i48] == this.unitBattleStats[1][i47][0]) {
                                            i = i48;
                                            break;
                                        } else {
                                            i48++;
                                        }
                                    }
                                    this.enemySlotModels[i].getModelCollision(0).a().a(this.enemySlotModels[i], this.enemySlotModels[i].getModelCollision(0).b(), this.enemySlotModels[i].getModelCollision(0).c(), this.x);
                                    this.unitBattleStats[1][i47][30] = (this.x.x * 10) + 0;
                                    this.unitBattleStats[1][i47][32] = 10;
                                    this.unitBattleStats[1][i47][31] = 0;
                                    this.unitBattleStats[1][i47][33] = aMath.rand(60) + 10;
                                }
                            }
                            if (this.hc[7] >= 1) {
                                for (int i49 = 1; i49 < getLength(this.unitBattleStats[1]); i49++) {
                                    if (this.unitBattleStats[1][i49][0] != 0 && this.unitBattleStats[1][i49][1] != 4) {
                                        if (this.unitBattleStats[1][i49][31] >= this.unitBattleStats[1][i49][33]) {
                                            int[] iArr42 = this.unitBattleStats[1][i49];
                                            iArr42[3] = iArr42[3] - this.unitBattleStats[1][i49][32];
                                            int[] iArr43 = this.unitBattleStats[1][i49];
                                            iArr43[32] = iArr43[32] + this.unitBattleStats[1][i49][32];
                                            if (this.unitBattleStats[1][i49][32] >= 100000) {
                                                this.unitBattleStats[1][i49][32] = 1000000;
                                            }
                                        } else {
                                            this.unitBattleStats[1][i49][3] -= 1;
                                        }
                                        int[] iArr44 = this.unitBattleStats[1][i49];
                                        iArr44[31] = iArr44[31] + 1;
                                        if (this.unitBattleStats[1][i49][30] >= this.unitBattleStats[1][i49][3]) {
                                            this.unitBattleStats[1][i49][3] = this.unitBattleStats[1][i49][30];
                                        }
                                    }
                                }
                            }
                            if (this.hc[7] >= this.godAnim[2][1].a()) {
                                this.hc[7] = this.godAnim[2][1].a();
                                if (this.hm[2] == 1) {
                                    for (int i50 = 1; i50 < getLength(this.unitBattleStats[1]); i50++) {
                                        if (this.unitBattleStats[1][i50][0] != 0 && this.unitBattleStats[1][i50][1] != 4) {
                                            int i51 = 0;
                                            while (true) {
                                                if (i51 >= 10) {
                                                    break;
                                                } else if (this.slotEnemyIDs[i51] == this.unitBattleStats[1][i50][0]) {
                                                    i = i51;
                                                    break;
                                                } else {
                                                    i51++;
                                                }
                                            }
                                            this.enemySlotModels[i].getModelCollision(0).a().a(this.enemySlotModels[i], this.enemySlotModels[i].getModelCollision(0).b(), this.enemySlotModels[i].getModelCollision(0).c(), this.x);
                                            this.unitBattleStats[1][i50][3] = (this.x.x * 10) + 0;
                                        }
                                    }
                                    this.hm[2] = 0;
                                }
                                z = true;
                                if (z) {
                                }
                            }
                            z = false;
                            if (z) {
                            }
                        }
                    }
                    i = 0;
                    if (this.hc[7] >= 1) {
                    }
                    if (this.hc[7] >= this.godAnim[2][1].a()) {
                    }
                    z = false;
                    if (z) {
                    }
                } else {
                    if (this.hl == 2) {
                        int[] iArr45 = this.hc;
                        iArr45[7] = iArr45[7] + 1;
                        if (this.hc[7] == 1) {
                            this.hh[0] = aMath.rand(20) - 10;
                            this.hi[0] = aMath.rand(20) - 5;
                        }
                        for (int i52 = 0; i52 < 9; i52++) {
                            if (this.hc[i52 + 7] >= 6) {
                                int[] iArr46 = this.hc;
                                int i53 = i52 + 8;
                                iArr46[i53] = iArr46[i53] + 1;
                                if (this.hc[i52 + 8] != 1) {
                                }
                                do {
                                    this.hh[i52 + 1] = aMath.rand(20) - 10;
                                    this.hi[i52 + 1] = aMath.rand(20) - 5;
                                    if (this.hh[i52 + 0] == this.hh[i52 + 1]) {
                                    }
                                } while (this.hi[i52 + 0] == this.hi[i52 + 1]);
                            }
                        }
                        z = false;
                        for (int i54 = 0; i54 < 10; i54++) {
                            if (i54 <= 8) {
                                if (this.hc[i54 + 7] >= this.godAnim[0][1].a()) {
                                    this.hc[i54 + 7] = this.godAnim[0][1].a();
                                }
                            } else if (this.hc[i54 + 7] >= this.godAnim[0][1].a()) {
                                this.hc[i54 + 7] = this.godAnim[0][1].a();
                                z = true;
                            }
                        }
                    } else if (this.hl == 3) {
                        if (this.hc[7] == 0) {
                            this.hd[0] = ((getWidth() / 2) - 82) - 4;
                            this.he[2] = (((getHeight() / 2) - 23) - 64) - 60;
                        }
                        int[] iArr47 = this.hc;
                        iArr47[7] = iArr47[7] + 10;
                        if (this.hc[7] >= 255) {
                            this.hc[7] = 255;
                            int[] iArr48 = this.hd;
                            iArr48[0] = iArr48[0] / 2;
                            int[] iArr49 = this.he;
                            iArr49[2] = iArr49[2] / 2;
                            if (this.hd[0] <= 0 && this.he[2] <= 0) {
                                this.eN = 0;
                                z = true;
                            }
                        }
                        z = false;
                    } else {
                        z = true;
                    }
                    if (z) {
                    }
                }
            }
        }
        int[] iArr50 = this.hc;
        iArr50[2] = iArr50[2] + 1;
        return true;
    }

    void itemShopLoad() {
        if (this.be == 1) {
            this.be = 2;
        }
        loadTextures2();
        for (int i = 6; i < getLength(this.uiTextures) - 6; i++) {
            if (this.uiTextures[i].isLoaded()) {
                this.uiTextures[i].reset();
            }
        }
        for (int i2 = 0; i2 < getLength(this.gp); i2++) {
            this.gp[i2] = false;
        }
        this.gp[3] = true;
        for (int i3 = 0; i3 < getLength(this.boxCounts); i3++) {
            this.boxCounts[i3] = 0;
        }
        for (int i4 = 0; i4 < getLength(this.buttonCoordinates1); i4++) {
            for (int i5 = 0; i5 < getLength(this.buttonCoordinates1[i4]); i5++) {
                this.buttonCoordinates1[i4][i5] = 0;
            }
        }
        for (int i6 = 0; i6 < getLength(this.fx); i6++) {
            this.fx[i6] = 0;
        }
        for (int i7 = 0; i7 < getLength(this.eE); i7++) {
            this.eE[i7] = false;
        }
        for (int i8 = 0; i8 < getLength(this.blinkFrame); i8++) {
            this.blinkFrame[i8] = 0;
        }
        for (int i9 = 0; i9 < getLength(this.gameStats1); i9++) {
            this.gameStats1[i9] = 0;
        }
        for (int i10 = 0; i10 < getLength(this.fx); i10++) {
            this.fx[i10] = 0;
        }
        for (int i11 = 0; i11 < getLength(this.eK); i11++) {
            this.eK[i11] = 0;
        }
        for (int i12 = 0; i12 < getLength(this.hk); i12++) {
            this.hk[i12] = 0;
        }
        for (int i13 = 0; i13 < getLength(this.fC); i13++) {
            this.fC[i13] = 0;
        }
        for (int i14 = 0; i14 < getLength(this.fz); i14++) {
            this.fz[i14] = 0;
        }
        for (int i15 = 0; i15 < getLength(this.gZ); i15++) {
            this.gZ[i15] = 0;
        }
        for (int i16 = 0; i16 < getLength(this.fy); i16++) {
            this.fy[i16] = 0;
        }
        for (int i17 = 0; i17 < getLength(this.scrollAmount); i17++) {
            this.scrollAmount[i17] = 0;
        }
        for (int i18 = 0; i18 < getLength(this.fR); i18++) {
            this.fR[i18] = 0;
        }
        for (int i19 = 0; i19 < getLength(this.gS); i19++) {
            this.gS[i19] = 0;
        }
        this.boxScale = 200;
        for (int i20 = 0; i20 < getLength(this.gm); i20++) {
            this.gm[i20] = 0;
        }
        this.gm[1] = 297;
        if (this.previousScreen == 0) {
            this.blinkFrame[0] = getLength(cu) - 1;
        }
        for (int i21 = 0; i21 < getLength(this.gB); i21++) {
            this.gB[i21] = 0;
        }
        this.eE[0] = true;
        this.boxCounts[0] = 1;
        this.boxCounts[2] = 0;
        this.boxCounts[1] = 10;
        if (this.gR == 0) {
            this.gB[0] = 0;
        } else {
            this.gB[0] = 6;
        }
        this.gameStats1[0] = -((this.boxScale * this.boxCounts[0]) + (this.gB[0] * this.boxScale));
        this.gP[0] = this.boxCounts[0] + this.gB[0];
        this.gP[2] = this.gB[0];
        this.gP[1] = (this.boxScale * 100) + (this.gameStats1[0] / this.boxScale);
        this.gB[0] = 6;
        this.buttonCoordinates1[0][0] = 4;
        this.buttonCoordinates1[0][1] = 365;
        this.buttonCoordinates1[0][2] = 383;
        this.buttonCoordinates1[0][3] = 89;
        this.buttonCoordinates1[1][0] = (((getWidth() / 2) - 163) + 242) - 15;
        this.buttonCoordinates1[1][1] = 62;
        this.buttonCoordinates1[1][2] = 88;
        this.buttonCoordinates1[1][3] = 88;
        this.buttonCoordinates1[2][0] = (((getWidth() / 2) - 163) + 242) - 15;
        this.buttonCoordinates1[2][1] = 191;
        this.buttonCoordinates1[2][2] = 88;
        this.buttonCoordinates1[2][3] = 88;
        this.buttonCoordinates1[5][0] = 4;
        this.buttonCoordinates1[5][1] = 541;
        this.buttonCoordinates1[5][2] = 95;
        this.buttonCoordinates1[5][3] = 95;
        this.buttonCoordinates1[14][0] = this.excessWidth + 680;
        this.buttonCoordinates1[14][1] = 552;
        this.buttonCoordinates1[14][2] = 88;
        this.buttonCoordinates1[14][3] = 88;
        for (int i22 = 0; i22 < getLength(this.textTextures); i22++) {
            if (this.textTextures[i22].isLoaded()) {
                this.textTextures[i22].reset();
            }
        }
        for (int i23 = 0; i23 < getLength(this.gA); i23++) {
            this.gA[i23] = 0;
        }
        for (int i24 = 0; i24 < getLength(this.itemNameText); i24++) {
            this.textTextures[i24].drawText(this.itemNameText[i24], "FONT_SYSTEM_BOLD", 30, 1);
            this.gA[0] = i24 + 1;
        }
        if (this.gP[2] < this.gB[0]) {
            this.textTextures[this.gA[0]].drawText(this.pageNameText[6], "FONT_SYSTEM_BOLD", 30, 1);
        } else {
            this.textTextures[this.gA[0]].drawText(this.pageNameText[8], "FONT_SYSTEM_BOLD", 30, 1);
        }
        this.gA[1] = this.gA[0] + 1;
        for (int i25 = this.gA[1]; i25 < this.gA[1] + 3; i25++) {
            this.textTextures[i25].drawText(this.itemExplanationText[this.gP[2]][i25 - this.gA[1]], "FONT_SYSTEM_BOLD", 30, 1);
        }
        if (this.uiTextures[6].isLoaded()) {
            this.uiTextures[6].reset();
        }
        if (!this.uiTextures[6].isLoaded()) {
            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 21)), MyUtility.getString(String.format("img%03d.imgcut", 21)));
        }
        if (this.uiTextures[7].isLoaded()) {
            this.uiTextures[7].reset();
        }
        if (!this.uiTextures[7].isLoaded()) {
            this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 37)), MyUtility.getString(String.format("img%03d.imgcut", 37)));
        }
        if (this.uiTextures[8].isLoaded()) {
            this.uiTextures[8].reset();
        }
        if (!this.uiTextures[8].isLoaded()) {
            this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 38)), MyUtility.getString(String.format("img%03d.imgcut", 38)));
        }
        if (!this.uiTextures[10].isLoaded()) {
            this.uiTextures[10].reset();
        }
        if (!this.uiTextures[10].isLoaded()) {
            this.uiTextures[10].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
        }
        if (!this.uiTextures[11].isLoaded()) {
            this.uiTextures[11].reset();
        }
        if (!this.uiTextures[11].isLoaded()) {
            this.uiTextures[11].load(MyUtility.getString(String.format("item%03d.png", 0)), MyUtility.getString(String.format("item%03d.imgcut", 0)));
        }
        for (int i26 = 0; i26 < getLength(this.gF); i26++) {
            this.gF[i26] = false;
        }
        this.isScrolling = false;
    }

    void equipDraw(aTextureRenderer atexturerenderer) {
        boolean z;
        float f = 0;
        float f2 = 0;
        atexturerenderer.drawScaledImage(this.uiTextures[7], 0, 48, getWidth(), 542, 0);
        atexturerenderer.drawScaledImagef(this.uiTextures[7], (this.excessWidth / 2) + 45, 62, 5);
        atexturerenderer.drawScaledImagef(this.uiTextures[7], (this.excessWidth / 2) + 45, 127, 7);
        atexturerenderer.drawScaledImagef(this.uiTextures[7], (this.excessWidth / 2) + 45, 222, 8);
        atexturerenderer.drawScaledImagef(this.uiTextures[7], (this.excessWidth / 2) + 45, 222, 8);
        atexturerenderer.drawScaledImagef(this.uiTextures[7], (this.excessWidth / 2) + 176, 90, 11);
        atexturerenderer.drawScaledImagef(this.uiTextures[8], 0, 287, 48);
        if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1]) {
            atexturerenderer.drawScaledImage(this.textTextures[this.gA[4]], 146, 291, 1);
        }
        if (this.gJ) {
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], this.excessWidth + (652 - (dv[this.fx[11]] / 2)), 287 - (dv[this.fx[11]] / 2), dv[this.fx[11]] + 304, dv[this.fx[11]] + 74, 0);
            atexturerenderer.drawScaledImage(this.uiTextures[7], this.excessWidth + (690 - (dv[this.fx[11]] / 2)), 293 - (dv[this.fx[11]] / 2), dv[this.fx[11]] + 231, dv[this.fx[11]] + 62, 4);
            if (!this.eE[0] && !this.eE[1] && !this.gU && !this.gu && isPointerDown() && isTouching(this.buttonCoordinates1[11][0], this.buttonCoordinates1[11][1], this.buttonCoordinates1[11][2], this.buttonCoordinates1[11][3])) {
                int[] iArr = this.blinkFrame;
                iArr[10] = iArr[10] + 1;
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], this.excessWidth + 652, 287, 304, 74, ((this.blinkFrame[10] % 4) / 2) + 1);
            }
        } else if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1]) {
            atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], this.excessWidth + (652 - (dv[this.fx[11]] / 2)), 287 - (dv[this.fx[11]] / 2), dv[this.fx[11]] + 304, dv[this.fx[11]] + 74, 0);
            atexturerenderer.drawScaledImage(this.uiTextures[7], this.excessWidth + (690 - (dv[this.fx[11]] / 2)), 293 - (dv[this.fx[11]] / 2), dv[this.fx[11]] + 231, dv[this.fx[11]] + 62, 3);
            if (!this.eE[5] && !this.eE[0] && !this.eE[1] && !this.gU && !this.gu && isPointerDown() && isTouching(this.buttonCoordinates1[11][0], this.buttonCoordinates1[11][1], this.buttonCoordinates1[11][2], this.buttonCoordinates1[11][3])) {
                atexturerenderer.drawScaledImage(this.settingsMenuTexture[3], this.excessWidth + 652, 287, 304, 74, ((this.blinkFrame[3] % 4) / 2) + 1);
            }
        }
        int i = 1;
        while (true) {
            int i2 = i;
            if (i2 >= this.boxCounts[0] + 1 + this.boxCounts[1] + this.boxCounts[2]) {
                break;
            }
            if (this.ff[0] == i2) {
                this.gameStats1[0] = this.gH;
                if (this.ff[5] == 0) {
                    this.gameStats1[1] = this.fx[2];
                } else {
                    this.gameStats1[1] = 0;
                }
                f2 = -(328 - this.boxSize[i2][0]);
            } else if (this.ff[0] + 1 == i2) {
                this.gameStats1[0] = 0;
                if (this.ff[5] == 1) {
                    this.gameStats1[1] = this.fx[2];
                } else {
                    this.gameStats1[1] = 0;
                }
                f2 = 328 - this.boxSize[i2][0];
            } else if (this.ff[0] + 2 == i2) {
                this.gameStats1[0] = 0;
                this.gameStats1[1] = 0;
                f2 = (328 - this.boxSize[i2][0]) + ((328 - this.boxSize[i2 - 1][0]) / 2.0f);
            } else if (this.ff[0] + 3 == i2) {
                this.gameStats1[0] = 0;
                this.gameStats1[1] = 0;
                f2 = (328 - this.boxSize[i2][0]) + ((328 - this.boxSize[i2 - 1][0]) / 2.0f) + ((328 - this.boxSize[i2 - 2][0]) / 2.0f);
            } else if (this.ff[0] - 1 == i2) {
                this.gameStats1[0] = 0;
                if (this.ff[5] == -1) {
                    this.gameStats1[1] = this.fx[2];
                } else {
                    this.gameStats1[1] = 0;
                }
                f2 = -((328 - this.boxSize[i2][0]) + ((328 - this.boxSize[i2 + 1][0]) / 2.0f));
            } else if (this.ff[0] - 2 == i2) {
                this.gameStats1[0] = 0;
                this.gameStats1[1] = 0;
                f2 = -((328 - this.boxSize[i2][0]) + ((328 - this.boxSize[i2 + 1][0]) / 2.0f) + ((328 - this.boxSize[i2 + 2][0]) / 2.0f));
            } else {
                i = i2 + 1;
            }
            if (i2 - this.boxCounts[0] <= -1 || i2 - this.boxCounts[0] >= this.boxCounts[1] + 1) {
                int i3 = 0;
                atexturerenderer.drawScaledImagef(this.uiTextures[8], ((((((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2)) + this.gameStats1[0]) + f2) + (((cC[this.gameStats1[0]] * 328) / 100.0f) / 2.0f)) - (dv[this.gameStats1[1]] / 2), (559 - this.boxSize[i2][1]) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (this.boxSize[i2][0] - ((cC[this.gameStats1[0]] * 328) / 100.0f)), this.boxSize[i2][1] + dv[this.gameStats1[1]], 53);
                if (i2 - this.boxCounts[0] <= -1) {
                    i3 = this.gE[(-(i2 - this.boxCounts[0])) - 1];
                } else if (i2 - this.boxCounts[0] >= this.boxCounts[1] + 1) {
                    i3 = this.gE[((i2 - this.boxCounts[0]) - this.boxCounts[1]) - 1];
                }
                if (i3 == 0 || i3 == 1) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], ((((((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2)) + this.gameStats1[0]) + f2) + (((cC[this.gameStats1[0]] * 328) / 100.0f) / 2.0f)) - (dv[this.gameStats1[1]] / 2), (559.0f - ((162.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (this.boxSize[i2][0] - ((cC[this.gameStats1[0]] * 328) / 100.0f)), dv[this.gameStats1[1]] + ((60.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), 49);
                } else {
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], ((((((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2)) + this.gameStats1[0]) + f2) + (((cC[this.gameStats1[0]] * 328) / 100.0f) / 2.0f)) - (dv[this.gameStats1[1]] / 2), (559.0f - ((183.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (this.boxSize[i2][0] - ((cC[this.gameStats1[0]] * 328) / 100.0f)), dv[this.gameStats1[1]] + ((60.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), 49);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((((((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2)) + this.gameStats1[0]) + f2) + ((132.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f)) + ((((132.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f)) - (dv[this.gameStats1[1]] / 2), (559.0f - ((126.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f)) - (dv[this.gameStats1[1]] / 2), dv[this.gameStats1[1]] + (((60.0f * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((60.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f)), dv[this.gameStats1[1]] + ((60.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), (i3 - 1) + 73);
                }
            } else {
                atexturerenderer.drawScaledImagef(this.uiTextures[8], (((cC[this.gameStats1[0]] * 328) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2, 559 - this.boxSize[i2][1], this.boxSize[i2][0] - ((cC[this.gameStats1[0]] * 328) / 100.0f), this.boxSize[i2][1], 47);
            }
            if (i2 - this.boxCounts[0] >= 0 && i2 - this.boxCounts[0] <= this.boxCounts[1]) {
                if (this.bq[this.unitBuyStats[this.boxCatIDs[i2 - this.boxCounts[0]]][15]] < this.unitBuyStats[this.boxCatIDs[i2 - this.boxCounts[0]]][0]) {
                    atexturerenderer.setColor(255, 255, 255);
                    int a = this.textTextures[i2 - this.boxCounts[0]].getImgWidth();
                    atexturerenderer.drawScaledImagef(this.textTextures[i2 - this.boxCounts[0]], (((((((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2)) + this.gameStats1[0]) + f2) + (((328.0f * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) - (((a * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) + (((((a * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f) / 2.0f), 559.0f - ((254.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), ((a * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((a * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f), (30.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((((309.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2 + ((6.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) + ((((6.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), 559.0f - ((102.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), ((309.0f * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((309.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (92.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f, 56);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], ((180.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2, 559.0f - ((138.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), (138.0f * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f, (34.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f, 57);
                    if (this.ff[3] == 0) {
                        atexturerenderer.setImageColor(0, 0, 0);
                    }
                } else if (this.bu[this.boxCatIDs[i2 - this.boxCounts[0]]] == 0) {
                    atexturerenderer.setColor(255, 255, 255);
                    int a2 = this.textTextures[i2 - this.boxCounts[0]].getImgWidth();
                    atexturerenderer.drawScaledImagef(this.textTextures[i2 - this.boxCounts[0]], (((((((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2)) + this.gameStats1[0]) + f2) + (((328.0f * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) - (((a2 * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) + (((((a2 * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f) / 2.0f), 559.0f - ((254.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), ((a2 * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((a2 * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f), (30.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (((((309.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2 + ((6.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) + ((((6.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), 559.0f - ((102.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), ((309.0f * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((309.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (92.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f, 56);
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], ((180.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2, 559.0f - ((138.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), (138.0f * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f, (34.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f, 57);
                    if (this.ff[3] == 0) {
                        atexturerenderer.setImageColor(0, 0, 0);
                    }
                } else {
                    atexturerenderer.setColor(255, 255, 255);
                    int a3 = this.textTextures[i2 - this.boxCounts[0]].getImgWidth();
                    atexturerenderer.drawScaledImagef(this.textTextures[i2 - this.boxCounts[0]], (((((((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2)) + this.gameStats1[0]) + f2) + (((328.0f * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) - (((a3 * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) / 2.0f)) + (((((a3 * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f) / 2.0f), 559.0f - ((254.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), ((a3 * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) - ((((a3 * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f) * cC[this.gameStats1[0]]) / 100.0f), (30.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f);
                }
                atexturerenderer.drawScaledImagef(this.uiTextures[(i2 + 11) - this.boxCounts[0]], (((((328.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f) / 2.0f) + ((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2, 559.0f - ((219.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f), ((328.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) - ((((328.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (114.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f, 0);
                atexturerenderer.setImageColor(255, 255, 255);
                if (this.bu[this.boxCatIDs[i2 - this.boxCounts[0]]] == 0) {
                    if (this.ff[3] == 0) {
                        if (this.aY >= this.unitBuyStats[this.boxCatIDs[i2 - this.boxCounts[0]]][1]) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[8], ((15.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2, 559.0f - ((131.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), (187.0f * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f, (53.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f, 58);
                        }
                    } else if (this.catfood >= this.unitBuyStats[this.boxCatIDs[i2 - this.boxCounts[0]]][1]) {
                        atexturerenderer.drawScaledImagef(this.uiTextures[8], ((15.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) + ((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2, 559.0f - ((131.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f), (225.0f * ((this.boxSize[i2][0] * 10000.0f) / 328.0f)) / 10000.0f, (53.0f * ((this.boxSize[i2][1] * 10000.0f) / 263.0f)) / 10000.0f, 58);
                    }
                }
                int i4 = 0;
                while (true) {
                    int i5 = i4;
                    if (i5 >= getLength(this.slotCatIDs)) {
                        break;
                    }
                    if (this.slotCatIDs[i5] == this.boxCatIDs[i2 - this.boxCounts[0]] + 2) {
                        if (this.ff[2] < 0 || this.ff[2] > this.boxCounts[1]) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[9], ((((-59.0f) * (((this.boxSize[i2][0] * 100.0f) / 328.0f) / 100.0f)) * cC[this.gameStats1[0]]) / 100.0f) + ((getWidth() / 2) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2 + ((223.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f), 559.0f - ((217.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f), ((80.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) - ((((80.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (80.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f, 0);
                        } else if (this.boxCatIDs[this.ff[2]] + 2 != this.boxCatIDs[i2 - this.boxCounts[0]] + 2) {
                            atexturerenderer.drawScaledImagef(this.uiTextures[9], ((((-59.0f) * (((this.boxSize[i2][0] * 100.0f) / 328.0f) / 100.0f)) * cC[this.gameStats1[0]]) / 100.0f) + ((getWidth() / 2) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2 + ((223.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f), 559.0f - ((217.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f), ((80.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) - ((((80.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (80.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f, 0);
                        } else if (!this.fn) {
                            if (this.eE[3]) {
                                atexturerenderer.drawScaledImagef(this.uiTextures[9], ((((-59.0f) * (((this.boxSize[i2][0] * 100.0f) / 328.0f) / 100.0f)) * cC[this.gameStats1[0]]) / 100.0f) + ((getWidth() / 2) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2 + ((223.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f), 559.0f - ((217.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f), ((80.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) - ((((80.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (80.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f, 0);
                            } else {
                                atexturerenderer.drawScaledImagef(this.uiTextures[9], ((((-59.0f) * (((this.boxSize[i2][0] * 100.0f) / 328.0f) / 100.0f)) * cC[this.gameStats1[0]]) / 100.0f) + ((getWidth() / 2) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2) + this.gameStats1[0] + f2 + ((223.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f), 559.0f - ((217.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f), ((80.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) - ((((80.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (80.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f, 0);
                            }
                        }
                    }
                    i4 = i5 + 1;
                }
                if (this.bu[this.boxCatIDs[i2 - this.boxCounts[0]]] == 1) {
                    int i6 = this.baseUpgrades[this.boxCatIDs[i2 - this.boxCounts[0]]] + 1;
                    if (i6 < this.bi) {
                        int i7 = 0;
                        do {
                            int i8 = i7;
                            int i9 = i6;
                            atexturerenderer.drawScaledImagef(this.uiTextures[5], ((((((-117.0f) + (i8 * ((29.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2)) + this.gameStats1[0]) + f2) - (i8 * ((29.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f))) + ((281.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f), 559.0f - ((152.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f), ((30.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) - ((((30.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (42.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f, i9 % 10);
                            i6 = i9 / 10;
                            i7 = i8 + 1;
                        } while (i6 > 0);
                    } else {
                        atexturerenderer.drawScaledImagef(this.uiTextures[8], ((((((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2)) + this.gameStats1[0]) + f2) - (1 * ((43.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f))) + ((290.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) + ((((((1 * ((43.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f)) - 126.0f) * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), 559.0f - ((144.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f), ((58.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) - ((((58.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (35.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f, 52);
                    }
                    int i10 = ((((this.unitStats[this.boxCatIDs[i2 - this.boxCounts[0]] + 2][0][6] / 100) * this.eQ) * 50) / 100) + (this.unitStats[this.boxCatIDs[i2 - this.boxCounts[0]] + 2][0][6] / 100);
                    int i11 = 0;
                    do {
                        int i12 = i11;
                        int i13 = i10;
                        atexturerenderer.drawScaledImagef(this.uiTextures[8], ((((((-118.0f) + (i12 * ((13.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f))) * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f) + ((((((getWidth() / 2.0f) - (this.boxSize[i2][0] / 2.0f)) + (this.boxScale * i2)) + this.gameStats1[0]) + f2) - (i12 * ((13.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f))) + ((282.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f), 559.0f - ((98.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f), ((13.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) - ((((13.0f * ((this.boxSize[i2][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (26.0f * ((this.boxSize[i2][1] * 100.0f) / 263.0f)) / 100.0f, (i13 % 10) + 1);
                        i10 = i13 / 10;
                        i11 = i12 + 1;
                    } while (i10 > 0);
                }
            }
            atexturerenderer.setColor(0, 0, 0);
            if (this.gI && this.ff[0] == i2) {
                atexturerenderer.setAlpha((cC[this.gameStats1[0]] * 255) / 100);
            } else {
                atexturerenderer.setAlpha((255 - ((((this.boxSize[i2][0] * 100) / 328) * 255) / 100)) * 2);
            }
            if (i2 - this.boxCounts[0] > -1 && i2 - this.boxCounts[0] < this.boxCounts[1] + 1) {
                atexturerenderer.drawRectangle((int) (((getWidth() / 2) - (this.boxSize[i2][0] / 2)) + (this.boxScale * i2) + this.gameStats1[0] + f2 + (((cC[this.gameStats1[0]] * 328) / 100) / 2)), 559 - this.boxSize[i2][1], this.boxSize[i2][0] - ((cC[this.gameStats1[0]] * 328) / 100), this.boxSize[i2][1]);
            }
            i = i2 + 1;
        }
        int i14 = 0;
        while (true) {
            if (i14 >= getLength(this.slotCatIDs)) {
                z = false;
                break;
            }
            if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1] && this.slotCatIDs[i14] == this.boxCatIDs[this.ff[2]] + 2 && !this.fn) {
                z = true;
                break;
            }
            i14++;
        }
        if (this.ff[2] < 0 || this.ff[2] > this.boxCounts[1]) {
            if ((this.ff[2] <= -1 || this.ff[2] >= this.boxCounts[1] + 1) && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[5]) {
                if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                    atexturerenderer.drawScaledImage(this.uiTextures[8], (this.excessWidth / 2) + 316, 297, 324, 260, 31);
                } else {
                    atexturerenderer.drawScaledImage(this.uiTextures[8], (this.excessWidth / 2) + 316, 297, 324, 260, 32);
                }
            }
        } else if (!z && this.bu[this.boxCatIDs[this.ff[2]]] >= 1 && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[5]) {
            if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                atexturerenderer.drawScaledImage(this.uiTextures[8], (this.excessWidth / 2) + 316, 297, 324, 260, 31);
            } else {
                atexturerenderer.drawScaledImage(this.uiTextures[8], (this.excessWidth / 2) + 316, 297, 324, 260, 32);
            }
        }
        int i15 = 1;
        while (true) {
            int i16 = i15;
            if (i16 >= this.boxCounts[0] + 1 + this.boxCounts[1] + this.boxCounts[2]) {
                break;
            }
            if (this.ff[0] == i16) {
                this.gameStats1[0] = this.gH;
                if (this.ff[5] == 0) {
                    this.gameStats1[1] = this.fx[2];
                } else {
                    this.gameStats1[1] = 0;
                }
                f = -(328 - this.boxSize[i16][0]);
            } else if (this.ff[0] + 1 == i16) {
                this.gameStats1[0] = 0;
                if (this.ff[5] == 1) {
                    this.gameStats1[1] = this.fx[2];
                } else {
                    this.gameStats1[1] = 0;
                }
                f = 328 - this.boxSize[i16][0];
            } else if (this.ff[0] + 2 == i16) {
                this.gameStats1[0] = 0;
                this.gameStats1[1] = 0;
                f = (328 - this.boxSize[i16][0]) + ((328 - this.boxSize[i16 - 1][0]) / 2.0f);
            } else if (this.ff[0] + 3 == i16) {
                this.gameStats1[0] = 0;
                this.gameStats1[1] = 0;
                f = (328 - this.boxSize[i16][0]) + ((328 - this.boxSize[i16 - 1][0]) / 2.0f) + ((328 - this.boxSize[i16 - 2][0]) / 2.0f);
            } else if (this.ff[0] - 1 == i16) {
                this.gameStats1[0] = 0;
                if (this.ff[5] == -1) {
                    this.gameStats1[1] = this.fx[2];
                } else {
                    this.gameStats1[1] = 0;
                }
                f = -((328 - this.boxSize[i16][0]) + ((328 - this.boxSize[i16 + 1][0]) / 2.0f));
            } else if (this.ff[0] - 2 == i16) {
                this.gameStats1[0] = 0;
                this.gameStats1[1] = 0;
                f = -((328 - this.boxSize[i16][0]) + ((328 - this.boxSize[i16 + 1][0]) / 2.0f));
            } else {
                i15 = i16 + 1;
            }
            if (i16 - this.boxCounts[0] >= 0 && i16 - this.boxCounts[0] <= this.boxCounts[1] && this.bq[this.unitBuyStats[this.boxCatIDs[i16 - this.boxCounts[0]]][15]] >= this.unitBuyStats[this.boxCatIDs[i16 - this.boxCounts[0]]][0] && this.bu[this.boxCatIDs[i16 - this.boxCounts[0]]] == 0 && (this.blinkFrame[3] % 8) / 4 == 0) {
                atexturerenderer.drawScaledImagef(this.newTexture, ((((-135.0f) * (((this.boxSize[i16][0] * 100.0f) / 328.0f) / 100.0f)) * cC[this.gameStats1[0]]) / 100.0f) + f + ((getWidth() / 2.0f) - (this.boxSize[i16][0] / 2.0f)) + (this.boxScale * i16) + this.gameStats1[0] + ((269.0f * ((this.boxSize[i16][0] * 100.0f) / 328.0f)) / 100.0f), 559.0f - ((303.0f * ((this.boxSize[i16][1] * 100.0f) / 263.0f)) / 100.0f), ((80.0f * ((this.boxSize[i16][0] * 100.0f) / 328.0f)) / 100.0f) - ((((80.0f * ((this.boxSize[i16][0] * 100.0f) / 328.0f)) / 100.0f) * cC[this.gameStats1[0]]) / 100.0f), (80.0f * ((this.boxSize[i16][1] * 100.0f) / 263.0f)) / 100.0f, 0);
            }
            i15 = i16 + 1;
        }
        int i17 = 0;
        while (true) {
            int i18 = i17;
            if (i18 >= 10) {
                break;
            }
            if (this.fh - 1 != i18 && this.slotCatIDs[i18] != -1 && this.uniTextures[i18].isLoaded()) {
                atexturerenderer.drawScaledImage(this.uniTextures[i18], this.fj[i18][0] + this.fg[i18][0], this.fj[i18][1] + this.fg[i18][1], 110, 85, 0);
            }
            i17 = i18 + 1;
        }
        if (this.fh >= 1) {
            atexturerenderer.setImageAlpha(255 - this.fi);
            if (!this.fn) {
                if (this.eE[3]) {
                    atexturerenderer.drawScaledImage(this.uniTextures[this.fh - 1], (getCurrentXTouch() - this.fl) - (((this.fj[this.fh - 1][2] * 110) / 100) / 2), (getCurrentYTouch() - this.fm) - (((this.fj[this.fh - 1][3] * 85) / 100) / 2), ((this.fj[this.fh - 1][2] * 110) / 100) + 110, ((this.fj[this.fh - 1][3] * 85) / 100) + 85, 0);
                } else {
                    atexturerenderer.drawScaledImage(this.uniTextures[this.fh - 1], (this.fg[this.fh - 1][0] + this.fj[this.fh - 1][0]) - (((this.fj[this.fh - 1][2] * 110) / 100) / 2), (this.fg[this.fh - 1][1] + this.fj[this.fh - 1][1]) - (((this.fj[this.fh - 1][3] * 85) / 100) / 2), ((this.fj[this.fh - 1][2] * 110) / 100) + 110, ((this.fj[this.fh - 1][3] * 85) / 100) + 85, 0);
                }
            }
        }
        atexturerenderer.setImageAlpha(255);
        int i19 = 0;
        while (true) {
            int i20 = i19;
            if (i20 >= 10) {
                break;
            }
            if (this.slotCatIDs[i20] != -1 && this.fh - 1 != i20 && this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1] && this.slotCatIDs[i20] - 2 == this.boxCatIDs[this.ff[2]]) {
                if (this.blinkFrame[3] % 4 == 0 || this.blinkFrame[3] % 4 == 1) {
                    atexturerenderer.drawScaledImage(this.uiTextures[7], this.fj[i20][0] + this.fg[i20][0], this.fj[i20][1] + this.fg[i20][1], 110, 85, 9);
                } else {
                    atexturerenderer.drawScaledImage(this.uiTextures[7], this.fj[i20][0] + this.fg[i20][0], this.fj[i20][1] + this.fg[i20][1], 110, 85, 10);
                }
            }
            i19 = i20 + 1;
        }
        int i21 = 0;
        while (true) {
            int i22 = i21;
            if (i22 >= 10) {
                break;
            }
            if (this.fh - 1 != i22 && this.slotCatIDs[i22] != -1 && this.uniTextures[i22].isLoaded()) {
                drawCost(atexturerenderer, (this.unitStats[this.slotCatIDs[i22]][0][6] / 100) + ((((this.unitStats[this.slotCatIDs[i22]][0][6] / 100) * this.eQ) * 50) / 100), ((this.fg[i22][0] + this.fj[i22][0]) - 22) + 3 + 110, ((this.fg[i22][1] + this.fj[i22][1]) - 26) + 2 + 85, 0, 0, 1);
            }
            i21 = i22 + 1;
        }
        if (this.gJ) {
            atexturerenderer.drawScaledImage(this.uiTextures[7], (getWidth() / 2) - (((eO[this.gK] * 869) / 100) / 2), 183 - (((eO[this.gK] * 180) / 100) / 2), (eO[this.gK] * 869) / 100, (eO[this.gK] * 180) / 100, 1);
            atexturerenderer.setColor(255, 255, 255);
            if (this.gK >= getLength(eO) - 1 && this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1]) {
                if (this.bq[this.unitBuyStats[this.boxCatIDs[this.ff[2]]][15]] < this.unitBuyStats[this.boxCatIDs[this.ff[2]]][0]) {
                    atexturerenderer.drawScaledImage(this.textTextures[this.gA[0] + 1], getWidth() / 2, 123, 1);
                    atexturerenderer.drawScaledImage(this.textTextures[this.gA[0] + 2], getWidth() / 2, 159, 1);
                } else if (this.bu[this.boxCatIDs[this.ff[2]]] != 0) {
                    for (int i23 = this.gA[3]; i23 < this.gA[3] + 3; i23++) {
                        atexturerenderer.drawScaledImage(this.textTextures[i23], getWidth() / 2, (((i23 - this.gA[3]) * 36) + 128) - 5, 1);
                    }
                }
            }
        }
        if (this.bq[0] >= 48 && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1] && this.baseUpgrades[this.boxCatIDs[this.ff[2]]] + 1 >= 10) {
            atexturerenderer.drawScaledImage(this.uiTextures[8], (((getWidth() / 2) - 164) + 285) - (dv[this.fx[12]] / 2), 516 - (dv[this.fx[12]] / 2), dv[this.fx[12]] + 69, dv[this.fx[12]] + 69, 46);
        }
        if ((-this.gameStats1[0]) % this.boxScale == 0) {
            this.gameStats1[0] = 0;
            this.gameStats1[1] = -(328 - this.boxSize[this.ff[0] + this.gameStats1[0]][0]);
        } else if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
            this.gameStats1[0] = 1;
            this.gameStats1[1] = 328 - this.boxSize[this.ff[0] + this.gameStats1[0]][0];
        } else {
            this.gameStats1[0] = 0;
            this.gameStats1[1] = -(328 - this.boxSize[this.ff[0] + this.gameStats1[0]][0]);
        }
        if (this.fn) {
            atexturerenderer.setImageAlpha(127);
            atexturerenderer.drawScaledImage(this.uiTextures[8], this.gameStats1[1] - ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * (this.fo[0] - 55)) / 100)) / 2), this.ei[1] - ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * (this.fo[1] - 55)) / 100)) / 2), ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * (this.fo[0] - 55)) / 100) + this.boxSize[this.ff[0] + this.gameStats1[0]][0], ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * (this.fo[1] - 55)) / 100) + this.boxSize[this.ff[0] + this.gameStats1[0]][1], 47);
            int a4 = this.textTextures[this.ff[2]].getImgWidth();
            atexturerenderer.drawScaledImagef(this.textTextures[this.ff[2]], (((this.gameStats1[1] - ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * (this.fo[0] - 55)) / 100.0f)) / 2.0f)) + (this.boxSize[this.ff[0] + this.gameStats1[0]][0] / 2.0f)) + (((this.boxSize[this.ff[0] + this.gameStats1[0]][0] / 2.0f) * ((float) (this.fo[0] - 55))) / 100.0f)) - ((a4 / 2.0f) + (((a4 / 2.0f) * ((float) (this.fo[0] - 55))) / 100.0f)), ((this.ei[1] + 9) + (((this.fo[1] - 55) * 9) / 100.0f)) - ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * (this.fo[1] - 55)) / 100.0f)) / 2.0f), (((this.fo[0] - 55) * a4) / 100.0f) + ((a4 * ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * 10000.0f) / 328.0f)) / 10000.0f), (((this.fo[1] - 55) * 30) / 100.0f) + ((30.0f * ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * 10000.0f) / 263.0f)) / 10000.0f));
            atexturerenderer.drawScaledImagef(this.uiTextures[this.ff[2] + 11], this.gameStats1[1] - ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * (this.fo[0] - 55)) / 100.0f)) / 2.0f), ((this.ei[1] + 44) + (((this.fo[1] - 55) * 44) / 100.0f)) - ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * (this.fo[1] - 55)) / 100.0f)) / 2.0f), ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * (this.fo[0] - 55)) / 100.0f) + this.boxSize[this.ff[0] + this.gameStats1[0]][0], (((this.fo[1] - 55) * 114) / 100.0f) + ((114.0f * ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * 100) / 263.0f)) / 100.0f), 0);
            int i24 = (this.ff[2] < 0 || this.ff[2] > this.boxCounts[1]) ? a4 : this.baseUpgrades[this.boxCatIDs[this.ff[2]]] + 1;
            if (i24 < this.bi) {
                int i25 = 0;
                int i26 = i24;
                while (true) {
                    atexturerenderer.drawScaledImagef(this.uiTextures[8], (290 - (i25 * 13)) + (((290 - (i25 * 13)) * (this.fo[0] - 55)) / 100.0f) + (this.gameStats1[1] - ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * (this.fo[0] - 55)) / 100.0f)) / 2.0f)), ((this.ei[1] + 120) + (((this.fo[1] - 55) * 120) / 100.0f)) - ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * (this.fo[1] - 55)) / 100.0f)) / 2.0f), (((this.fo[0] - 55) * 14) / 100.0f) + ((14.0f * ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * 10000.0f) / 328.0f)) / 10000.0f), (((this.fo[1] - 55) * 34) / 100.0f) + ((34.0f * ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * 10000.0f) / 263.0f)) / 10000.0f), (i26 % 10) + 11);
                    int i27 = i26 / 10;
                    int i28 = i25 + 1;
                    if (i27 <= 0) {
                        break;
                    }
                    i25 = i28;
                    i26 = i27;
                }
            } else {
                atexturerenderer.drawScaledImagef(this.uiTextures[8], 247 + (((this.fo[0] - 55) * 247) / 100.0f) + (this.gameStats1[1] - ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * (this.fo[0] - 55)) / 100.0f)) / 2.0f)), ((this.ei[1] + 119) + (((this.fo[1] - 55) * 119) / 100.0f)) - ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * (this.fo[1] - 55)) / 100.0f)) / 2.0f), (((this.fo[0] - 55) * 58) / 100.0f) + ((58.0f * ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * 10000.0f) / 328.0f)) / 10000.0f), (((this.fo[1] - 55) * 35) / 100.0f) + ((35.0f * ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * 10000.0f) / 263.0f)) / 10000.0f), 52);
            }
            int i29 = 0;
            int i30 = (this.ff[2] < 0 || this.ff[2] > this.boxCounts[1]) ? 0 : (this.unitStats[this.boxCatIDs[this.ff[2]] + 2][0][6] / 100) + ((((this.unitStats[this.boxCatIDs[this.ff[2]] + 2][0][6] / 100) * this.eQ) * 50) / 100);
            while (true) {
                atexturerenderer.drawScaledImagef(this.uiTextures[8], (282 - (i29 * 13)) + (((282 - (i29 * 13)) * (this.fo[0] - 55)) / 100.0f) + (this.gameStats1[1] - ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * (this.fo[0] - 55)) / 100.0f)) / 2.0f)), ((this.ei[1] + 165) + (((this.fo[1] - 55) * 165) / 100.0f)) - ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] + ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * (this.fo[1] - 55)) / 100.0f)) / 2.0f), (((this.fo[0] - 55) * 13) / 100.0f) + ((13.0f * ((this.boxSize[this.ff[0] + this.gameStats1[0]][0] * 10000.0f) / 328.0f)) / 10000.0f), (((this.fo[1] - 55) * 26) / 100.0f) + ((26.0f * ((this.boxSize[this.ff[0] + this.gameStats1[0]][1] * 10000.0f) / 263.0f)) / 10000.0f), (i30 % 10) + 1);
                int i31 = i30 / 10;
                int i32 = i29 + 1;
                if (i31 <= 0) {
                    break;
                }
                i29 = i32;
                i30 = i31;
            }
        }
        atexturerenderer.setImageAlpha(255);
        atexturerenderer.setImageAlpha(127);
        if (this.ff[2] >= 0) {
            atexturerenderer.drawScaledImagef(this.uiTextures[10], (int) (49.0f + (10.0f * aMath.sin(this.blinkFrame[4] * 30))), 391, 0);
        }
        if (this.ff[2] < this.boxCounts[1] + this.boxCounts[2]) {
            atexturerenderer.setOrientation(1);
            atexturerenderer.drawScaledImagef(this.uiTextures[10], (int) ((849.0f - (10.0f * aMath.sin(this.blinkFrame[4] * 30))) + this.excessWidth), 391, 0);
        }
        atexturerenderer.setOrientation(0);
        atexturerenderer.setImageAlpha(255);
        if (this.ff[2] >= 0 && this.ff[2] <= this.boxCounts[1]) {
            int i33 = -this.boxCounts[1];
            int i34 = this.boxCounts[1];
            int i35 = 0;
            do {
                if (this.ff[2] == i35) {
                    atexturerenderer.setImageColor(255, 255, 255);
                    atexturerenderer.setImageAlpha(255);
                } else {
                    atexturerenderer.setImageColor(0, 0, 0);
                    atexturerenderer.setImageAlpha(200);
                }
                atexturerenderer.drawScaledImagef(this.uiTextures[6], ((getWidth() / 2) - 6) + (i33 * 10), 60, 0);
                i33 += 2;
                i34--;
                i35++;
            } while (i34 >= 0);
        }
        atexturerenderer.setImageColor(255, 255, 255);
        atexturerenderer.setImageAlpha(255);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], ((getWidth() / 2) - 572) - this.fP, 0, 572, 637, 0);
        atexturerenderer.drawScaledImage(this.settingsMenuTexture[0], this.fP + (getWidth() / 2), 0, 572, 637, 1);
        int i36 = 0;
        if (this.fR[0] == 0) {
            i36 = cu[this.blinkFrame[0]];
        } else if (this.fR[0] == 1) {
            i36 = cv[this.blinkFrame[0]];
        } else {
            int i37 = this.fR[0];
        }
        atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i36, 355, 355, 0);
        if (this.blinkFrame[1] == 1 || this.blinkFrame[1] == 2 || this.blinkFrame[1] == 4 || this.blinkFrame[1] == 5) {
            atexturerenderer.drawScaledImage(this.uiTextures[1], this.excessWidth + 659, i36, 355, 191, 2);
        }
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, -42, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 638, getWidth(), 44, 10);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 0, getWidth(), 55, 0);
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImage(this.uiTextures[2], 0, 585, getWidth(), 55, 0);
        atexturerenderer.setOrientation(0);
        if (this.gm[0] < 297) {
            if (this.previousScreen == 0) {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 1);
            } else {
                atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[0], 3, 8);
            }
        }
        if (this.gm[1] < 297) {
            atexturerenderer.drawScaledImagef(this.uiTextures[2], 8 - this.gm[1], 3, 3);
        }
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.buttonCoordinates1[10][0] - (dv[this.fx[10]] / 2), this.buttonCoordinates1[10][1] - (dv[this.fx[10]] / 2), dv[this.fx[10]] + this.buttonCoordinates1[10][2], dv[this.fx[10]] + this.buttonCoordinates1[10][3], 9);
        atexturerenderer.drawScaledImage(this.uiTextures[0], (this.buttonCoordinates1[10][0] + 4) - (dv[this.fx[10]] / 2), (this.buttonCoordinates1[10][1] + 17) - (dv[this.fx[10]] / 2), dv[this.fx[10]] + 84, dv[this.fx[10]] + 60, 3);
        boolean z2 = false;
        if (this.fx[2] == 0 && this.ff[0] - 1 >= 0 && this.ff[2] <= 0 && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[9] && ((isPointerDown() || isPointerUp()) && isTouching((int) (((((getWidth() / 2) - (this.boxSize[this.ff[0] - 1][0] / 2)) + (this.boxScale * (this.ff[0] - 1))) + this.gameStats1[0]) - ((328 - this.boxSize[this.ff[0] - 1][0]) + ((328 - this.boxSize[(this.ff[0] - 1) + 1][0]) / 2.0f))), 559 - this.boxSize[this.ff[0] - 1][1], this.boxSize[this.ff[0] - 1][0], this.boxSize[this.ff[0] - 1][1]))) {
            z2 = true;
        }
        if (this.fx[2] == 0 && this.ff[2] >= this.boxCounts[1] && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[9] && ((isPointerDown() || isPointerUp()) && isTouching(((getWidth() / 2) - (this.boxSize[this.ff[0] + 1][0] / 2)) + (this.boxScale * (this.ff[0] + 1)) + this.gameStats1[0] + (328 - this.boxSize[this.ff[0] + 1][0]), 559 - this.boxSize[this.ff[0] + 1][1], this.boxSize[this.ff[0] + 1][0], this.boxSize[this.ff[0] + 1][1]))) {
            z2 = true;
        }
        if ((this.fx[2] != 0 || ((this.ff[2] > -1 && this.ff[2] < this.boxCounts[1] + 1) || this.eE[5] || this.gameStats1[0] % this.boxScale != 0 || this.scrollAmount[0] != 0 || ((!isPointerDown() && !isPointerUp()) || !isTouching(((((getWidth() / 2) - (this.boxSize[this.ff[0]][0] / 2)) + (this.boxScale * this.ff[0])) + this.gameStats1[0]) - (328 - this.boxSize[this.ff[0]][0]), 559 - this.boxSize[this.ff[0]][1], this.boxSize[this.ff[0]][0], this.boxSize[this.ff[0]][1])))) && !this.eE[5] && this.fx[2] == 0 && !z2 && !this.eE[0] && !this.eE[1] && !this.eE[2] && !this.eb && this.eE[10] && !this.gJ) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], 3, 540, 96, 96, ((this.blinkFrame[3] % 4) / 2) + 12);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 0, 11);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 570, 17, 10);
        int i38 = this.aY;
        int i39 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i39 * 29)) + this.excessWidth, 6, i38 % 10);
            i38 /= 10;
            i39++;
        } while (i38 > 0);
        atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (633 - (dv[this.fx[15]] / 2)), 8 - (dv[this.fx[15]] / 2), dv[this.fx[15]] + 62, dv[this.fx[15]] + 36, 23);
        atexturerenderer.setOrientation(2);
        atexturerenderer.drawScaledImagef(this.uiTextures[5], this.excessWidth + 670, 585, 11);
        atexturerenderer.setOrientation(0);
        if (this.bf >= 1) {
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (688 - (dv[this.fx[14]] / 2)), 593 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 55, dv[this.fx[14]] + 42, 21);
            atexturerenderer.drawScaledImage(this.uiTextures[0], this.excessWidth + (733 - (dv[this.fx[14]] / 2)), 610 - (dv[this.fx[14]] / 2), dv[this.fx[14]] + 27, dv[this.fx[14]] + 26, 18);
        }
        atexturerenderer.drawScaledImagef(this.uiTextures[0], this.excessWidth + 610, 607, 24);
        int i40 = this.catfood;
        int i41 = 0;
        do {
            atexturerenderer.drawScaledImagef(this.uiTextures[5], (924 - (i41 * 29)) + this.excessWidth, 592, i40 % 10);
            i40 /= 10;
            i41++;
        } while (i40 > 0);
    }

    /* JADX WARN: Removed duplicated region for block: B:204:0x05ca  */
    /* JADX WARN: Removed duplicated region for block: B:213:0x0608  */
    /* JADX WARN: Removed duplicated region for block: B:219:0x063c  */
    /* JADX WARN: Removed duplicated region for block: B:231:0x069a  */
    /* JADX WARN: Removed duplicated region for block: B:248:0x0728  */
    /* JADX WARN: Removed duplicated region for block: B:253:0x0760  */
    /* JADX WARN: Removed duplicated region for block: B:259:0x0776  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    boolean itemShopProcess() {
        boolean z;
        loadTextures2();
        int[] iArr = this.gameStats1;
        iArr[0] = iArr[0] + this.scrollAmount[0];
        int[] iArr2 = this.gameStats1;
        iArr2[1] = iArr2[1] - this.scrollAmount[0];
        this.scrollAmount[0] = (int) (this.scrollAmount[0] * 0.9d);
        if (this.gameStats1[0] >= ((this.boxScale / 2) - this.boxScale) - 20) {
            this.gameStats1[0] = ((this.boxScale / 2) - this.boxScale) - 20;
            this.gameStats1[1] = this.boxScale * 100;
            this.scrollAmount[0] = 0;
        } else if (this.gameStats1[0] < (-(((this.boxScale * ((this.boxCounts[0] + this.boxCounts[1]) + this.boxCounts[2])) + (this.boxScale / 2)) - 20))) {
            this.gameStats1[0] = -(((this.boxScale * ((this.boxCounts[0] + this.boxCounts[1]) + this.boxCounts[2])) + (this.boxScale / 2)) - 20);
            this.scrollAmount[0] = 0;
            this.gameStats1[1] = this.boxScale * 100;
        }
        if (!isPointerDown() || this.eE[0] || this.eE[1] || this.eE[13] || this.gF[0] || this.gF[1] || this.fx[1] != 0 || this.eb || this.fx[0] != 0) {
            this.isScrolling = false;
            if ((this.scrollAmount[0] >= 0 && this.scrollAmount[0] < 8) || (this.scrollAmount[0] > -8 && this.scrollAmount[0] <= 0)) {
                this.scrollAmount[0] = 0;
                if (this.gameStats1[0] % this.boxScale != 0) {
                    if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
                        this.gameStats1[0] = this.gameStats1[0] - ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4);
                        if ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4 == 0) {
                            this.gameStats1[0] = ((this.gameStats1[0] / this.boxScale) - 1) * this.boxScale;
                        }
                    } else {
                        this.gameStats1[0] = this.gameStats1[0] - (((this.gameStats1[0] % this.boxScale) - 4) / 4);
                        if (((this.gameStats1[0] % this.boxScale) - 4) / 4 == 0) {
                            this.gameStats1[0] = (this.gameStats1[0] / this.boxScale) * this.boxScale;
                        }
                    }
                }
            }
            if (!isPointerUp()) {
                this.eE[9] = false;
            }
        } else {
            if (getCurrentXTouch() - getPreviousXTouch() <= -10 || getCurrentXTouch() - getPreviousXTouch() >= 10 || this.isScrolling) {
                this.isScrolling = true;
            } else {
                this.scrollAmount[0] = 0;
            }
            if (this.isScrolling) {
                this.scrollAmount[0] = getCurrentXTouch() - getPreviousXTouch();
                if (this.scrollAmount[0] != 0 && !this.eE[9]) {
                    this.eE[9] = true;
                    this.ct = 0;
                }
            }
        }
        if (!this.eE[0] && !this.eE[1] && !this.gF[0] && !this.gF[1] && !this.eb) {
            if (this.scrollAmount[0] < 0) {
                if (this.gP[0] != (-(this.gameStats1[0] / this.boxScale))) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                this.gp[3] = false;
            } else if (this.scrollAmount[0] > 0) {
                if (this.gP[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                this.gp[3] = false;
            } else if (this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.gp[3]) {
                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                this.gp[3] = true;
            }
        }
        if (this.gP[0] != (-(this.gameStats1[0] / this.boxScale))) {
            this.gP[0] = -(this.gameStats1[0] / this.boxScale);
        }
        if (this.gP[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
            this.gP[1] = ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale;
        }
        if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
            if ((this.gP[0] + 1) - this.boxCounts[0] != this.gP[2]) {
                this.gP[2] = (this.gP[0] + 1) - this.boxCounts[0];
                if (this.gP[2] >= 0 && this.gP[2] <= this.boxCounts[1]) {
                    if (this.gP[2] < this.gB[0]) {
                        this.textTextures[this.gA[0]].drawText(this.pageNameText[6], "FONT_SYSTEM_BOLD", 30, 1);
                    } else {
                        this.textTextures[this.gA[0]].drawText(this.pageNameText[8], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                    for (int i = this.gA[1]; i < this.gA[1] + 3; i++) {
                        this.textTextures[i].drawText(this.itemExplanationText[this.gP[2]][i - this.gA[1]], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            }
        } else if (this.gP[0] - this.boxCounts[0] != this.gP[2]) {
            this.gP[2] = this.gP[0] - this.boxCounts[0];
            if (this.gP[2] >= 0 && this.gP[2] <= this.boxCounts[1]) {
                if (this.gP[2] < this.gB[0]) {
                    this.textTextures[this.gA[0]].drawText(this.pageNameText[6], "FONT_SYSTEM_BOLD", 30, 1);
                } else {
                    this.textTextures[this.gA[0]].drawText(this.pageNameText[8], "FONT_SYSTEM_BOLD", 30, 1);
                }
                for (int i2 = this.gA[1]; i2 < this.gA[1] + 3; i2++) {
                    this.textTextures[i2].drawText(this.itemExplanationText[this.gP[2]][i2 - this.gA[1]], "FONT_SYSTEM_BOLD", 30, 1);
                }
            }
        }
        if (!this.eE[0] && !this.eE[1] && !this.eb && !this.eE[9] && !this.eE[13]) {
            if (this.fx[0] >= 1) {
                int[] iArr3 = this.fx;
                iArr3[0] = iArr3[0] + 1;
                if (this.fx[0] > getLength(dv) - 1) {
                    this.fx[0] = 0;
                    if (Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]]) <= 0) {
                        if (this.catfood >= 500) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 2;
                            return false;
                        }
                        screenTransition();
                        this.gu = true;
                        this.gw = 1;
                        return false;
                    } else if (this.catfood >= Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]])) {
                        screenTransition();
                        this.gu = true;
                        this.gw = 2;
                        return false;
                    } else {
                        screenTransition();
                        this.gu = true;
                        this.gw = 1;
                        return false;
                    }
                }
            } else if (this.fx[5] >= 1) {
                int[] iArr4 = this.fx;
                iArr4[5] = iArr4[5] + 1;
                if (this.fx[5] > getLength(dv) - 1) {
                    this.fx[5] = 0;
                    if (this.previousScreen == 0) {
                        this.eE[1] = true;
                    } else if (this.previousScreen >= 1) {
                        this.eE[13] = true;
                    }
                }
            } else if (this.fx[14] >= 1) {
                int[] iArr5 = this.fx;
                iArr5[14] = iArr5[14] + 1;
                if (this.fx[14] > getLength(dv) - 1) {
                    this.fx[14] = 0;
                    if (this.bB[8] == 0) {
                        screenTransition();
                        this.bB[8] = 1;
                        this.gU = true;
                        for (int i3 = 0; i3 < getLength(this.gV); i3++) {
                            this.gV[i3] = 0;
                        }
                        aSound.getInstance().setVolume(50);
                        return false;
                    } else if (this.catfood >= 900000) {
                        screenTransition();
                        this.gu = true;
                        this.gw = 10000;
                        return false;
                    } else {
                        screenTransition();
                        this.menuType = 0;
                        this.j = true;
                        return false;
                    }
                }
            } else if (this.gP[2] < this.gB[0]) {
                if (this.bA[this.gP[2]] < 9000) {
                    z = true;
                    if (z || !isPointerDown() || !isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                        this.gp[0] = false;
                    } else if (!this.gp[0]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[0] = true;
                    }
                    if (isPointerDown() || !isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                        this.gp[5] = false;
                    } else if (!this.gp[5]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[5] = true;
                    }
                    if (!z && isPointerUp() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                        if (Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]]) <= 0) {
                            if (this.catfood >= 500) {
                                aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            } else {
                                aSound.getInstance().play(SoundType.CANT_PRESS);
                            }
                        } else if (this.catfood >= Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]])) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        } else {
                            aSound.getInstance().play(SoundType.CANT_PRESS);
                        }
                        int[] iArr6 = this.fx;
                        iArr6[0] = iArr6[0] + 1;
                    } else if (!isPointerUp() && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr7 = this.fx;
                        iArr7[5] = iArr7[5] + 1;
                    } else if (isBackPressed()) {
                        if (isPointerUp() && isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) && this.bf >= 1) {
                            int[] iArr8 = this.fx;
                            iArr8[14] = iArr8[14] + 1;
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        }
                    } else if (this.previousScreen == 0) {
                        this.eE[1] = true;
                    } else if (this.previousScreen >= 1) {
                        this.eE[13] = true;
                    }
                    if (isPointerDown() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3])) {
                        this.gp[14] = false;
                    } else if (!this.gp[14]) {
                        this.gp[14] = true;
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    }
                }
                z = false;
                if (z) {
                }
                this.gp[0] = false;
                if (isPointerDown()) {
                }
                this.gp[5] = false;
                if (!z) {
                }
                if (!isPointerUp()) {
                }
                if (isBackPressed()) {
                }
                if (isPointerDown()) {
                }
                this.gp[14] = false;
            } else {
                if (this.aY < 90000000) {
                    z = true;
                    if (z) {
                    }
                    this.gp[0] = false;
                    if (isPointerDown()) {
                    }
                    this.gp[5] = false;
                    if (!z) {
                    }
                    if (!isPointerUp()) {
                    }
                    if (isBackPressed()) {
                    }
                    if (isPointerDown()) {
                    }
                    this.gp[14] = false;
                }
                z = false;
                if (z) {
                }
                this.gp[0] = false;
                if (isPointerDown()) {
                }
                this.gp[5] = false;
                if (!z) {
                }
                if (!isPointerUp()) {
                }
                if (isBackPressed()) {
                }
                if (isPointerDown()) {
                }
                this.gp[14] = false;
            }
        }
        if (this.eE[0]) {
            int[] iArr9 = this.blinkFrame;
            iArr9[2] = iArr9[2] + 1;
            this.gm[0] = (this.gm[0] * 2) + 1;
            if (this.gm[0] >= 297) {
                this.gm[0] = 297;
                this.gm[1] = this.gm[1] / 2;
                this.blinkFrame[6] = this.blinkFrame[6] / 2;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = getWidth();
                if (this.gm[1] <= 0) {
                    this.eE[0] = false;
                    this.blinkFrame[2] = 0;
                }
            } else {
                this.fP = fM[this.blinkFrame[2]];
            }
        } else if (this.eE[1]) {
            int[] iArr10 = this.blinkFrame;
            iArr10[2] = iArr10[2] + 1;
            this.gm[1] = (this.gm[1] * 2) + 1;
            this.blinkFrame[6] = (this.blinkFrame[6] * 2) + 1;
            if (this.gm[1] >= 297) {
                this.gm[1] = 297;
                this.blinkFrame[6] = 126;
                this.gm[0] = this.gm[0] / 2;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = 0;
                if (this.gm[0] <= 0) {
                    screenTransition();
                    if (this.previousScreen == 0) {
                        this.setScreenType(ScreenType.CAT_BASE);
                        this.screenLoadState = -1;
                        this.blinkFrame[2] = 0;
                        this.eE[1] = false;
                        return false;
                    } else if (this.previousScreen == 1) {
                        this.setScreenType(ScreenType.MAP);
                        this.screenLoadState = -1;
                        this.blinkFrame[2] = 0;
                        this.eE[1] = false;
                        return false;
                    } else {
                        return false;
                    }
                }
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
        }
        if (this.eE[13]) {
            int[] iArr11 = this.blinkFrame;
            iArr11[2] = iArr11[2] + 1;
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.fP = 0;
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
            if (this.blinkFrame[2] > getLength(fM)) {
                this.fP = 0;
                this.blinkFrame[2] = 0;
                screenTransition();
                if (this.previousScreen == 1) {
                    this.setScreenType(ScreenType.MAP);
                } else if (this.previousScreen == 2) {
                    this.setScreenType(ScreenType.POWER_UP);
                } else if (this.previousScreen == 3) {
                    this.setScreenType(ScreenType.EQUIP);
                } else if (this.previousScreen == 4) {
                    this.setScreenType(ScreenType.TREASURE);
                } else if (this.previousScreen == 5) {
                    this.setScreenType(ScreenType.ENEMY_GUIDE);
                }
                this.screenLoadState = -1;
                this.eE[1] = false;
                return false;
            }
        }
        this.blinkFrame[0] -= 1;
        if (this.blinkFrame[0] <= 0) {
            this.blinkFrame[0] = 0;
        }
        for (int i4 = 0; i4 < getLength(this.boxSize); i4++) {
            for (int i5 = 0; i5 < getLength(this.boxSize[i4]); i5++) {
                if (i5 == 0) {
                    if (i4 == this.gP[0]) {
                        this.boxSize[i4][i5] = (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 99) / 100) + 328;
                        if (this.gameStats1[0] > 0) {
                            this.boxSize[i4][i5] = 328 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 99) / 100);
                        }
                    } else if (i4 == this.gP[0] + 1) {
                        this.boxSize[i4][i5] = 229 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 99) / 100);
                    } else {
                        this.boxSize[i4][i5] = 229;
                    }
                    if (this.boxSize[i4][i5] >= 328) {
                        this.boxSize[i4][i5] = 328;
                    } else if (this.boxSize[i4][i5] <= 229) {
                        this.boxSize[i4][i5] = 229;
                    }
                } else if (i5 == 1) {
                    if (i4 == this.gP[0]) {
                        this.boxSize[i4][i5] = (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 79) / 100) + 263;
                        if (this.gameStats1[0] > 0) {
                            this.boxSize[i4][i5] = 263 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 79) / 100);
                        }
                    } else if (i4 == this.gP[0] + 1) {
                        this.boxSize[i4][i5] = 184 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 79) / 100);
                    } else {
                        this.boxSize[i4][i5] = 184;
                    }
                    if (this.boxSize[i4][i5] >= 263) {
                        this.boxSize[i4][i5] = 263;
                    } else if (this.boxSize[i4][i5] <= 184) {
                        this.boxSize[i4][i5] = 184;
                    }
                }
            }
        }
        int[] iArr12 = this.blinkFrame;
        iArr12[3] = iArr12[3] + 1;
        int[] iArr13 = this.blinkFrame;
        iArr13[4] = iArr13[4] + 1;
        this.blinkFrame[5] -= 10;
        if (this.blinkFrame[5] <= 0) {
            this.blinkFrame[5] = 0;
            for (int i6 = 0; i6 < getLength(this.gG); i6++) {
                this.gG[i6] = 0;
            }
        }
        if (this.gP[2] >= 0 && this.gP[2] <= this.boxCounts[1]) {
            if (Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]]) <= 0) {
                this.gz = 50;
            } else {
                this.gz = Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]]);
            }
        }
        if (this.eE[0] || this.eE[1] || this.gF[0] || this.gF[1] || this.eb || this.eE[9]) {
            if (this.fx[10] == 0 && !this.eE[1]) {
                this.eE[10] = false;
            }
        } else if ((isPointerDown() || isPointerUp()) && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
            this.eE[10] = true;
        } else if (this.fx[10] == 0 && !this.eE[1]) {
            this.eE[10] = false;
        }
        return true;
    }

    void catBaseLoad() {
        //aAd.b().f();
        for (int i = 0; i < getLength(this.buttonCoordinates1); i++) {
            for (int i2 = 0; i2 < getLength(this.buttonCoordinates1[i]); i2++) {
                this.buttonCoordinates1[i][i2] = 0;
            }
        }
        this.previousScreen = 0;
        this.buttonCoordinates1[5][0] = 4;
        this.buttonCoordinates1[5][1] = 541;
        this.buttonCoordinates1[5][2] = 95;
        this.buttonCoordinates1[5][3] = 95;
        this.buttonCoordinates1[6][0] = (this.excessWidth / 2) + 546;
        this.buttonCoordinates1[6][1] = 331;
        this.buttonCoordinates1[6][2] = 100;
        this.buttonCoordinates1[6][3] = 88;
        this.buttonCoordinates1[13][0] = this.excessWidth + 344;
        this.buttonCoordinates1[13][1] = 560;
        this.buttonCoordinates1[13][2] = 247;
        this.buttonCoordinates1[13][3] = 88;
        this.buttonCoordinates1[14][0] = this.excessWidth + 680;
        this.buttonCoordinates1[14][1] = 552;
        this.buttonCoordinates1[14][2] = 88;
        this.buttonCoordinates1[14][3] = 88;
        this.buttonCoordinates1[15][0] = this.excessWidth + 626;
        this.buttonCoordinates1[15][1] = 0;
        this.buttonCoordinates1[15][2] = 88;
        this.buttonCoordinates1[15][3] = 88;
        for (int i3 = 0; i3 < getLength(this.gc); i3++) {
            this.gc[i3] = 450;
        }
        for (int i4 = 0; i4 < getLength(this.textTextures); i4++) {
            if (this.textTextures[i4].isLoaded()) {
                this.textTextures[i4].reset();
            }
        }
        if (this.bh >= 1 && this.bz[2] == 0) {
            this.bz[2] = 1;
        }
        if (this.bz[0] >= 2 || this.bz[1] >= 2 || this.bz[2] >= 2 || this.bz[3] >= 2 || this.bz[4] >= 2) {
            this.fK = 5;
            int a = this.bz[0] >= 2 ? (getLength(this.mainMenuWText) - (this.aX == 0 ? 2 : 0)) + 0 : 0;
            if (this.bz[1] >= 2) {
                a += getLength(this.mainMenuPText);
            }
            if (this.bz[2] >= 2) {
                a += getLength(this.mainMenuUText);
            }
            if (this.bz[3] >= 2) {
                a += getLength(this.mainMenuTText);
            }
            if (this.bz[4] >= 2) {
                a += getLength(this.mainMenuBText);
            }
            this.fJ = aMath.rand(a);
            int i5 = this.aX == 0 ? 2 : 0;
            if (this.fJ >= 0 && this.bz[0] == 0) {
                this.fJ += getLength(this.mainMenuWText) - i5;
            }
            if (this.fJ >= getLength(this.mainMenuWText) - i5 && this.bz[1] == 0) {
                this.fJ += getLength(this.mainMenuPText);
            }
            if (this.fJ >= (getLength(this.mainMenuWText) - i5) + getLength(this.mainMenuPText) && this.bz[2] == 0) {
                this.fJ += getLength(this.mainMenuUText);
            }
            if (this.fJ >= (getLength(this.mainMenuWText) - i5) + getLength(this.mainMenuPText) + getLength(this.mainMenuUText) && this.bz[3] == 0) {
                this.fJ += getLength(this.mainMenuTText);
            }
            int i6 = this.aX == 0 ? 2 : 0;
            for (int i7 = 0; i7 < 5; i7++) {
                if (!this.textTextures[i7].isLoaded()) {
                    if (this.fJ < getLength(this.mainMenuWText) - i6) {
                        this.textTextures[i7].drawText(this.mainMenuWText[this.fJ][i7], "FONT_SYSTEM_BOLD", 30, 1);
                    } else if (this.fJ < (getLength(this.mainMenuWText) - i6) + getLength(this.mainMenuPText)) {
                        this.textTextures[i7].drawText(this.mainMenuPText[this.fJ - (getLength(this.mainMenuWText) - i6)][i7], "FONT_SYSTEM_BOLD", 30, 1);
                    } else if (this.fJ < (getLength(this.mainMenuWText) - i6) + getLength(this.mainMenuPText) + getLength(this.mainMenuUText)) {
                        this.textTextures[i7].drawText(this.mainMenuUText[(this.fJ - (getLength(this.mainMenuWText) - i6)) - getLength(this.mainMenuPText)][i7], "FONT_SYSTEM_BOLD", 30, 1);
                    } else if (this.fJ < (getLength(this.mainMenuWText) - i6) + getLength(this.mainMenuPText) + getLength(this.mainMenuUText) + getLength(this.mainMenuTText)) {
                        this.textTextures[i7].drawText(this.mainMenuTText[((this.fJ - (getLength(this.mainMenuWText) - i6)) - getLength(this.mainMenuPText)) - getLength(this.mainMenuUText)][i7], "FONT_SYSTEM_BOLD", 30, 1);
                    } else {
                        this.textTextures[i7].drawText(this.mainMenuBText[(((this.fJ - (getLength(this.mainMenuWText) - i6)) - getLength(this.mainMenuPText)) - getLength(this.mainMenuUText)) - getLength(this.mainMenuTText)][i7], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            }
        }
        if (this.bz[0] == 0) {
            this.fK = 0;
            this.bz[0] = 2;
            if (this.by[0] == 0) {
                this.by[0] = 1;
            }
            for (int i8 = 0; i8 < getLength(this.textTextures); i8++) {
                if (this.textTextures[i8].isLoaded()) {
                    this.textTextures[i8].reset();
                }
            }
            for (int i9 = 0; i9 < getLength(this.mainMenuWText[0]); i9++) {
                if (!this.textTextures[i9].isLoaded()) {
                    this.textTextures[i9].drawText(this.mainMenuWText[0][i9], "FONT_SYSTEM_BOLD", 30, 1);
                }
            }
        }
        if (this.bz[1] == 1) {
            this.fK = 1;
            this.hp = 1;
            for (int i10 = 0; i10 < getLength(this.textTextures); i10++) {
                if (this.textTextures[i10].isLoaded()) {
                    this.textTextures[i10].reset();
                }
            }
            for (int i11 = 0; i11 < 5; i11++) {
                if (!this.textTextures[i11].isLoaded()) {
                    this.textTextures[i11].drawText(this.mainMenuPText[0][i11], "FONT_SYSTEM_BOLD", 30, 1);
                }
            }
            this.bz[1] = 2;
            if (this.by[1] == 0) {
                this.by[1] = 1;
            }
        }
        if (this.bz[2] == 1) {
            this.fK = 2;
            this.hp = 2;
            for (int i12 = 0; i12 < getLength(this.textTextures); i12++) {
                if (this.textTextures[i12].isLoaded()) {
                    this.textTextures[i12].reset();
                }
            }
            for (int i13 = 0; i13 < 5; i13++) {
                if (!this.textTextures[i13].isLoaded()) {
                    this.textTextures[i13].drawText(this.mainMenuUText[0][i13], "FONT_SYSTEM_BOLD", 30, 1);
                }
            }
            this.bz[2] = 2;
            if (this.by[2] == 0) {
                this.by[2] = 1;
            }
        }
        if (this.bz[3] == 1) {
            this.hp = 3;
            this.fK = 3;
            for (int i14 = 0; i14 < getLength(this.textTextures); i14++) {
                if (this.textTextures[i14].isLoaded()) {
                    this.textTextures[i14].reset();
                }
            }
            for (int i15 = 0; i15 < 5; i15++) {
                if (!this.textTextures[i15].isLoaded()) {
                    this.textTextures[i15].drawText(this.mainMenuTText[0][i15], "FONT_SYSTEM_BOLD", 30, 1);
                }
            }
            this.bz[3] = 2;
            if (this.by[3] == 0) {
                this.by[3] = 1;
            }
        }
        if (this.bz[4] == 1) {
            this.hp = 4;
            this.fK = 4;
            for (int i16 = 0; i16 < getLength(this.textTextures); i16++) {
                if (this.textTextures[i16].isLoaded()) {
                    this.textTextures[i16].reset();
                }
            }
            for (int i17 = 0; i17 < 5; i17++) {
                if (!this.textTextures[i17].isLoaded()) {
                    this.textTextures[i17].drawText(this.mainMenuBText[0][i17], "FONT_SYSTEM_BOLD", 30, 1);
                }
            }
            this.bz[4] = 2;
            if (this.by[4] == 0) {
                this.by[4] = 1;
            }
        }
        for (int i18 = 0; i18 < getLength(this.gameStats1); i18++) {
            this.gameStats1[i18] = 0;
        }
        for (int i19 = 0; i19 < getLength(this.eE); i19++) {
            this.eE[i19] = false;
        }
        this.eE[2] = true;
        for (int i20 = 0; i20 < getLength(this.blinkFrame); i20++) {
            this.blinkFrame[i20] = 0;
        }
        for (int i21 = 0; i21 < getLength(this.gm); i21++) {
            this.gm[i21] = 0;
        }
        for (int i22 = 0; i22 < getLength(this.fx); i22++) {
            this.fx[i22] = 0;
        }
        for (int i23 = 0; i23 < getLength(this.eK); i23++) {
            this.eK[i23] = 0;
        }
        for (int i24 = 0; i24 < getLength(this.hk); i24++) {
            this.hk[i24] = 0;
        }
        for (int i25 = 0; i25 < getLength(this.fC); i25++) {
            this.fC[i25] = 0;
        }
        for (int i26 = 0; i26 < getLength(this.fy); i26++) {
            this.fy[i26] = 0;
        }
        for (int i27 = 0; i27 < getLength(this.fz); i27++) {
            this.fz[i27] = 0;
        }
        for (int i28 = 0; i28 < getLength(this.gZ); i28++) {
            this.gZ[i28] = 0;
        }
        for (int i29 = 6; i29 < getLength(this.uiTextures) - 6; i29++) {
            if (this.uiTextures[i29].isLoaded()) {
                this.uiTextures[i29].reset();
            }
        }
        for (int i30 = 0; i30 < getLength(this.scrollAmount); i30++) {
            this.scrollAmount[i30] = 0;
        }
        loadTextures2();
        for (int i31 = 0; i31 < getLength(this.gp); i31++) {
            this.gp[i31] = false;
        }
        this.fL = 0;
        for (int i32 = 0; i32 < getLength(this.by); i32++) {
            int i33 = this.by[i32];
        }
        this.fL = 5;
        int i34 = 0;
        for (int i35 = 0; i35 < getLength(this.by); i35++) {
            if (this.by[i35] >= 1) {
                this.buttonCoordinates1[i35][0] = 20;
                this.buttonCoordinates1[i35][1] = (i34 * 72) + 67 + (i34 * 20);
                this.buttonCoordinates1[i35][2] = 381;
                this.buttonCoordinates1[i35][3] = 88;
                i34++;
            }
        }
        //if (this.bo == 0 && aAd.b().i() && aAd.b().j() - this.aQ >= 86400.0d) {
        //    this.aQ = aAd.b().j();
        //    this.aV = 2;
        //}
        int i36 = 0;
        while (true) {
            if (i36 >= getLength(this.bE)) {
                break;
            } else if (this.bE[i36] != 0) {
                this.bo = 0;
                break;
            } else if (this.aV >= 1 && (this.calendar.get(1) * 600) + (this.calendar.get(2) * 40) + this.calendar.get(5) > (this.years[1] * 600) + (this.months[1] * 40) + this.days[1]) {
                this.years[1] = this.calendar.get(1);
                this.months[1] = this.calendar.get(2);
                this.days[1] = this.calendar.get(5);
                this.bo = 1;
                break;
            }
            i36++;
        }
        aSave();
    }

    boolean catBaseProcess() {
        if (!this.eE[0] && !this.eE[2] && !this.eb) {
            if (this.fx[0] >= 1) {
                int[] iArr = this.fx;
                iArr[0] = iArr[0] + 1;
                if (this.fx[0] > getLength(dv) - 1) {
                    this.fx[0] = getLength(dv) - 1;
                    int[] iArr2 = this.blinkFrame;
                    iArr2[4] = iArr2[4] + 1;
                    if (this.blinkFrame[4] >= 10) {
                        this.eE[1] = true;
                    }
                }
            } else if (this.fx[1] >= 1) {
                int[] iArr3 = this.fx;
                iArr3[1] = iArr3[1] + 1;
                if (this.fx[1] > getLength(dv) - 1) {
                    this.fx[1] = getLength(dv) - 1;
                    int[] iArr4 = this.blinkFrame;
                    iArr4[4] = iArr4[4] + 1;
                    if (this.blinkFrame[4] >= 10) {
                        this.eE[1] = true;
                    }
                }
            } else if (this.fx[2] >= 1) {
                int[] iArr5 = this.fx;
                iArr5[2] = iArr5[2] + 1;
                if (this.fx[2] > getLength(dv) - 1) {
                    this.fx[2] = getLength(dv) - 1;
                    int[] iArr6 = this.blinkFrame;
                    iArr6[4] = iArr6[4] + 1;
                    if (this.blinkFrame[4] >= 10) {
                        this.eE[1] = true;
                    }
                }
            } else if (this.fx[3] >= 1) {
                int[] iArr7 = this.fx;
                iArr7[3] = iArr7[3] + 1;
                if (this.fx[3] > getLength(dv) - 1) {
                    this.fx[3] = getLength(dv) - 1;
                    int[] iArr8 = this.blinkFrame;
                    iArr8[4] = iArr8[4] + 1;
                    if (this.blinkFrame[4] >= 10) {
                        this.eE[1] = true;
                    }
                }
            } else if (this.fx[4] >= 1) {
                int[] iArr9 = this.fx;
                iArr9[4] = iArr9[4] + 1;
                if (this.fx[4] > getLength(dv) - 1) {
                    this.fx[4] = getLength(dv) - 1;
                    int[] iArr10 = this.blinkFrame;
                    iArr10[4] = iArr10[4] + 1;
                    if (this.blinkFrame[4] >= 10) {
                        this.eE[1] = true;
                    }
                }
            } else if (this.fx[5] >= 1) {
                int[] iArr11 = this.fx;
                iArr11[5] = iArr11[5] + 1;
                if (this.fx[5] > getLength(dv) - 1) {
                    this.fx[5] = 0;
                    screenTransition();
                    this.gu = true;
                    this.gw = 7;
                    return false;
                }
            } else if (this.fx[13] >= 1) {
                int[] iArr12 = this.fx;
                iArr12[13] = iArr12[13] + 1;
                if (this.fx[13] > getLength(dv) - 1) {
                    this.fx[13] = getLength(dv) - 1;
                    int[] iArr13 = this.blinkFrame;
                    iArr13[4] = iArr13[4] + 1;
                    if (this.be >= 1 && this.blinkFrame[4] >= 10) {
                        this.eE[1] = true;
                    }
                }
            } else if (this.fx[14] >= 1) {
                int[] iArr14 = this.fx;
                iArr14[14] = iArr14[14] + 1;
                if (this.fx[14] > getLength(dv) - 1) {
                    this.fx[14] = 0;
                    if (this.bB[8] == 0) {
                        screenTransition();
                        this.bB[8] = 1;
                        this.gU = true;
                        for (int i = 0; i < getLength(this.gV); i++) {
                            this.gV[i] = 0;
                        }
                        aSound.getInstance().setVolume(50);
                        return false;
                    } else if (this.catfood >= 900000) {
                        screenTransition();
                        this.gu = true;
                        this.gw = 10000;
                        return false;
                    } else {
                        screenTransition();
                        this.menuType = 0;
                        this.j = true;
                        return false;
                    }
                }
            } else if (this.fx[15] >= 1) {
                int[] iArr15 = this.fx;
                iArr15[15] = iArr15[15] + 1;
                if (this.fx[15] > getLength(dv) - 1) {
                    this.fx[15] = getLength(dv) - 1;
                    int[] iArr16 = this.blinkFrame;
                    iArr16[4] = iArr16[4] + 1;
                    if (this.be >= 1 && this.blinkFrame[4] >= 10) {
                        this.eE[1] = true;
                    }
                }
            } else {
                for (int i2 = 0; i2 < this.fL; i2++) {
                    if (isPointerDown() && isTouching(this.buttonCoordinates1[i2][0], this.buttonCoordinates1[i2][1], this.buttonCoordinates1[i2][2], this.buttonCoordinates1[i2][3]) && i2 != this.fI) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        if (this.by[i2] >= 1) {
                            this.fI = i2;
                        }
                    }
                }
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                    this.gp[5] = false;
                } else if (!this.gp[5]) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    this.gp[5] = true;
                }
                if (isPointerUp() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3]) && this.fI == 0) {
                    int[] iArr17 = this.fx;
                    iArr17[0] = iArr17[0] + 1;
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3]) && this.fI == 1) {
                    int[] iArr18 = this.fx;
                    iArr18[1] = iArr18[1] + 1;
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[2][0], this.buttonCoordinates1[2][1], this.buttonCoordinates1[2][2], this.buttonCoordinates1[2][3]) && this.fI == 2) {
                    int[] iArr19 = this.fx;
                    iArr19[2] = iArr19[2] + 1;
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[3][0], this.buttonCoordinates1[3][1], this.buttonCoordinates1[3][2], this.buttonCoordinates1[3][3]) && this.fI == 3) {
                    int[] iArr20 = this.fx;
                    iArr20[3] = iArr20[3] + 1;
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[4][0], this.buttonCoordinates1[4][1], this.buttonCoordinates1[4][2], this.buttonCoordinates1[4][3]) && this.fI == 4) {
                    int[] iArr21 = this.fx;
                    iArr21[4] = iArr21[4] + 1;
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                    int[] iArr22 = this.fx;
                    iArr22[5] = iArr22[5] + 1;
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[13][0], this.buttonCoordinates1[13][1], this.buttonCoordinates1[13][2], this.buttonCoordinates1[13][3])) {
                    if (this.be >= 1) {
                        int[] iArr23 = this.fx;
                        iArr23[13] = iArr23[13] + 1;
                        this.fI = 13;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        this.gR = 0;
                    }
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3])) {
                    if (this.bf >= 1) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr24 = this.fx;
                        iArr24[14] = iArr24[14] + 1;
                    }
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[15][0], this.buttonCoordinates1[15][1], this.buttonCoordinates1[15][2], this.buttonCoordinates1[15][3])) {
                    if (this.be >= 1) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr25 = this.fx;
                        iArr25[15] = iArr25[15] + 1;
                        this.fI = 13;
                        this.gR = 1;
                    }
                } else if (isBackPressed()) {
                    screenTransition();
                    this.gu = true;
                    this.gw = 7;
                    return false;
                }
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[13][0], this.buttonCoordinates1[13][1], this.buttonCoordinates1[13][2], this.buttonCoordinates1[13][3]) || this.be < 1) {
                    this.gp[13] = false;
                } else if (!this.gp[13]) {
                    this.gp[13] = true;
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) || this.bf < 1) {
                    this.gp[14] = false;
                } else if (!this.gp[14]) {
                    this.gp[14] = true;
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                if (this.be >= 1) {
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[15][0], this.buttonCoordinates1[15][1], this.buttonCoordinates1[15][2], this.buttonCoordinates1[15][3]) || this.bf < 1) {
                        this.gp[15] = false;
                    } else if (!this.gp[15]) {
                        this.gp[15] = true;
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    }
                }
            }
        }
        if (!this.eb && this.fR[0] == 0) {
            int[] iArr26 = this.blinkFrame;
            iArr26[0] = iArr26[0] + 1;
            if (this.blinkFrame[0] >= getLength(cu)) {
                this.fR[0] = 1;
                this.blinkFrame[0] = 0;
            }
        }
        if (this.fR[0] == 1) {
            int[] iArr27 = this.blinkFrame;
            iArr27[0] = iArr27[0] + 1;
            if (this.blinkFrame[0] >= getLength(cv)) {
                this.blinkFrame[0] = 0;
            }
            this.blinkFrame[1] -= 1;
            if (this.blinkFrame[1] <= 0) {
                this.blinkFrame[1] = aMath.rand(120) + 30;
            }
        }
        if (this.eE[1]) {
            int a = getLength(this.gc) - 1;
            while (true) {
                if (a < 0) {
                    break;
                } else if (this.gc[a] <= 0) {
                    this.gc[a] = 1;
                    break;
                } else {
                    this.gc[a] = this.gc[a] * 2;
                    a--;
                }
            }
            if (this.gc[0] >= 800 && this.gc[1] >= 800 && this.gc[2] >= 800 && this.gc[3] >= 800 && this.gc[4] >= 800) {
                if (this.fI == 0) {
                    this.fx[0] = 0;
                    screenTransition();
                    this.setScreenType(ScreenType.MAP);
                    this.screenLoadState = -1;
                    this.eE[0] = true;
                    this.eE[1] = false;
                    if (this.by[0] == 1) {
                        this.by[0] = 2;
                        return false;
                    }
                    return false;
                } else if (this.fI == 1) {
                    this.fx[1] = 0;
                    screenTransition();
                    this.setScreenType(ScreenType.POWER_UP);
                    this.screenLoadState = -1;
                    this.eE[0] = true;
                    this.eE[1] = false;
                    if (this.by[1] == 1) {
                        this.by[1] = 2;
                        return false;
                    }
                    return false;
                } else if (this.fI == 2) {
                    this.fx[2] = 0;
                    screenTransition();
                    this.setScreenType(ScreenType.EQUIP);
                    this.screenLoadState = -1;
                    this.eE[0] = true;
                    this.eE[1] = false;
                    if (this.by[2] == 1) {
                        this.by[2] = 2;
                        return false;
                    }
                    return false;
                } else if (this.fI == 3) {
                    this.fx[3] = 0;
                    screenTransition();
                    this.setScreenType(ScreenType.TREASURE);
                    this.screenLoadState = -1;
                    this.eE[0] = true;
                    this.eE[1] = false;
                    if (this.by[3] == 1) {
                        this.by[3] = 2;
                        return false;
                    }
                    return false;
                } else if (this.fI == 4) {
                    this.fx[4] = 0;
                    screenTransition();
                    this.setScreenType(ScreenType.ENEMY_GUIDE);
                    this.screenLoadState = -1;
                    this.eE[0] = true;
                    this.eE[1] = false;
                    if (this.by[4] == 1) {
                        this.by[4] = 2;
                        return false;
                    }
                    return false;
                } else if (this.fI == 13) {
                    screenTransition();
                    this.setScreenType(ScreenType.ITEM_SHOP);
                    this.screenLoadState = -1;
                    this.eE[0] = true;
                    this.eE[1] = false;
                    return false;
                }
            }
        } else if (!this.eb) {
            int i3 = 0;
            while (true) {
                if (i3 >= getLength(this.gc) - 1) {
                    break;
                } else if (this.gc[i3] >= 450) {
                    this.gc[i3] = (this.gc[i3] * 100) / 200;
                    break;
                } else {
                    this.gc[i3] = (this.gc[i3] * 100) / 200;
                    i3++;
                }
            }
            if (this.fR[0] == 0 || this.gc[0] >= 1 || this.gc[1] >= 1 || this.gc[2] >= 1 || this.gc[3] >= 1 || this.gc[4] >= 1) {
                this.eE[2] = true;
            } else if (this.eE[2] && this.bo == 1) {
                screenTransition();
                this.eb = true;
                this.ed = 1;
                return false;
            } else {
                this.eE[2] = false;
            }
        }
        int[] iArr28 = this.blinkFrame;
        iArr28[3] = iArr28[3] + 1;
        if (!this.eE[2]) {
            if (this.fR[0] == 0) {
                int i4 = cu[this.blinkFrame[0]];
            } else if (this.fR[0] == 1) {
                int i5 = cv[this.blinkFrame[0]];
            } else {
                int i6 = this.fR[0];
            }
            if (isPointerDown()) {
                this.eE[6] = true;
                this.eE[3] = false;
                this.blinkFrame[2] = 0;
            } else {
                this.eE[6] = false;
                this.eE[3] = false;
                this.blinkFrame[2] = 0;
            }
            if (isPointerDown() && isTouching(this.buttonCoordinates1[6][0], this.buttonCoordinates1[6][1], this.buttonCoordinates1[6][2], this.buttonCoordinates1[6][3]) && !this.eE[3] && !this.eE[5]) {
                this.gameStats1[1] = getCurrentXTouch() - getTempXTouch();
            } else if (isPointerDown()) {
                this.gameStats1[1] = 0;
                this.eE[5] = true;
            } else {
                this.gameStats1[1] = 0;
                this.eE[5] = false;
            }
            if (isPointerDown() && isTouching(this.buttonCoordinates1[6][0] + this.gameStats1[1], this.buttonCoordinates1[6][1], this.buttonCoordinates1[6][2], this.buttonCoordinates1[6][3]) && !this.eE[3] && !this.eE[4]) {
                this.gameStats1[0] = getCurrentXTouch() - getTempXTouch();
                if (this.gameStats1[0] <= 0) {
                    this.gameStats1[0] = 0;
                }
                if (this.gameStats1[0] >= 60) {
                    this.gameStats1[0] = 60;
                }
            } else if (isPointerDown()) {
                this.gameStats1[0] = 0;
                this.eE[4] = true;
            } else {
                this.gameStats1[0] = 0;
                this.eE[4] = false;
            }
        }
        return true;
    }

    void mapLoad() {
        this.gI = false;
        //aAd.b().f();
        this.zoomLevel = 10000;
        for (int i = 0; i < getLength(this.scrollAmount); i++) {
            this.scrollAmount[i] = 0;
        }
        for (int i2 = 0; i2 < getLength(this.gp); i2++) {
            this.gp[i2] = false;
        }
        this.gp[6] = true;
        for (int i3 = 0; i3 < getLength(this.buttonCoordinates1); i3++) {
            for (int i4 = 0; i4 < getLength(this.buttonCoordinates1[i3]); i4++) {
                this.buttonCoordinates1[i3][i4] = 0;
            }
        }
        loadTextures2();
        for (int i5 = 6; i5 < getLength(this.uiTextures) - 6; i5++) {
            if (this.uiTextures[i5].isLoaded()) {
                this.uiTextures[i5].reset();
            }
        }
        for (int i6 = 0; i6 < getLength(this.textTextures); i6++) {
            if (this.textTextures[i6].isLoaded()) {
                this.textTextures[i6].reset();
            }
        }
        for (int i7 = 0; i7 < getLength(this.gA); i7++) {
            this.gA[i7] = 0;
        }
        for (int i8 = 0; i8 < getLength(this.warning2Text[1]); i8++) {
            this.textTextures[i8 + 10].drawText(this.warning2Text[1][i8], "FONT_SYSTEM_BOLD", 30, 1);
        }
        if (this.uiTextures[6].isLoaded()) {
            this.uiTextures[6].reset();
        }
        if (!this.uiTextures[6].isLoaded()) {
            this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 18)), MyUtility.getString(String.format("img%03d.imgcut", 18)));
        }
        if (this.uiTextures[7].isLoaded()) {
            this.uiTextures[7].reset();
        }
        if (!this.uiTextures[7].isLoaded()) {
            this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 19)), MyUtility.getString(String.format("img%03d.imgcut", 19)));
        }
        if (this.uiTextures[9].isLoaded()) {
            this.uiTextures[9].reset();
        }
        if (!this.uiTextures[9].isLoaded()) {
            this.uiTextures[9].load(MyUtility.getString(String.format("img%03d.png", 31)), MyUtility.getString(String.format("img%03d.imgcut", 31)));
        }
        if (this.uiTextures[10].isLoaded()) {
            this.uiTextures[10].reset();
        }
        if (!this.uiTextures[10].isLoaded()) {
            this.uiTextures[10].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
        }
        if (this.uiTextures[11].isLoaded()) {
            this.uiTextures[11].reset();
        }
        if (!this.uiTextures[11].isLoaded()) {
            this.uiTextures[11].load(MyUtility.getString(String.format("img%03d.png", 30)), MyUtility.getString(String.format("img%03d.imgcut", 30)));
        }
        if (this.uiTextures[12].isLoaded()) {
            this.uiTextures[12].reset();
        }
        if (!this.uiTextures[12].isLoaded()) {
            this.uiTextures[12].load(MyUtility.getString(String.format("img%03d.png", 33)), MyUtility.getString(String.format("img%03d.imgcut", 33)));
        }
        if (this.uiTextures[13].isLoaded()) {
            this.uiTextures[13].reset();
        }
        if (!this.uiTextures[13].isLoaded()) {
            this.uiTextures[13].load(MyUtility.getString(String.format("img%03d.png", 1)), MyUtility.getString(String.format("img%03d.imgcut", 1)));
        }
        this.buttonCoordinates1[0][0] = this.excessWidth + 640;
        this.buttonCoordinates1[0][1] = 411;
        this.buttonCoordinates1[0][2] = 304;
        this.buttonCoordinates1[0][3] = 88;
        this.buttonCoordinates1[5][0] = 4;
        this.buttonCoordinates1[5][1] = 541;
        this.buttonCoordinates1[5][2] = 95;
        this.buttonCoordinates1[5][3] = 95;
        this.buttonCoordinates1[13][0] = this.excessWidth + 344;
        this.buttonCoordinates1[13][1] = 560;
        this.buttonCoordinates1[13][2] = 247;
        this.buttonCoordinates1[13][3] = 88;
        this.buttonCoordinates1[14][0] = this.excessWidth + 680;
        this.buttonCoordinates1[14][1] = 552;
        this.buttonCoordinates1[14][2] = 88;
        this.buttonCoordinates1[14][3] = 88;
        this.buttonCoordinates1[15][0] = this.excessWidth + 626;
        this.buttonCoordinates1[15][1] = 0;
        this.buttonCoordinates1[15][2] = 88;
        this.buttonCoordinates1[15][3] = 88;
        this.buttonCoordinates1[16][0] = this.excessWidth + 667;
        this.buttonCoordinates1[16][1] = 318;
        this.buttonCoordinates1[16][2] = 272;
        this.buttonCoordinates1[16][3] = 88;
        for (int i9 = 0; i9 < getLength(this.eJ); i9++) {
            this.eJ[i9][0] = (i9 * 88) + 447 + this.excessWidth;
            this.eJ[i9][1] = 502;
            this.eJ[i9][2] = 88;
            this.eJ[i9][3] = 88;
        }
        this.eJ[6][0] = 736;
        this.eJ[6][1] = 247;
        this.eJ[6][2] = 95;
        this.eJ[6][3] = 95;
        for (int i10 = 0; i10 < getLength(this.blinkFrame); i10++) {
            this.blinkFrame[i10] = 0;
        }
        if (this.aZ != 0) {
            for (int i11 = 0; i11 < getLength(this.gm); i11++) {
                this.gm[i11] = 0;
            }
            this.gm[1] = 297;
        } else if (this.gM == 1) {
            for (int i12 = 0; i12 < getLength(this.gm); i12++) {
                this.gm[i12] = 0;
            }
            this.gm[1] = 297;
        } else {
            for (int i13 = 0; i13 < getLength(this.gm); i13++) {
                this.gm[i13] = 0;
            }
            this.gm[0] = 297;
            this.fP = getWidth();
        }
        for (int i14 = 0; i14 < getLength(this.fx); i14++) {
            this.fx[i14] = 0;
        }
        for (int i15 = 0; i15 < getLength(this.eK); i15++) {
            this.eK[i15] = 0;
        }
        for (int i16 = 0; i16 < getLength(this.hk); i16++) {
            this.hk[i16] = 0;
        }
        for (int i17 = 0; i17 < getLength(this.fC); i17++) {
            this.fC[i17] = 0;
        }
        for (int i18 = 0; i18 < getLength(this.fy); i18++) {
            this.fy[i18] = 0;
        }
        for (int i19 = 0; i19 < getLength(this.fz); i19++) {
            this.fz[i19] = 0;
        }
        for (int i20 = 0; i20 < getLength(this.gZ); i20++) {
            this.gZ[i20] = 0;
        }
        for (int i21 = 0; i21 < getLength(this.gameStats1); i21++) {
            this.gameStats1[i21] = 0;
        }
        for (int i22 = 0; i22 < getLength(this.eE); i22++) {
            this.eE[i22] = false;
        }
        if (this.aZ != 0) {
            this.eE[0] = true;
        }
        for (int i23 = 0; i23 < getLength(this.gameStats1); i23++) {
            this.gameStats1[i23] = 0;
        }
        for (int i24 = 0; i24 < getLength(this.ei); i24++) {
            this.ei[i24] = 0;
        }
        if (this.previousScreen == 0) {
            for (int i25 = 0; i25 < getLength(this.gameStats1); i25++) {
                this.gameStats1[i25] = 0;
            }
            for (int i26 = 0; i26 < getLength(this.ei); i26++) {
                this.ei[i26] = 0;
            }
            this.fR[0] = 0;
            this.blinkFrame[0] = getLength(cu) - 1;
            this.boxScale = 200;
            this.boxCounts[0] = 2;
            if (this.bq[this.eQ] + 1 >= 49) {
                if (this.dH == this.bq[this.eQ] - 1 || this.dH >= 48) {
                    this.boxCounts[1] = 48;
                    this.gameStats1[0] = -((this.boxScale * this.boxCounts[0]) + (this.boxScale * 47));
                    this.currentStageBox[0] = this.boxCounts[0];
                    this.currentStageBox[2] = this.bp[this.eQ];
                    this.currentStageBox[1] = (this.boxScale * 100) + (this.gameStats1[0] / this.boxScale);
                } else {
                    if (this.bq[this.eQ] + 1 >= 49) {
                        this.boxCounts[1] = 48;
                    } else {
                        this.boxCounts[1] = this.bq[this.eQ] + 1;
                    }
                    this.gameStats1[0] = -((this.boxScale * this.boxCounts[0]) + (this.boxScale * this.dH));
                    this.currentStageBox[0] = this.boxCounts[0];
                    this.currentStageBox[2] = this.bp[this.eQ];
                    this.currentStageBox[1] = (this.boxScale * 100) + (this.gameStats1[0] / this.boxScale);
                }
            } else if ((this.dH == this.bq[this.eQ] - 1 && this.bI == -1) || this.dH == this.bq[this.eQ]) {
                this.boxCounts[1] = this.bq[this.eQ] + 1;
                this.gameStats1[0] = -((this.boxScale * this.boxCounts[0]) + (this.boxScale * this.bq[this.eQ]));
                this.currentStageBox[0] = this.boxCounts[0];
                this.currentStageBox[2] = this.bp[this.eQ];
                this.currentStageBox[1] = (this.boxScale * 100) + (this.gameStats1[0] / this.boxScale);
                this.dH = this.bq[this.eQ];
            } else {
                this.boxCounts[1] = this.bq[this.eQ] + 1;
                this.gameStats1[0] = -((this.boxScale * this.boxCounts[0]) + (this.boxScale * this.dH));
                this.currentStageBox[0] = this.boxCounts[0];
                this.currentStageBox[2] = this.bp[this.eQ];
                this.currentStageBox[1] = (this.boxScale * 100) + (this.gameStats1[0] / this.boxScale);
            }
            for (int i27 = 0; i27 < getLength(this.boxSize); i27++) {
                for (int i28 = 0; i28 < getLength(this.boxSize[i27]); i28++) {
                    if (i28 == 0) {
                        this.boxSize[i27][i28] = 194;
                    } else if (i28 == 1) {
                        this.boxSize[i27][i28] = 64;
                    }
                }
            }
            this.dZ = 0;
            this.ea = 0;
            for (int i29 = 0; i29 < getLength(this.mapOffsetX); i29++) {
                this.mapOffsetX[i29] = 0;
            }
            for (int i30 = 0; i30 < getLength(this.mapOffsetY); i30++) {
                this.mapOffsetY[i30] = 0;
            }
        } else {
            this.boxScale = 200;
            this.boxCounts[0] = 2;
            int i31 = 0;
            for (int i32 = 0; i32 < getLength(this.currentStageBox); i32++) {
                this.currentStageBox[i32] = this.gT[i32];
                i31 = i32 + 1;
            }
            this.gameStats1[0] = this.gT[i31];
            for (int i33 = 0; i33 < getLength(this.boxCounts); i33++) {
                this.boxCounts[i33] = this.gD[i33];
            }
            this.eE[0] = true;
            this.fP = getWidth() / 2;
            this.gm[0] = 0;
            this.gm[1] = 297;
        }
        this.bI = 0;
        int rand = aMath.rand(4);
        if (rand == 0) {
            this.mapOffsetX[0] = (-ck[cm[this.currentStageBox[2]]][0]) + (((getWidth() / 2) - 80) - 200);
            this.mapOffsetY[0] = (-ck[cm[this.currentStageBox[2]]][1]) + 200;
            this.mapOffsetX[1] = -200;
            this.mapOffsetY[1] = -200;
        } else if (rand == 1) {
            this.mapOffsetX[0] = (-ck[cm[this.currentStageBox[2]]][0]) + ((getWidth() / 2) - 80) + 200;
            this.mapOffsetY[0] = (-ck[cm[this.currentStageBox[2]]][1]) + 600;
            this.mapOffsetX[1] = 200;
            this.mapOffsetY[1] = 200;
        } else if (rand == 2) {
            this.mapOffsetX[0] = (-ck[cm[this.currentStageBox[2]]][0]) + (((getWidth() / 2) - 80) - 200);
            this.mapOffsetY[0] = (-ck[cm[this.currentStageBox[2]]][1]) + 600;
            this.mapOffsetX[1] = -200;
            this.mapOffsetY[1] = 200;
        } else if (rand == 3) {
            this.mapOffsetX[0] = (-ck[cm[this.currentStageBox[2]]][0]) + ((getWidth() / 2) - 80) + 200;
            this.mapOffsetY[0] = (-ck[cm[this.currentStageBox[2]]][1]) + 200;
            this.mapOffsetX[1] = 200;
            this.mapOffsetY[1] = -200;
        }
        if (this.gM == 1) {
            this.gM = 0;
        }
        for (int i34 = 0; i34 < getLength(this.dM); i34++) {
            this.dM[i34] = 0;
        }
        for (int i35 = 0; i35 < getLength(this.dN); i35++) {
            this.dN[i35] = 0;
        }
        for (int i36 = 0; i36 < getLength(this.dO); i36++) {
            this.dO[i36] = 0;
        }
        for (int i37 = 0; i37 < getLength(this.dP); i37++) {
            this.dP[i37] = 0;
        }
        this.mapScrollState = 0;
        this.dT = 0;
        this.dU = 0;
        this.gN = false;
        this.dY = 0;
        this.mapCatPosition = 0;
        this.selectedStage = this.currentStageBox[2];
        this.ct = 0;
        int i38 = 0;
        for (int i39 = 0; i39 < 10; i39++) {
            i38 += (cB[10] * this.bO[i39][10]) / 100;
        }
        if (this.currentEnergy >= ad[10] + (this.bx[10] * 10) + i38) {
            this.currentEnergy = i38 + ad[10] + (this.bx[10] * 10);
        }
        for (int i40 = 0; i40 < getLength(this.boxSize); i40++) {
            for (int i41 = 0; i41 < getLength(this.boxSize[i40]); i41++) {
                if (i41 == 0) {
                    if (i40 == this.currentStageBox[0]) {
                        this.boxSize[i40][i41] = (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 49) / 100) + 243;
                        if (this.gameStats1[0] > 0) {
                            this.boxSize[i40][i41] = 243 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 49) / 100);
                        }
                    } else if (i40 == this.currentStageBox[0] + 1) {
                        this.boxSize[i40][i41] = 194 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 49) / 100);
                    } else {
                        this.boxSize[i40][i41] = 194;
                    }
                    if (this.boxSize[i40][i41] >= 243) {
                        this.boxSize[i40][i41] = 243;
                    } else if (this.boxSize[i40][i41] <= 194) {
                        this.boxSize[i40][i41] = 194;
                    }
                } else if (i41 == 1) {
                    if (i40 == this.currentStageBox[0]) {
                        this.boxSize[i40][i41] = (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 17) / 100) + 81;
                        if (this.gameStats1[0] > 0) {
                            this.boxSize[i40][i41] = 81 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 17) / 100);
                        }
                    } else if (i40 == this.currentStageBox[0] + 1) {
                        this.boxSize[i40][i41] = 64 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 17) / 100);
                    } else {
                        this.boxSize[i40][i41] = 64;
                    }
                    if (this.boxSize[i40][i41] >= 81) {
                        this.boxSize[i40][i41] = 81;
                    } else if (this.boxSize[i40][i41] <= 64) {
                        this.boxSize[i40][i41] = 64;
                    }
                }
            }
        }
        this.isScrolling = false;
    }

    boolean mapProcess() {
        if (this.be >= 1 && !this.eE[0] && this.bB[7] == 0) {
            screenTransition();
            this.bB[7] = 1;
            this.gU = true;
            for (int i = 0; i < getLength(this.gV); i++) {
                this.gV[i] = 0;
            }
            return false;
        }
        int[] iArr = this.gameStats1;
        iArr[0] = iArr[0] + this.scrollAmount[0];
        int[] iArr2 = this.gameStats1;
        iArr2[1] = iArr2[1] - this.scrollAmount[0];
        this.scrollAmount[0] = (int) (this.scrollAmount[0] * 0.9d);
        if (this.gameStats1[0] > ((this.boxScale / 2) - (this.boxScale * this.boxCounts[0])) - 20) {
            this.gameStats1[0] = ((this.boxScale / 2) - (this.boxScale * this.boxCounts[0])) - 20;
            this.gameStats1[1] = this.boxScale * 100;
            this.scrollAmount[0] = 0;
        } else if (this.gameStats1[0] < (-((((this.boxScale * (this.boxCounts[0] - 1)) + (this.boxScale * this.boxCounts[1])) + (this.boxScale / 2)) - 20))) {
            this.gameStats1[0] = -((((this.boxScale * (this.boxCounts[0] - 1)) + (this.boxScale * this.boxCounts[1])) + (this.boxScale / 2)) - 20);
            this.scrollAmount[0] = 0;
            this.gameStats1[1] = this.boxScale * 100;
        }
        if (!isPointerDown() || this.eE[0] || this.eE[1] || this.eE[2] || this.eE[3] || this.eE[13] || this.dY != 0 || this.eb || this.dV || this.fx[0] != 0) {
            this.isScrolling = false;
            if ((this.scrollAmount[0] >= 0 && this.scrollAmount[0] < 8) || (this.scrollAmount[0] > -8 && this.scrollAmount[0] <= 0)) {
                this.scrollAmount[0] = 0;
                if (this.gameStats1[0] % this.boxScale != 0) {
                    if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
                        this.gameStats1[0] = this.gameStats1[0] - ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4);
                        if ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4 == 0) {
                            this.gameStats1[0] = ((this.gameStats1[0] / this.boxScale) - 1) * this.boxScale;
                        }
                    } else {
                        this.gameStats1[0] = this.gameStats1[0] - (((this.gameStats1[0] % this.boxScale) - 4) / 4);
                        if (((this.gameStats1[0] % this.boxScale) - 4) / 4 == 0) {
                            this.gameStats1[0] = (this.gameStats1[0] / this.boxScale) * this.boxScale;
                        }
                    }
                }
            }
            if (!isPointerUp()) {
                this.eE[9] = false;
            }
        } else {
            if (getCurrentXTouch() - getPreviousXTouch() <= -10 || getCurrentXTouch() - getPreviousXTouch() >= 10 || this.isScrolling) {
                this.isScrolling = true;
            } else {
                this.scrollAmount[0] = 0;
            }
            if (this.isScrolling) {
                this.scrollAmount[0] = getCurrentXTouch() - getPreviousXTouch();
                if (this.scrollAmount[0] != 0 && !this.eE[9]) {
                    this.ct = 0;
                    this.gA[0] = 0;
                    this.eE[9] = true;
                }
            }
        }
        if (this.scrollAmount[0] < 0) {
            if (this.currentStageBox[0] != (-(this.gameStats1[0] / this.boxScale))) {
                aSound.getInstance().play(SoundType.BUTTON_SELECT);
            }
            this.gp[6] = false;
        } else if (this.scrollAmount[0] > 0) {
            if (this.currentStageBox[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
                aSound.getInstance().play(SoundType.BUTTON_SELECT);
            }
            this.gp[6] = false;
        } else if (this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.gp[6]) {
            aSound.getInstance().play(SoundType.BUTTON_SELECT);
            this.gp[6] = true;
        }
        if (this.currentStageBox[0] != (-(this.gameStats1[0] / this.boxScale))) {
            this.currentStageBox[0] = -(this.gameStats1[0] / this.boxScale);
        }
        if (this.currentStageBox[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
            this.currentStageBox[1] = ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale;
        }
        if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
            if ((this.currentStageBox[0] + 1) - this.boxCounts[0] != this.currentStageBox[2]) {
                this.currentStageBox[2] = (this.currentStageBox[0] + 1) - this.boxCounts[0];
                // TODO: check that the map scrolling fix is good
                int mapOffsetX = ((-ck[cm[this.currentStageBox[2]]][0]) + (getWidth() / 2)) - 80;
                //this.gameStats1[0] = ((-ck[cm[this.currentStageBox[2]]][0]) + (getWidth() / 2)) - 80;
                this.gameStats1[1] = (-ck[cm[this.currentStageBox[2]]][1]) + 320 + 80;
                this.mapOffsetX[1] = this.mapOffsetX[0] - mapOffsetX;
                this.mapOffsetY[1] = this.mapOffsetY[0] - this.gameStats1[1];
            }
        } else if (this.currentStageBox[0] - this.boxCounts[0] != this.currentStageBox[2]) {
            this.currentStageBox[2] = this.currentStageBox[0] - this.boxCounts[0];
            // TODO: check that the map scrolling fix is good
            int mapOffsetX = ((-ck[cm[this.currentStageBox[2]]][0]) + (getWidth() / 2)) - 80;
            //this.gameStats1[0] = ((-ck[cm[this.currentStageBox[2]]][0]) + (getWidth() / 2)) - 80;
            this.gameStats1[1] = (-ck[cm[this.currentStageBox[2]]][1]) + 320 + 80;
            this.mapOffsetX[1] = this.mapOffsetX[0] - mapOffsetX;
            this.mapOffsetY[1] = this.mapOffsetY[0] - this.gameStats1[1];
        }
        if (this.mapOffsetX[1] > 0) {
            int[] iArr3 = this.mapOffsetX;
            iArr3[0] = iArr3[0] - (this.mapOffsetX[1] / 6);
            int[] iArr4 = this.mapOffsetY;
            iArr4[0] = iArr4[0] - (this.mapOffsetY[1] / 6);
            int[] iArr5 = this.mapOffsetX;
            iArr5[1] = iArr5[1] - (this.mapOffsetX[1] / 6);
            int[] iArr6 = this.mapOffsetY;
            iArr6[1] = iArr6[1] - (this.mapOffsetY[1] / 6);
        } else {
            int[] iArr7 = this.mapOffsetX;
            iArr7[0] = iArr7[0] - (this.mapOffsetX[1] / 6);
            int[] iArr8 = this.mapOffsetY;
            iArr8[0] = iArr8[0] - (this.mapOffsetY[1] / 6);
            int[] iArr9 = this.mapOffsetX;
            iArr9[1] = iArr9[1] - (this.mapOffsetX[1] / 6);
            int[] iArr10 = this.mapOffsetY;
            iArr10[1] = iArr10[1] - (this.mapOffsetY[1] / 6);
        }
        if (!this.eE[0] && !this.eE[1] && !this.eE[2] && !this.eE[3] && !this.eE[13] && this.dY == 0 && !this.eE[9] && !this.eb) {
            if (this.fx[0] >= 1) {
                int[] iArr11 = this.fx;
                iArr11[0] = iArr11[0] + 1;
                if (this.aZ == 0) {
                    if (this.currentEnergy >= this.stageEoCStats[this.currentStageBox[2]] + X[this.eQ]) {
                        if (this.fx[0] > getLength(dv) - 2) {
                            this.gN = true;
                        }
                        if (this.fx[0] > getLength(dv) - 1) {
                            this.fx[0] = 0;
                            this.dH = this.currentStageBox[2];
                            this.eE[2] = true;
                            this.gameStats1[2] = 0;
                            this.gameStats1[3] = 960;
                            aSound.getInstance().play(SoundType.BATTLE_START);
                            this.gA[0] = 0;
                            this.ct = 0;
                            this.currentEnergy -= this.stageEoCStats[this.currentStageBox[2]] + X[this.eQ];
                        }
                    } else if (this.fx[0] > getLength(dv) - 1) {
                        this.fx[0] = 0;
                    }
                } else if (this.currentEnergy >= this.stageEoCStats[this.currentStageBox[2]] + X[this.eQ]) {
                    if (this.fx[0] > getLength(dv) - 2) {
                        this.gN = true;
                    }
                    if (this.fx[0] > getLength(dv) - 1) {
                        this.fx[0] = 0;
                        this.dH = this.currentStageBox[2];
                        this.eE[2] = true;
                        this.gameStats1[2] = 0;
                        this.gameStats1[3] = 960;
                        aSound.getInstance().play(SoundType.BATTLE_START);
                        this.gA[0] = 0;
                        this.ct = 0;
                        this.currentEnergy -= this.stageEoCStats[this.currentStageBox[2]] + X[this.eQ];
                    }
                } else {
                    int i2 = 0;
                    for (int i3 = 0; i3 < 10; i3++) {
                        i2 += (cB[10] * this.bO[i3][10]) / 100;
                    }
                    if (this.br[this.eQ][this.currentStageBox[2]] >= 1) {
                        if (ad[10] + (this.bx[10] * 10) + i2 >= ((((((Math.min(this.br[this.eQ][this.currentStageBox[2]] + 1, 8)) + 6) * (X[this.eQ] + this.stageEoCStats[this.currentStageBox[2]])) * 10) / ((Math.min(this.br[this.eQ][this.currentStageBox[2]] + 1, 8)) * 6)) + 5) / 10) {
                            if (this.fx[0] > getLength(dv) - 1) {
                                this.fx[0] = 0;
                                screenTransition();
                                this.gu = true;
                                this.gw = 4;
                                return false;
                            }
                        } else if (this.fx[0] > getLength(dv) - 1) {
                            this.fx[0] = 0;
                            screenTransition();
                            this.gu = true;
                            this.gw = 5;
                            return false;
                        }
                    } else if (i2 + ad[10] + (this.bx[10] * 10) >= this.stageEoCStats[this.currentStageBox[2]] + X[this.eQ]) {
                        if (this.fx[0] > getLength(dv) - 1) {
                            this.fx[0] = 0;
                            screenTransition();
                            this.gu = true;
                            this.gw = 4;
                            return false;
                        }
                    } else if (this.fx[0] > getLength(dv) - 1) {
                        this.fx[0] = 0;
                        screenTransition();
                        this.gu = true;
                        this.gw = 5;
                        return false;
                    }
                }
            } else if (this.fx[5] >= 1) {
                int[] iArr12 = this.fx;
                iArr12[5] = iArr12[5] + 1;
                if (this.fx[5] > getLength(dv) - 1) {
                    this.fx[5] = 0;
                    if (this.aZ == 0) {
                        screenTransition();
                        this.gu = true;
                        this.gw = 7;
                        return false;
                    }
                    this.eE[1] = true;
                    this.gA[0] = 0;
                    this.ct = 0;
                }
            } else if (this.fx[13] >= 1) {
                int[] iArr13 = this.fx;
                iArr13[13] = iArr13[13] + 1;
                if (this.fx[13] > getLength(dv) - 1) {
                    this.fx[13] = 0;
                    if (this.be >= 1) {
                        this.eE[13] = true;
                    }
                    this.gA[0] = 0;
                    this.ct = 0;
                }
            } else if (this.fx[14] >= 1) {
                int[] iArr14 = this.fx;
                iArr14[14] = iArr14[14] + 1;
                if (this.fx[14] > getLength(dv) - 1) {
                    this.fx[14] = 0;
                    this.gA[0] = 0;
                    this.ct = 0;
                    if (this.bB[8] == 0) {
                        screenTransition();
                        this.bB[8] = 1;
                        this.gU = true;
                        for (int i4 = 0; i4 < getLength(this.gV); i4++) {
                            this.gV[i4] = 0;
                        }
                        aSound.getInstance().setVolume(50);
                        return false;
                    } else if (this.catfood >= 900000) {
                        screenTransition();
                        this.gu = true;
                        this.gw = 10000;
                        return false;
                    } else {
                        screenTransition();
                        this.menuType = 0;
                        this.j = true;
                        return false;
                    }
                }
            } else if (this.fx[15] >= 1) {
                int[] iArr15 = this.fx;
                iArr15[15] = iArr15[15] + 1;
                if (this.fx[15] > getLength(dv) - 1) {
                    this.fx[15] = 0;
                    if (this.be >= 1) {
                        this.eE[13] = true;
                    }
                    this.gA[0] = 0;
                    this.ct = 0;
                }
            } else if (this.fx[16] >= 1) {
                int[] iArr16 = this.fx;
                iArr16[16] = iArr16[16] + 1;
                if (this.fx[16] > getLength(dv) - 1) {
                    int i5 = 0;
                    for (int i6 = 0; i6 < 10; i6++) {
                        i5 += (cB[10] * this.bO[i6][10]) / 100;
                    }
                    if (this.currentEnergy >= i5 + ad[10] + (this.bx[10] * 10)) {
                        this.fx[16] = 0;
                        screenTransition();
                        this.gu = true;
                        this.gw = 6;
                        return false;
                    }
                    this.fx[16] = 0;
                    screenTransition();
                    this.gu = true;
                    this.gw = 3;
                    return false;
                }
            } else if (this.eK[0] >= 1) {
                int[] iArr17 = this.eK;
                iArr17[0] = iArr17[0] + 1;
                if (this.eK[0] > getLength(dv) - 1) {
                    this.eK[0] = 0;
                    if (this.eM[0]) {
                        this.eM[0] = false;
                    } else if (this.bA[0] >= 1) {
                        this.eM[0] = true;
                    }
                }
            } else if (this.eK[1] >= 1) {
                int[] iArr18 = this.eK;
                iArr18[1] = iArr18[1] + 1;
                if (this.eK[1] > getLength(dv) - 1) {
                    this.eK[1] = 0;
                    if (this.bb >= 1) {
                        if (this.eM[1]) {
                            this.eM[1] = false;
                        } else if (this.bA[1] >= 1) {
                            this.eM[1] = true;
                        }
                    }
                }
            } else if (this.eK[2] >= 1) {
                int[] iArr19 = this.eK;
                iArr19[2] = iArr19[2] + 1;
                if (this.eK[2] > getLength(dv) - 1) {
                    this.eK[2] = 0;
                    if (this.eM[2]) {
                        this.eM[2] = false;
                    } else if (this.bA[2] >= 1) {
                        this.eM[2] = true;
                    }
                }
            } else if (this.eK[3] >= 1) {
                int[] iArr20 = this.eK;
                iArr20[3] = iArr20[3] + 1;
                if (this.eK[3] > getLength(dv) - 1) {
                    this.eK[3] = 0;
                    if (this.eM[3]) {
                        this.eM[3] = false;
                    } else if (this.bA[3] >= 1) {
                        this.eM[3] = true;
                    }
                }
            } else if (this.eK[4] >= 1) {
                int[] iArr21 = this.eK;
                iArr21[4] = iArr21[4] + 1;
                if (this.eK[4] > getLength(dv) - 1) {
                    this.eK[4] = 0;
                    if (this.eM[4]) {
                        this.eM[4] = false;
                    } else if (this.bA[4] >= 1) {
                        this.eM[4] = true;
                    }
                }
            } else if (this.eK[5] >= 1) {
                int[] iArr22 = this.eK;
                iArr22[5] = iArr22[5] + 1;
                if (this.eK[5] > getLength(dv) - 1) {
                    this.eK[5] = 0;
                    if (this.eM[5]) {
                        this.eM[5] = false;
                    } else if (this.bA[5] >= 1) {
                        this.eM[5] = true;
                    }
                }
            } else if (this.eK[6] >= 1) {
                int[] iArr23 = this.eK;
                iArr23[6] = iArr23[6] + 1;
                if (this.eK[6] > getLength(dv) - 1) {
                    this.eK[6] = 0;
                    this.dV = false;
                    aSound.getInstance().setVolume(100);
                }
            } else {
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                    this.gp[0] = false;
                } else if (!this.gp[0]) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    this.gp[0] = true;
                }
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                    this.gp[5] = false;
                } else if (!this.gp[5]) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    this.gp[5] = true;
                }
                if (this.be >= 1) {
                    if (isPointerDown() && isTouching(this.eJ[0][0], this.eJ[0][1], this.eJ[0][2], this.eJ[0][3])) {
                        this.dX++;
                        this.dW = 0;
                    } else if (isPointerDown() && isTouching(this.eJ[1][0], this.eJ[1][1], this.eJ[1][2], this.eJ[1][3])) {
                        this.dX++;
                        this.dW = 1;
                    } else if (isPointerDown() && isTouching(this.eJ[2][0], this.eJ[2][1], this.eJ[2][2], this.eJ[2][3])) {
                        this.dX++;
                        this.dW = 2;
                    } else if (isPointerDown() && isTouching(this.eJ[3][0], this.eJ[3][1], this.eJ[3][2], this.eJ[3][3])) {
                        this.dX++;
                        this.dW = 3;
                    } else if (isPointerDown() && isTouching(this.eJ[4][0], this.eJ[4][1], this.eJ[4][2], this.eJ[4][3])) {
                        this.dX++;
                        this.dW = 4;
                    } else if (isPointerDown() && isTouching(this.eJ[5][0], this.eJ[5][1], this.eJ[5][2], this.eJ[5][3])) {
                        this.dX++;
                        this.dW = 5;
                    } else {
                        this.dX = 0;
                    }
                }
                if (this.dX >= 1) {
                    this.ct = 0;
                    this.dV = true;
                    for (int i7 = 0; i7 < getLength(this.textTextures); i7++) {
                        if (this.textTextures[i7].isLoaded()) {
                            this.textTextures[i7].reset();
                        }
                    }
                    this.textTextures[0].drawText(this.itemNameText[this.dW], "FONT_SYSTEM_BOLD", 30, 1);
                    for (int i8 = 0; i8 < 3; i8++) {
                        this.textTextures[i8 + 1].drawText(this.itemExplanationText[this.dW][i8], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                    for (int i9 = 0; i9 < getLength(this.warning2Text[1]); i9++) {
                        this.textTextures[i9 + 10].drawText(this.warning2Text[1][i9], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                    for (int i10 = 0; i10 < getLength(this.warning2Text[15]); i10++) {
                        this.textTextures[i10 + 20].drawText(this.warning2Text[15][i10], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                    this.gA[0] = 5;
                }
                if (isPointerUp() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3]) && !this.dV) {
                    if (this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0) {
                        if (this.aZ != 0) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        } else if (this.currentEnergy < this.stageEoCStats[this.currentStageBox[2]] + X[this.eQ]) {
                            aSound.getInstance().play(SoundType.CANT_PRESS);
                        } else {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        }
                        int[] iArr24 = this.fx;
                        iArr24[0] = iArr24[0] + 1;
                        this.gA[0] = 0;
                        this.ct = 0;
                    }
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3]) && !this.dV) {
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    int[] iArr25 = this.fx;
                    iArr25[5] = iArr25[5] + 1;
                    this.gA[0] = 0;
                    this.ct = 0;
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[13][0], this.buttonCoordinates1[13][1], this.buttonCoordinates1[13][2], this.buttonCoordinates1[13][3]) && !this.dV) {
                    if (this.be >= 1) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr26 = this.fx;
                        iArr26[13] = iArr26[13] + 1;
                        this.gA[0] = 0;
                        this.ct = 0;
                        this.gR = 0;
                    }
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) && !this.dV) {
                    if (this.bf >= 1) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr27 = this.fx;
                        iArr27[14] = iArr27[14] + 1;
                        this.gA[0] = 0;
                        this.ct = 0;
                    }
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[15][0], this.buttonCoordinates1[15][1], this.buttonCoordinates1[15][2], this.buttonCoordinates1[15][3]) && !this.dV) {
                    if (this.be >= 1) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr28 = this.fx;
                        iArr28[15] = iArr28[15] + 1;
                        this.gA[0] = 0;
                        this.ct = 0;
                        this.gR = 1;
                    }
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[16][0], this.buttonCoordinates1[16][1], this.buttonCoordinates1[16][2], this.buttonCoordinates1[16][3]) && !this.dV) {
                    if (this.aZ != 0) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr29 = this.fx;
                        iArr29[16] = iArr29[16] + 1;
                    }
                } else if (isPointerUp() && isTouching(this.eJ[0][0], this.eJ[0][1], this.eJ[0][2], this.eJ[0][3])) {
                    if (this.be >= 1) {
                        if (this.bA[0] >= 1) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        } else {
                            aSound.getInstance().play(SoundType.CANT_PRESS);
                        }
                        int[] iArr30 = this.eK;
                        iArr30[0] = iArr30[0] + 1;
                    }
                } else if (isPointerUp() && isTouching(this.eJ[1][0], this.eJ[1][1], this.eJ[1][2], this.eJ[1][3])) {
                    if (this.be >= 1) {
                        if (this.bA[1] < 1 || this.bb < 1) {
                            aSound.getInstance().play(SoundType.CANT_PRESS);
                        } else {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        }
                        int[] iArr31 = this.eK;
                        iArr31[1] = iArr31[1] + 1;
                    }
                } else if (isPointerUp() && isTouching(this.eJ[2][0], this.eJ[2][1], this.eJ[2][2], this.eJ[2][3])) {
                    if (this.be >= 1) {
                        if (this.bA[2] >= 1) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        } else {
                            aSound.getInstance().play(SoundType.CANT_PRESS);
                        }
                        int[] iArr32 = this.eK;
                        iArr32[2] = iArr32[2] + 1;
                    }
                } else if (isPointerUp() && isTouching(this.eJ[3][0], this.eJ[3][1], this.eJ[3][2], this.eJ[3][3])) {
                    if (this.be >= 1) {
                        if (this.bA[3] >= 1) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        } else {
                            aSound.getInstance().play(SoundType.CANT_PRESS);
                        }
                        int[] iArr33 = this.eK;
                        iArr33[3] = iArr33[3] + 1;
                    }
                } else if (isPointerUp() && isTouching(this.eJ[4][0], this.eJ[4][1], this.eJ[4][2], this.eJ[4][3])) {
                    if (this.be >= 1) {
                        if (this.bA[4] >= 1) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        } else {
                            aSound.getInstance().play(SoundType.CANT_PRESS);
                        }
                        int[] iArr34 = this.eK;
                        iArr34[4] = iArr34[4] + 1;
                    }
                } else if (isPointerUp() && isTouching(this.eJ[5][0], this.eJ[5][1], this.eJ[5][2], this.eJ[5][3])) {
                    if (this.be >= 1) {
                        if (this.bA[5] >= 1) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        } else {
                            aSound.getInstance().play(SoundType.CANT_PRESS);
                        }
                        int[] iArr35 = this.eK;
                        iArr35[5] = iArr35[5] + 1;
                    }
                } else if (isBackPressed()) {
                    if (this.aZ == 0) {
                        screenTransition();
                        this.gu = true;
                        this.gw = 7;
                        return false;
                    }
                    this.eE[1] = true;
                    this.gA[0] = 0;
                    this.ct = 0;
                }
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[13][0], this.buttonCoordinates1[13][1], this.buttonCoordinates1[13][2], this.buttonCoordinates1[13][3]) || this.be < 1) {
                    this.gp[13] = false;
                } else if (!this.gp[13]) {
                    this.gp[13] = true;
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) || this.bf < 1) {
                    this.gp[14] = false;
                } else if (!this.gp[14]) {
                    this.gp[14] = true;
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
            }
        }
        if (this.be >= 1 && (this.dV || this.gA[0] >= 1)) {
            for (int i11 = 0; i11 < 6; i11++) {
                if (isPointerDown() && isTouching(this.eJ[i11][0], this.eJ[i11][1], this.eJ[i11][2], this.eJ[i11][3]) && this.dW != i11) {
                    this.dW = i11;
                    for (int i12 = 0; i12 < getLength(this.textTextures); i12++) {
                        if (this.textTextures[i12].isLoaded()) {
                            this.textTextures[i12].reset();
                        }
                    }
                    this.textTextures[0].drawText(this.itemNameText[this.dW], "FONT_SYSTEM_BOLD", 30, 1);
                    for (int i13 = 0; i13 < 3; i13++) {
                        this.textTextures[i13 + 1].drawText(this.itemExplanationText[this.dW][i13], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                    for (int i14 = 0; i14 < getLength(this.warning2Text[1]); i14++) {
                        this.textTextures[i14 + 10].drawText(this.warning2Text[1][i14], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                    for (int i15 = 0; i15 < getLength(this.warning2Text[15]); i15++) {
                        this.textTextures[i15 + 20].drawText(this.warning2Text[15][i15], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            }
            if (!isPointerDown()) {
                this.dV = false;
                this.dX = 0;
            }
        }
        if (this.eE[0]) {
            int[] iArr36 = this.blinkFrame;
            iArr36[2] = iArr36[2] + 1;
            this.gm[0] = (this.gm[0] * 2) + 1;
            if (this.gm[0] >= 297) {
                this.gm[0] = 297;
                this.gm[1] = this.gm[1] / 2;
                this.gM = 0;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = getWidth();
                if (this.gm[1] <= 0) {
                    this.eE[0] = false;
                    this.blinkFrame[2] = 0;
                    this.previousScreen = 0;
                }
            } else {
                this.fP = fM[this.blinkFrame[2]];
            }
        } else if (this.eE[1]) {
            int[] iArr37 = this.blinkFrame;
            iArr37[2] = iArr37[2] + 1;
            this.gm[1] = (this.gm[1] * 2) + 1;
            if (this.gm[1] >= 297) {
                this.gm[1] = 297;
                this.gm[0] = this.gm[0] / 2;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = 0;
                if (this.gm[0] <= 0) {
                    this.blinkFrame[2] = 0;
                    screenTransition();
                    this.setScreenType(ScreenType.CAT_BASE);
                    this.screenLoadState = -1;
                    this.eE[1] = false;
                    return false;
                }
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
        } else if (this.eE[2]) {
            this.gameStats1[2] = (this.gameStats1[2] * 2) + 1;
            this.ei[0] = (this.ei[0] * 2) + 1;
            if (this.gameStats1[2] >= getWidth()) {
                this.gameStats1[2] = getWidth();
                this.ei[0] = getHeight();
                this.gameStats1[3] = this.gameStats1[3] / 2;
                if (this.gameStats1[3] >= getWidth()) {
                    this.gameStats1[3] = getWidth();
                }
                int[] iArr38 = this.blinkFrame;
                iArr38[0] = iArr38[0] + 1;
                if (this.blinkFrame[0] >= getLength(cu)) {
                    this.fR[0] = 1;
                    this.dY = 1;
                    this.eE[2] = false;
                    this.blinkFrame[0] = 0;
                }
            }
        }
        if (this.dY == 1) {
            int[] iArr39 = this.blinkFrame;
            iArr39[1] = iArr39[1] + 1;
            if (this.blinkFrame[1] >= 10) {
                int[] iArr40 = this.blinkFrame;
                iArr40[0] = iArr40[0] + 1;
                if (this.blinkFrame[0] >= 60) {
                    this.eb = true;
                    this.ed = 1;
                }
            }
        }
        if (this.eE[13]) {
            int[] iArr41 = this.blinkFrame;
            iArr41[2] = iArr41[2] + 1;
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.fP = 0;
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
            if (this.blinkFrame[2] > getLength(fM)) {
                this.blinkFrame[2] = 0;
                screenTransition();
                int i16 = 0;
                for (int i17 = 0; i17 < getLength(this.currentStageBox); i17++) {
                    this.gT[i17] = this.currentStageBox[i17];
                    i16 = i17 + 1;
                }
                this.gT[i16] = this.gameStats1[0];
                for (int i18 = 0; i18 < getLength(this.boxCounts); i18++) {
                    this.gD[i18] = this.boxCounts[i18];
                }
                this.fP = 0;
                this.setScreenType(ScreenType.ITEM_SHOP);
                this.screenLoadState = -1;
                this.previousScreen = 1;
                return false;
            }
        }
        for (int i19 = 0; i19 < getLength(this.boxSize); i19++) {
            for (int i20 = 0; i20 < getLength(this.boxSize[i19]); i20++) {
                if (i20 == 0) {
                    if (i19 == this.currentStageBox[0]) {
                        this.boxSize[i19][i20] = (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 49) / 100) + 243;
                        if (this.gameStats1[0] > 0) {
                            this.boxSize[i19][i20] = 243 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 49) / 100);
                        }
                    } else if (i19 == this.currentStageBox[0] + 1) {
                        this.boxSize[i19][i20] = 194 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 49) / 100);
                    } else {
                        this.boxSize[i19][i20] = 194;
                    }
                    if (this.boxSize[i19][i20] >= 243) {
                        this.boxSize[i19][i20] = 243;
                    } else if (this.boxSize[i19][i20] <= 194) {
                        this.boxSize[i19][i20] = 194;
                    }
                } else if (i20 == 1) {
                    if (i19 == this.currentStageBox[0]) {
                        this.boxSize[i19][i20] = (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 17) / 100) + 81;
                        if (this.gameStats1[0] > 0) {
                            this.boxSize[i19][i20] = 81 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 17) / 100);
                        }
                    } else if (i19 == this.currentStageBox[0] + 1) {
                        this.boxSize[i19][i20] = 64 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 17) / 100);
                    } else {
                        this.boxSize[i19][i20] = 64;
                    }
                    if (this.boxSize[i19][i20] >= 81) {
                        this.boxSize[i19][i20] = 81;
                    } else if (this.boxSize[i19][i20] <= 64) {
                        this.boxSize[i19][i20] = 64;
                    }
                }
            }
        }
        if (!this.eE[2] && this.dY == 0) {
            this.blinkFrame[0] -= 1;
            if (this.blinkFrame[0] <= 0) {
                this.blinkFrame[0] = 0;
            }
        }
        this.dZ += 2;
        this.ea += 2;
        int[] iArr42 = this.blinkFrame;
        iArr42[3] = iArr42[3] + 1;
        if (this.selectedStage == this.currentStageBox[2] && this.mapCatPosition == 0) {
            this.dU = 0;
            this.mapCatPosition = 0;
            this.dM[0] = ck[cm[this.currentStageBox[2]]][0] - 28;
            this.dN[0] = ck[cm[this.currentStageBox[2]]][1] - 28;
        } else {
            if (this.mapCatPosition == 0) {
                if (this.selectedStage >= this.currentStageBox[2]) {
                    this.dP[0] = cm[this.selectedStage];
                    this.dP[1] = cm[this.selectedStage - 1];
                    this.mapScrollState = 0; // backwards
                } else {
                    this.dP[0] = cm[this.selectedStage];
                    this.dP[1] = cm[this.selectedStage + 1];
                    this.mapScrollState = 1; // forwards
                }
                float atan2 = aMath.atan2(ck[this.dP[1]][1] - ck[this.dP[0]][1], ck[this.dP[1]][0] - ck[this.dP[0]][0]);
                if (atan2 >= 270.0f || (atan2 >= 0.0f && atan2 <= 90.0f)) {
                    this.dT = 0;
                } else {
                    this.dT = 1;
                }
                int i21 = 0;
                while (true) {
                    if (i21 >= 200) {
                        break;
                    }
                    if (i21 % 1 == 0) {
                        this.dU++;
                    }
                    if (this.dU >= 400) {
                        this.dU = 400;
                    }
                    if (isInsideCircle((int) (ck[this.dP[0]][0] + (((this.dU * i21) / 2) * aMath.cos(atan2))), (int) (ck[this.dP[0]][1] + (((this.dU * i21) / 2) * aMath.sin(atan2))), (this.dU / 2) + 1, ck[this.dP[1]][0], ck[this.dP[1]][1], (this.dU / 2) + 1)) {
                        this.dM[i21] = (int) ((ck[this.dP[0]][0] + (((this.dU * i21) / 2) * aMath.cos(atan2))) - 28.0f);
                        this.dN[i21] = (int) ((ck[this.dP[0]][1] + (((this.dU * i21) / 2) * aMath.sin(atan2))) - 28.0f);
                        this.dO[i21] = this.dU;
                        break;
                    }
                    this.dM[i21] = (int) ((ck[this.dP[0]][0] + (((this.dU * i21) / 2) * aMath.cos(atan2))) - 28.0f);
                    this.dN[i21] = (int) ((ck[this.dP[0]][1] + (((this.dU * i21) / 2) * aMath.sin(atan2))) - 28.0f);
                    this.dO[i21] = this.dU;
                    i21++;
                }
            }
            if (isInsideCircle(this.dM[this.mapCatPosition] + 28, this.dN[this.mapCatPosition] + 28, (this.dO[this.mapCatPosition] / 2) + 1, ck[this.dP[1]][0], ck[this.dP[1]][1], (this.dU / 2) + 1)) {
                if (this.mapScrollState == 0) {
                    this.selectedStage--;
                } else {
                    this.selectedStage++;
                }
                this.mapCatPosition = 0;
                this.dM[0] = ck[cm[this.selectedStage]][0] - 28;
                this.dN[0] = ck[cm[this.selectedStage]][1] - 28;
            } else {
                this.mapCatPosition++;
            }
        }
        if (this.eE[0] || this.eE[1] || this.eE[13] || this.gF[0] || this.gF[1] || this.eb || this.eE[9]) {
            if (this.aZ == 0) {
                if (!this.eb) {
                    this.eE[10] = false;
                }
            } else if (this.fx[5] == 0 && !this.eE[1]) {
                this.eE[10] = false;
            }
        } else if ((isPointerDown() || isPointerUp()) && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
            this.eE[10] = true;
        } else if (this.aZ == 0) {
            if (!this.eb) {
                this.eE[10] = false;
            }
        } else if (this.fx[5] == 0 && !this.eE[1]) {
            this.eE[10] = false;
        }
        this.ct--;
        if (this.ct <= 0) {
            this.ct = 0;
        }
        this.gA[0] -= 1;
        if (this.gA[0] <= 0) {
            this.gA[0] = 0;
        }
        return true;
    }

    void x() {
        int i = 0;
        if (!this.gu) {
            this.gu = false;
            for (int i2 = 0; i2 < getLength(this.gv); i2++) {
                this.gv[i2] = 0;
            }
            while (i < getLength(this.textTextures2)) {
                if (this.textTextures2[i].isLoaded()) {
                    this.textTextures2[i].reset();
                }
                i++;
            }
            return;
        }
        int[] iArr = this.gv;
        iArr[0] = iArr[0] + 1;
        int[] iArr2 = this.gv;
        iArr2[2] = iArr2[2] + 1;
        if (this.gv[0] == 1) {
            for (int i3 = 0; i3 < getLength(this.fz); i3++) {
                this.fz[i3] = 0;
            }
            if (this.gw == 9999) {
                aSound.getInstance().play(SoundType.REWARD_GET);
            } else {
                aSound.getInstance().play(SoundType.POPUP);
            }
            for (int i4 = 0; i4 < getLength(this.textTextures2); i4++) {
                if (this.textTextures2[i4].isLoaded()) {
                    this.textTextures2[i4].reset();
                }
            }
            if (this.gw == 0) {
                switch (getSceneType()) {
                    case ENDING:
                        if (this.dE == 5) {
                            for (int i5 = 0; i5 < getLength(this.endingMessageText[0]) && !aString.isEqual(this.endingMessageText[0][i5], "＠"); i5++) {
                                if (!this.textTextures2[i5].isLoaded()) {
                                    this.textTextures2[i5].drawText(this.endingMessageText[0][i5], "FONT_SYSTEM_BOLD", 30, 1);
                                }
                            }
                        } else if (this.dE == 6) {
                            for (int i6 = 0; i6 < getLength(this.endingMessageText[1]) && !aString.isEqual(this.endingMessageText[1][i6], "＠"); i6++) {
                                if (!this.textTextures2[i6].isLoaded()) {
                                    this.textTextures2[i6].drawText(this.endingMessageText[1][i6], "FONT_SYSTEM_BOLD", 30, 1);
                                }
                            }
                        } else if (this.dE != 7 || this.bc[2] != 0) {
                            if (this.gx == 999) {
                                this.textTextures2[0].drawText(this.popupMessageText[0][0], "FONT_SYSTEM_BOLD", 30, 1);
                                this.textTextures2[1].drawText(this.popupMessageText[0][1], "FONT_SYSTEM_BOLD", 30, 1);
                                break;
                            } else if (this.gx == 1000) {
                                this.textTextures2[0].drawText(String.format("%s", this.popupMessageText[1][0]), "FONT_SYSTEM_BOLD", 30, 1);
                                this.textTextures2[1].drawText(String.format("%s%s%s", this.popupMessageText[1][1], this.unitExplanationText[this.battleData[32]][0][0], this.popupMessageText[1][2]), "FONT_SYSTEM_BOLD", 30, 1);
                                this.textTextures2[2].drawText(String.format("%s", this.popupMessageText[1][3]), "FONT_SYSTEM_BOLD", 30, 1);
                                break;
                            }
                        } else {
                            for (int i7 = 0; i7 < getLength(this.challengeModeText); i7++) {
                                this.textTextures2[i7].drawText(this.challengeModeText[i7], "FONT_SYSTEM_BOLD", 30, 1);
                            }
                            break;
                        }
                        break;
                    case MAIN:
                        if (this.getScreenType() == ScreenType.TITLE) {
                            if (!this.textTextures2[0].isLoaded()) {
                                this.textTextures2[0].drawText(this.optionText[2], "FONT_SYSTEM_BOLD", 30, 1);
                                break;
                            }
                        } else if (this.getScreenType() == ScreenType.POWER_UP) {
                            if (this.gx == 0) {
                                for (int i8 = 0; i8 < getLength(this.mainMenuPopupText[1]) && !aString.isEqual(this.mainMenuPopupText[1][i8], "＠"); i8++) {
                                    if (!this.textTextures2[i8].isLoaded()) {
                                        this.textTextures2[i8].drawText(this.mainMenuPopupText[1][i8], "FONT_SYSTEM_BOLD", 30, 1);
                                    }
                                }
                                this.bz[2] = 1;
                                break;
                            } else if (this.gx == 1 && this.bd == 0) {
                                for (int i9 = 0; i9 < getLength(this.mainMenuPopupText[6]) && !aString.isEqual(this.mainMenuPopupText[6][i9], "＠"); i9++) {
                                    if (!this.textTextures2[i9].isLoaded()) {
                                        this.textTextures2[i9].drawText(this.mainMenuPopupText[6][i9], "FONT_SYSTEM_BOLD", 30, 1);
                                    }
                                }
                                this.bd = 1;
                                break;
                            }
                        } else if (this.getScreenType() == ScreenType.EQUIP && !this.textTextures2[0].isLoaded()) {
                            this.textTextures2[0].drawText(this.warning1Text[8], "FONT_SYSTEM_BOLD", 30, 1);
                            break;
                        }
                        break;
                    case BATTLE:
                        if (this.gx == 1) {
                            if (this.bz[1] == 0) {
                                for (int i10 = 0; i10 < getLength(this.mainMenuPopupText[0]) && !aString.isEqual(this.mainMenuPopupText[0][i10], "＠"); i10++) {
                                    if (!this.textTextures2[i10].isLoaded()) {
                                        this.textTextures2[i10].drawText(this.mainMenuPopupText[0][i10], "FONT_SYSTEM_BOLD", 30, 1);
                                    }
                                }
                                this.bz[1] = 1;
                                break;
                            }
                        } else if (this.gx == 2) {
                            if (this.bz[3] == 0) {
                                for (int i11 = 0; i11 < getLength(this.mainMenuPopupText[2]) && !aString.isEqual(this.mainMenuPopupText[2][i11], "＠"); i11++) {
                                    if (!this.textTextures2[i11].isLoaded()) {
                                        this.textTextures2[i11].drawText(this.mainMenuPopupText[2][i11], "FONT_SYSTEM_BOLD", 30, 1);
                                    }
                                }
                                this.bz[3] = 1;
                                break;
                            }
                        } else if (this.gx == 3) {
                            if (this.bz[4] == 0) {
                                for (int i12 = 0; i12 < getLength(this.mainMenuPopupText[3]) && !aString.isEqual(this.mainMenuPopupText[3][i12], "＠"); i12++) {
                                    if (!this.textTextures2[i12].isLoaded()) {
                                        this.textTextures2[i12].drawText(this.mainMenuPopupText[3][i12], "FONT_SYSTEM_BOLD", 30, 1);
                                    }
                                }
                                this.bz[4] = 1;
                                break;
                            }
                        } else if (this.gx == 4) {
                            if (this.be == 0) {
                                for (int i13 = 0; i13 < getLength(this.mainMenuPopupText[4]) && !aString.isEqual(this.mainMenuPopupText[4][i13], "＠"); i13++) {
                                    if (!this.textTextures2[i13].isLoaded()) {
                                        this.textTextures2[i13].drawText(this.mainMenuPopupText[4][i13], "FONT_SYSTEM_BOLD", 30, 1);
                                    }
                                }
                                this.be = 1;
                                break;
                            }
                        } else if (this.gx == 5) {
                            if (this.bf == 0) {
                                for (int i14 = 0; i14 < getLength(this.mainMenuPopupText[5]) && !aString.isEqual(this.mainMenuPopupText[5][i14], "＠"); i14++) {
                                    if (!this.textTextures2[i14].isLoaded()) {
                                        this.textTextures2[i14].drawText(this.mainMenuPopupText[5][i14], "FONT_SYSTEM_BOLD", 30, 1);
                                    }
                                }
                                this.bf = 1;
                                break;
                            }
                        } else if (this.gx == 6) {
                            if (this.bd == 0) {
                                for (int i15 = 0; i15 < getLength(this.mainMenuPopupText[6]) && !aString.isEqual(this.mainMenuPopupText[6][i15], "＠"); i15++) {
                                    if (!this.textTextures2[i15].isLoaded()) {
                                        this.textTextures2[i15].drawText(this.mainMenuPopupText[6][i15], "FONT_SYSTEM_BOLD", 30, 1);
                                    }
                                }
                                this.bd = 1;
                                break;
                            }
                        } else if (this.gx == 10) {
                            this.textTextures2[0].drawText(this.unitExplanationText[0][0][0], "FONT_SYSTEM_BOLD", 30, 1);
                            break;
                        } else if (this.gx == 11) {
                            for (int i16 = 0; i16 < getLength(this.mainMenuPopupText[7]); i16++) {
                                if (!this.textTextures2[i16].isLoaded()) {
                                    if (aString.isEqual(this.mainMenuPopupText[7][i16], "＠")) {
                                        break;
                                    } else {
                                        this.textTextures2[i16].drawText(this.mainMenuPopupText[7][i16], "FONT_SYSTEM_BOLD", 30, 1);
                                    }
                                }
                            }
                            break;
                        } else if (this.gx == 999) {
                            this.textTextures2[0].drawText(this.popupMessageText[0][0], "FONT_SYSTEM_BOLD", 30, 1);
                            this.textTextures2[1].drawText(this.popupMessageText[0][1], "FONT_SYSTEM_BOLD", 30, 1);
                            break;
                        }
                        break;
                }
            } else if (this.gw == 1 || this.gw == 99) {
                this.fA[0][0] = (this.excessWidth / 2) + 251;
                this.fA[0][1] = 374;
                this.fA[0][2] = 168;
                this.fA[0][3] = 88;
                this.fA[1][0] = (this.excessWidth / 2) + 541;
                this.fA[1][1] = 374;
                this.fA[1][2] = 168;
                this.fA[1][3] = 88;
                char c = this.gw == 1 ? (char) 0 : this.gw == 99 ? '\r' : (char) 0;
                for (int i17 = 0; i17 < getLength(this.warning2Text[c]); i17++) {
                    if (!this.textTextures2[i17].isLoaded()) {
                        this.textTextures2[i17].drawText(this.warning2Text[c][i17], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.gw == 2) {
                this.fA[0][0] = (this.excessWidth / 2) + 251;
                this.fA[0][1] = 374;
                this.fA[0][2] = 168;
                this.fA[0][3] = 88;
                this.fA[1][0] = (this.excessWidth / 2) + 541;
                this.fA[1][1] = 374;
                this.fA[1][2] = 168;
                this.fA[1][3] = 88;
                for (int i18 = 0; i18 < getLength(this.warning2Text[3]); i18++) {
                    if (!this.textTextures2[i18].isLoaded()) {
                        this.textTextures2[i18].drawText(this.warning2Text[3][i18], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.gw == 3 || this.gw == 4) {
                this.fA[0][0] = (this.excessWidth / 2) + 251;
                this.fA[0][1] = 374;
                this.fA[0][2] = 168;
                this.fA[0][3] = 88;
                this.fA[1][0] = (this.excessWidth / 2) + 541;
                this.fA[1][1] = 374;
                this.fA[1][2] = 168;
                this.fA[1][3] = 88;
                if (this.gw == 3) {
                    for (int i19 = 0; i19 < getLength(this.warning2Text[4]); i19++) {
                        if (!this.textTextures2[i19].isLoaded()) {
                            this.textTextures2[i19].drawText(this.warning2Text[4][i19], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                    int i20 = 0;
                    for (int i21 = 0; i21 < 10; i21++) {
                        i20 += (cB[10] * this.bO[i21][10]) / 100;
                    }
                    int i22 = ((ad[10] + (this.bx[10] * 10)) + i20) - this.currentEnergy;
                    if (this.regionState == 0) {
                        this.textTextures2[getLength(this.warning2Text[4]) + 1].drawText(String.format("%s%s%d%s%d%s%d%s%s", this.warning1Text[9], this.warning1Text[10], this.currentEnergy, this.warning1Text[11], i20 + ad[10] + (this.bx[10] * 10), this.warning1Text[12], i22, this.warning1Text[13], this.warning1Text[14]), "FONT_SYSTEM_BOLD", 30, 1);
                    } else if (this.regionState == 1) {
                        this.textTextures2[getLength(this.warning2Text[4]) + 1].drawText(String.format("%s%d%s", this.warning1Text[12], i22, this.warning1Text[13]), "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else if (this.gw == 4) {
                    for (int i23 = 0; i23 < getLength(this.warning2Text[5]); i23++) {
                        if (!this.textTextures2[i23].isLoaded()) {
                            this.textTextures2[i23].drawText(this.warning2Text[5][i23], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                    int i24 = 0;
                    for (int i25 = 0; i25 < 10; i25++) {
                        i24 += (cB[10] * this.bO[i25][10]) / 100;
                    }
                    int i26 = ((ad[10] + (this.bx[10] * 10)) + i24) - this.currentEnergy;
                    if (this.regionState == 0) {
                        this.textTextures2[getLength(this.warning2Text[5]) + 1].drawText(String.format("%s%s%d%s%d%s%d%s%s", this.warning1Text[9], this.warning1Text[10], this.currentEnergy, this.warning1Text[11], i24 + ad[10] + (this.bx[10] * 10), this.warning1Text[12], i26, this.warning1Text[13], this.warning1Text[14]), "FONT_SYSTEM_BOLD", 30, 1);
                    } else if (this.regionState == 1) {
                        this.textTextures2[getLength(this.warning2Text[5]) + 1].drawText(String.format("%s%d%s", this.warning1Text[12], i26, this.warning1Text[13]), "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.gw == 5 || this.gw == 6 || this.gw == 8 || this.gw == 9 || this.gw == 10) {
                if (this.gw == 5) {
                    for (int i27 = 0; i27 < getLength(this.warning2Text[6]); i27++) {
                        if (!this.textTextures2[i27].isLoaded()) {
                            this.textTextures2[i27].drawText(this.warning2Text[6][i27], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                } else if (this.gw == 6) {
                    for (int i28 = 0; i28 < getLength(this.warning2Text[7]); i28++) {
                        if (!this.textTextures2[i28].isLoaded()) {
                            this.textTextures2[i28].drawText(this.warning2Text[7][i28], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                    int i29 = 0;
                    for (int i30 = 0; i30 < 10; i30++) {
                        i29 += (cB[10] * this.bO[i30][10]) / 100;
                    }
                    int i31 = ((ad[10] + (this.bx[10] * 10)) + i29) - this.currentEnergy;
                    if (this.regionState == 0) {
                        this.textTextures2[getLength(this.warning2Text[7]) + 1].drawText(String.format("%s%s%d%s%d%s%d%s%s", this.warning1Text[9], this.warning1Text[10], this.currentEnergy, this.warning1Text[11], i29 + ad[10] + (this.bx[10] * 10), this.warning1Text[12], i31, this.warning1Text[13], this.warning1Text[14]), "FONT_SYSTEM_BOLD", 30, 1);
                    } else if (this.regionState == 1) {
                        this.textTextures2[getLength(this.warning2Text[7]) + 1].drawText(String.format("%s%d%s", this.warning1Text[12], i31, this.warning1Text[13]), "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else if (this.gw == 8) {
                    for (int i32 = 0; i32 < getLength(this.warning2Text[9]); i32++) {
                        if (!this.textTextures2[i32].isLoaded()) {
                            this.textTextures2[i32].drawText(this.warning2Text[9][i32], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                } else if (this.gw == 9) {
                    for (int i33 = 0; i33 < getLength(this.warning2Text[10]); i33++) {
                        if (!this.textTextures2[i33].isLoaded()) {
                            this.textTextures2[i33].drawText(this.warning2Text[10][i33], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                } else if (this.gw == 10) {
                    for (int i34 = 0; i34 < getLength(this.warning2Text[11]); i34++) {
                        if (!this.textTextures2[i34].isLoaded()) {
                            this.textTextures2[i34].drawText(this.warning2Text[11][i34], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                }
            } else if (this.gw == 7) {
                this.fA[0][0] = (this.excessWidth / 2) + 251;
                this.fA[0][1] = 374;
                this.fA[0][2] = 168;
                this.fA[0][3] = 88;
                this.fA[1][0] = (this.excessWidth / 2) + 541;
                this.fA[1][1] = 374;
                this.fA[1][2] = 168;
                this.fA[1][3] = 88;
                for (int i35 = 0; i35 < getLength(this.warning2Text[7]); i35++) {
                    if (!this.textTextures2[i35].isLoaded()) {
                        this.textTextures2[i35].drawText(this.warning2Text[8][i35], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.gw == 9999) {
                this.fA[0][0] = (this.excessWidth / 2) + 615;
                this.fA[0][1] = 453;
                this.fA[0][2] = 168;
                this.fA[0][3] = 88;
                this.textTextures2[0].drawText(String.format("%s%d%s", this.stampMessageText[5], this.bl + 1, this.stampMessageText[6]), "FONT_SYSTEM_BOLD", 30, 1);
                int i36 = (this.bl != 29 || this.bn == 0) ? 0 : 1;
                if (this.stampStats[this.bl + i36][0] == 0 || this.stampStats[this.bl + i36][0] == 6) {
                    this.textTextures2[1].drawText(String.format("%s%s%s%d%s%s", this.stampMessageText[7], this.stampMessageText[13], this.stampMessageText[9], this.stampStats[i36 + this.bl][1], this.stampMessageText[8], this.stampMessageText[10]), "FONT_SYSTEM_BOLD", 30, 1);
                } else if (this.stampStats[this.bl + i36][0] == 1) {
                    this.textTextures2[1].drawText(String.format("%s%s%s%d%s%s", this.stampMessageText[7], this.stampMessageText[14], this.stampMessageText[9], this.stampStats[i36 + this.bl][1], this.stampMessageText[8], this.stampMessageText[10]), "FONT_SYSTEM_BOLD", 30, 1);
                } else if (this.stampStats[this.bl + i36][0] >= 2 && this.stampStats[this.bl + i36][0] <= 6) {
                    char c2 = this.stampStats[this.bl + i36][0] == 2 ? (char) 0 : this.stampStats[this.bl + i36][0] == 3 ? (char) 3 : this.stampStats[this.bl + i36][0] == 4 ? (char) 4 : this.stampStats[this.bl + i36][0] == 5 ? (char) 1 : (char) 0;
                    if (this.regionState == 0) {
                        this.textTextures2[1].drawText(String.format("%s%s%s%d%s%s", this.stampMessageText[7], this.itemNameText[c2], this.stampMessageText[9], this.stampStats[i36 + this.bl][1], this.stampMessageText[8], this.stampMessageText[10]), "FONT_SYSTEM_BOLD", 30, 1);
                    } else if (this.regionState == 1) {
                        this.textTextures2[1].drawText(String.format("%s%s%s%d%s%s", this.stampMessageText[7], this.itemNameText[c2], this.stampMessageText[19], this.stampStats[i36 + this.bl][1], this.stampMessageText[8], this.stampMessageText[10]), "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else if (this.stampStats[i36 + this.bl][0] == 7 && this.bn == 0) {
                    this.textTextures2[1].drawText(String.format("%s%s%s%s%s", this.stampMessageText[11], this.stampMessageText[7], this.unitExplanationText[17][0][0], this.stampMessageText[8], this.stampMessageText[15]), "FONT_SYSTEM_BOLD", 30, 1);
                    this.textTextures2[2].drawText(String.format("%s", this.stampMessageText[12]), "FONT_SYSTEM_BOLD", 30, 1);
                }
            } else if (this.gw == 10000) {
                for (int i37 = 0; i37 < getLength(this.warning2Text[14]); i37++) {
                    if (!this.textTextures2[i37].isLoaded()) {
                        this.textTextures2[i37].drawText(this.warning2Text[14][i37], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            }
        }
        if (this.gv[0] > getLength(eO) - 1) {
            this.gv[0] = getLength(eO) - 1;
            int[] iArr3 = this.gv;
            iArr3[1] = iArr3[1] + 1;
        }
        if (this.gw == 0) {
            if (this.gv[1] >= 30) {
                this.gv[1] = 30;
                if (isPointerUp()) {
                    switch (getSceneType()) {
                        case ENDING:
                            if (this.dE == 5) {
                                this.dE = 6;
                                break;
                            } else if (this.dE == 6) {
                                this.dE = 7;
                                break;
                            } else if (this.dE == 7 && this.bc[2] == 0) {
                                this.bc[2] = 1;
                                break;
                            }
                            break;
                        case BATTLE:
                            boolean z = this.ha[0];
                            break;
                    }
                    if (this.gx == 1000) {
                        this.battleData[32] = -1;
                    }
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    for (int i38 = 0; i38 < getLength(this.gv); i38++) {
                        this.gv[i38] = 0;
                    }
                    for (int i39 = 0; i39 < getLength(this.textTextures2); i39++) {
                        if (this.textTextures2[i39].isLoaded()) {
                            this.textTextures2[i39].reset();
                        }
                    }
                    this.gu = false;
                }
            }
        } else if (this.gw == 1 || this.gw == 99) {
            if (this.gv[1] >= 1) {
                if (this.fz[0] >= 1) {
                    int[] iArr4 = this.fz;
                    iArr4[0] = iArr4[0] + 1;
                    if (this.fz[0] > getLength(dv) - 1) {
                        this.fz[0] = 0;
                        if (this.gw == 1) {
                            screenTransition();
                            this.gu = false;
                            this.menuType = 0;
                            this.j = true;
                        } else if (this.gw == 99 && this.be >= 1) {
                            this.eE[13] = true;
                            this.gA[0] = 0;
                            this.gR = 1;
                            this.gu = false;
                        }
                    }
                } else if (this.fz[1] >= 1) {
                    int[] iArr5 = this.fz;
                    iArr5[1] = iArr5[1] + 1;
                    if (this.fz[1] > getLength(dv) - 1) {
                        this.fz[1] = 0;
                        this.gu = false;
                    }
                } else if (this.fx[14] >= 1) {
                    int[] iArr6 = this.fx;
                    iArr6[14] = iArr6[14] + 1;
                    if (this.fx[14] > getLength(dv) - 1) {
                        this.fx[14] = 0;
                        if (this.bB[8] == 0) {
                            screenTransition();
                            this.bB[8] = 1;
                            this.gU = true;
                            for (int i40 = 0; i40 < getLength(this.gV); i40++) {
                                this.gV[i40] = 0;
                            }
                            aSound.getInstance().setVolume(50);
                        } else if (this.catfood >= 900000) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 10000;
                        } else {
                            screenTransition();
                            this.menuType = 0;
                            this.j = true;
                        }
                    }
                } else if (this.fx[15] >= 1) {
                    int[] iArr7 = this.fx;
                    iArr7[15] = iArr7[15] + 1;
                    if (this.fx[15] > getLength(dv) - 1) {
                        this.fx[15] = 0;
                        if (this.be >= 1) {
                            this.eE[13] = true;
                            this.gA[0] = 0;
                            this.gR = 1;
                        }
                        this.gu = false;
                    }
                } else {
                    if (!isPointerDown() || !isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3])) {
                        this.gs[0] = false;
                    } else if (!this.gs[0]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gs[0] = true;
                    }
                    if (!isPointerDown() || !isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3])) {
                        this.gs[1] = false;
                    } else if (!this.gs[1]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gs[1] = true;
                    }
                    if (this.gw == 1) {
                        if (!isPointerDown() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) || this.bf < 1) {
                            this.gp[14] = false;
                        } else if (!this.gp[14]) {
                            this.gp[14] = true;
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        }
                    }
                    if (isPointerUp() && isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3])) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr8 = this.fz;
                        iArr8[0] = iArr8[0] + 1;
                    } else if (isPointerUp() && isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3])) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr9 = this.fz;
                        iArr9[1] = iArr9[1] + 1;
                    } else if (isPointerUp() && isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3])) {
                        if (this.gw != 1 || this.bf < 1) {
                            return;
                        }
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr10 = this.fx;
                        iArr10[14] = iArr10[14] + 1;
                    } else if (!isPointerUp() || !isTouching(this.buttonCoordinates1[15][0], this.buttonCoordinates1[15][1], this.buttonCoordinates1[15][2], this.buttonCoordinates1[15][3]) || this.dV) {
                        if (isBackPressed()) {
                            this.fz[1] = 0;
                            this.gu = false;
                        }
                    } else if (this.gw == 99 && this.be >= 1) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr11 = this.fx;
                        iArr11[15] = iArr11[15] + 1;
                        this.gA[0] = 0;
                        this.gR = 1;
                    }
                }
            }
        } else if (this.gw == 2) {
            if (this.gv[1] >= 1) {
                if (this.fz[0] < 1) {
                    if (this.fz[1] >= 1) {
                        int[] iArr12 = this.fz;
                        iArr12[1] = iArr12[1] + 1;
                        if (this.fz[1] > getLength(dv) - 1) {
                            this.fz[1] = 0;
                            this.gu = false;
                            return;
                        }
                        return;
                    } else if (this.fx[14] >= 1) {
                        int[] iArr13 = this.fx;
                        iArr13[14] = iArr13[14] + 1;
                        if (this.fx[14] > getLength(dv) - 1) {
                            this.fx[14] = 0;
                            if (this.bB[8] == 0) {
                                screenTransition();
                                this.bB[8] = 1;
                                this.gU = true;
                                for (int i41 = 0; i41 < getLength(this.gV); i41++) {
                                    this.gV[i41] = 0;
                                }
                                aSound.getInstance().setVolume(50);
                                return;
                            } else if (this.catfood >= 900000) {
                                screenTransition();
                                this.gu = true;
                                this.gw = 10000;
                                return;
                            } else {
                                screenTransition();
                                this.menuType = 0;
                                this.j = true;
                                return;
                            }
                        }
                        return;
                    } else {
                        if (!isPointerDown() || !isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3])) {
                            this.gs[0] = false;
                        } else if (!this.gs[0]) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gs[0] = true;
                        }
                        if (!isPointerDown() || !isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3])) {
                            this.gs[1] = false;
                        } else if (!this.gs[1]) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gs[1] = true;
                        }
                        if (isPointerUp() && isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3])) {
                            aSound.getInstance().play(SoundType.UPGRADE);
                            int[] iArr14 = this.fz;
                            iArr14[0] = iArr14[0] + 1;
                            return;
                        } else if (isPointerUp() && isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3])) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr15 = this.fz;
                            iArr15[1] = iArr15[1] + 1;
                            return;
                        } else if (!isPointerUp() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3])) {
                            if (isBackPressed()) {
                                this.fz[1] = 0;
                                this.gu = false;
                                return;
                            }
                            return;
                        } else if (this.bf >= 1) {
                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                            int[] iArr16 = this.fx;
                            iArr16[14] = iArr16[14] + 1;
                            return;
                        } else {
                            return;
                        }
                    }
                }
                int[] iArr17 = this.fz;
                iArr17[0] = iArr17[0] + 1;
                if (this.fz[0] > getLength(dv) - 1) {
                    this.fz[0] = 0;
                    switch (getSceneType()) {
                        case MAIN:
                            if (this.getScreenType() != ScreenType.TITLE && this.getScreenType() != ScreenType.CAT_BASE && this.getScreenType() != ScreenType.MAP) {
                                if (this.getScreenType() == ScreenType.POWER_UP) {
                                    this.catfood -= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1];
                                    if (this.bh == 0) {
                                        screenTransition();
                                        this.gw = 1;
                                        for (int i42 = 0; i42 < getLength(this.gv); i42++) {
                                            this.gv[i42] = 0;
                                        }
                                        for (int i43 = 0; i43 < getLength(this.textTextures2); i43++) {
                                            if (this.textTextures2[i43].isLoaded()) {
                                                this.textTextures2[i43].reset();
                                            }
                                        }
                                        this.gu = true;
                                        this.gw = 0;
                                        this.bh = 1;
                                        this.bu[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] = 1;
                                        this.gx = 0;
                                        aSave();
                                        for (int i44 = 0; i44 < getLength(this.gG); i44++) {
                                            this.gG[i44] = 0;
                                        }
                                        this.gG[this.currentBox[2]] = 1;
                                        this.blinkFrame[5] = 255;
                                        return;
                                    }
                                    this.bu[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] = 1;
                                    aSave();
                                    for (int i45 = 0; i45 < getLength(this.gG); i45++) {
                                        this.gG[i45] = 0;
                                    }
                                    this.gG[this.currentBox[2]] = 1;
                                    this.blinkFrame[5] = 255;
                                    break;
                                } else if (
                                        this.getScreenType() != ScreenType.EQUIP
                                        && this.getScreenType() != ScreenType.TREASURE
                                        && this.getScreenType() != ScreenType.ENEMY_GUIDE
                                        && this.getScreenType() != ScreenType.MAP2
                                        && this.getScreenType() == ScreenType.ITEM_SHOP
                                ) {
                                    if (Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]]) <= 0) {
                                        this.catfood -= 500;
                                        if (this.gP[2] < this.gB[0]) {
                                            int[] iArr18 = this.bA;
                                            int i46 = this.gP[2];
                                            iArr18[i46] = iArr18[i46] + aa[this.gP[2]] + (aa[this.gP[2]] * this.gS[this.gP[2]]);
                                        } else {
                                            this.aY += aa[this.gP[2]] + (aa[this.gP[2]] * this.gS[this.gP[2]]);
                                            if (this.aY > 99999999) {
                                                this.aY = 99999999;
                                            }
                                        }
                                        if (this.gP[2] < getLength(this.hD)) {
                                            int[] iArr19 = this.hD;
                                            int i47 = this.gP[2];
                                            iArr19[i47] = iArr19[i47] + 1;
                                            if (this.hD[this.gP[2]] >= 999999999) {
                                                this.hD[this.gP[2]] = 999999999;
                                            }
                                        }
                                        aSave();
                                        for (int i48 = 0; i48 < getLength(this.gG); i48++) {
                                            this.gG[i48] = 0;
                                        }
                                        this.gG[this.gP[2]] = 1;
                                        this.blinkFrame[5] = 255;
                                        break;
                                    } else if (this.catfood >= Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]])) {
                                        this.catfood -= Z[this.gP[2]] + (Z[this.gP[2]] * this.gS[this.gP[2]]);
                                        if (this.gP[2] < this.gB[0]) {
                                            int[] iArr20 = this.bA;
                                            int i49 = this.gP[2];
                                            iArr20[i49] = iArr20[i49] + aa[this.gP[2]] + (aa[this.gP[2]] * this.gS[this.gP[2]]);
                                        } else {
                                            this.aY += aa[this.gP[2]] + (aa[this.gP[2]] * this.gS[this.gP[2]]);
                                            if (this.aY > 99999999) {
                                                this.aY = 99999999;
                                            }
                                        }
                                        if (this.gP[2] < getLength(this.hD)) {
                                            int[] iArr21 = this.hD;
                                            int i50 = this.gP[2];
                                            iArr21[i50] = iArr21[i50] + 1;
                                            if (this.hD[this.gP[2]] >= 999999999) {
                                                this.hD[this.gP[2]] = 999999999;
                                            }
                                        }
                                        aSave();
                                        for (int i51 = 0; i51 < getLength(this.gG); i51++) {
                                            this.gG[i51] = 0;
                                        }
                                        this.gG[this.gP[2]] = 1;
                                        this.blinkFrame[5] = 255;
                                        break;
                                    }
                                }
                            }
                            break;
                    }
                    this.gu = false;
                }
            }
        } else if (this.gw == 3 || this.gw == 4) {
            if (this.gv[1] >= 1) {
                if (this.fz[0] >= 1) {
                    int[] iArr22 = this.fz;
                    iArr22[0] = iArr22[0] + 1;
                    if (this.fz[0] > getLength(dv) - 1) {
                        this.fz[0] = 0;
                        switch (getSceneType()) {
                            case MAIN:
                                if (this.getScreenType() == ScreenType.MAP) {
                                    if (this.catfood < 30) {
                                        screenTransition();
                                        this.gw = 1;
                                        for (int i52 = 0; i52 < getLength(this.gv); i52++) {
                                            this.gv[i52] = 0;
                                        }
                                        while (i < getLength(this.textTextures2)) {
                                            if (this.textTextures2[i].isLoaded()) {
                                                this.textTextures2[i].reset();
                                            }
                                            i++;
                                        }
                                        return;
                                    }
                                    this.catfood -= 30;
                                    int i53 = 0;
                                    for (int i54 = 0; i54 < 10; i54++) {
                                        i53 += (cB[10] * this.bO[i54][10]) / 100;
                                    }
                                    this.currentEnergy = i53 + ad[10] + (this.bx[10] * 10);
                                    this.hG++;
                                    if (this.hG >= 999999999) {
                                        this.hG = 999999999;
                                    }
                                    aSave();
                                    break;
                                }
                                break;
                        }
                        this.gu = false;
                    }
                } else if (this.fz[1] >= 1) {
                    int[] iArr23 = this.fz;
                    iArr23[1] = iArr23[1] + 1;
                    if (this.fz[1] > getLength(dv) - 1) {
                        this.fz[1] = 0;
                        this.gu = false;
                    }
                } else if (this.fx[14] >= 1) {
                    int[] iArr24 = this.fx;
                    iArr24[14] = iArr24[14] + 1;
                    if (this.fx[14] > getLength(dv) - 1) {
                        this.fx[14] = 0;
                        if (this.bB[8] == 0) {
                            screenTransition();
                            this.bB[8] = 1;
                            this.gU = true;
                            for (int i55 = 0; i55 < getLength(this.gV); i55++) {
                                this.gV[i55] = 0;
                            }
                            aSound.getInstance().setVolume(50);
                        } else if (this.catfood >= 900000) {
                            screenTransition();
                            this.gu = true;
                            this.gw = 10000;
                        } else {
                            screenTransition();
                            this.menuType = 0;
                            this.j = true;
                        }
                    }
                } else {
                    if (!isPointerDown() || !isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3])) {
                        this.gs[0] = false;
                    } else if (!this.gs[0]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gs[0] = true;
                    }
                    if (!isPointerDown() || !isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3])) {
                        this.gs[1] = false;
                    } else if (!this.gs[1]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gs[1] = true;
                    }
                    if (isPointerUp() && isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3])) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr25 = this.fz;
                        iArr25[0] = iArr25[0] + 1;
                    } else if (isPointerUp() && isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3])) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr26 = this.fz;
                        iArr26[1] = iArr26[1] + 1;
                    } else if (!isPointerUp() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3])) {
                        if (isBackPressed()) {
                            this.fz[1] = 0;
                            this.gu = false;
                        }
                    } else if (this.bf >= 1) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr27 = this.fx;
                        iArr27[14] = iArr27[14] + 1;
                    }
                }
            }
        } else if (this.gw == 5 || this.gw == 6 || this.gw == 8 || this.gw == 9 || this.gw == 10) {
            if (this.gv[1] >= 30) {
                this.gv[1] = 30;
                if (isPointerUp()) {
                    this.gu = false;
                    if (this.gw == 8) {
                        screenTransition();
                        this.gw = 9;
                        this.gu = true;
                        for (int i56 = 0; i56 < getLength(this.gv); i56++) {
                            this.gv[i56] = 0;
                        }
                        while (i < getLength(this.textTextures2)) {
                            if (this.textTextures2[i].isLoaded()) {
                                this.textTextures2[i].reset();
                            }
                            i++;
                        }
                    }
                }
            }
        } else if (this.gw == 7) {
            if (this.gv[1] >= 1) {
                if (this.fz[0] >= 1) {
                    int[] iArr28 = this.fz;
                    iArr28[0] = iArr28[0] + 1;
                    if (this.fz[0] > getLength(dv) - 1) {
                        this.fz[0] = 0;
                        this.gu = false;
                        this.eb = true;
                        this.ed = 0;
                        this.fE = 5;
                    }
                } else if (this.fz[1] >= 1) {
                    int[] iArr29 = this.fz;
                    iArr29[1] = iArr29[1] + 1;
                    if (this.fz[1] > getLength(dv) - 1) {
                        this.fz[1] = 0;
                        this.gu = false;
                    }
                } else {
                    if (!isPointerDown() || !isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3])) {
                        this.gs[0] = false;
                    } else if (!this.gs[0]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gs[0] = true;
                    }
                    if (!isPointerDown() || !isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3])) {
                        this.gs[1] = false;
                    } else if (!this.gs[1]) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gs[1] = true;
                    }
                    if (isPointerUp() && isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3])) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr30 = this.fz;
                        iArr30[0] = iArr30[0] + 1;
                    } else if (isPointerUp() && isTouching(this.fA[1][0], this.fA[1][1], this.fA[1][2], this.fA[1][3])) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr31 = this.fz;
                        iArr31[1] = iArr31[1] + 1;
                    } else if (isBackPressed()) {
                        this.fz[1] = 0;
                        this.gu = false;
                    }
                }
            }
        } else if (this.gw != 9999) {
            if (this.gw != 10000 || this.gv[1] < 30) {
                return;
            }
            this.gv[1] = 30;
            if (isPointerUp()) {
                this.gu = false;
                if (this.gw == 8) {
                    screenTransition();
                    this.gw = 9;
                    this.gu = true;
                    for (int i57 = 0; i57 < getLength(this.gv); i57++) {
                        this.gv[i57] = 0;
                    }
                    while (i < getLength(this.textTextures2)) {
                        if (this.textTextures2[i].isLoaded()) {
                            this.textTextures2[i].reset();
                        }
                        i++;
                    }
                }
            }
        } else if (this.gv[1] >= 1) {
            if (this.fz[0] < 1) {
                if (!isPointerDown() || !isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3])) {
                    this.gs[0] = false;
                } else if (!this.gs[0]) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    this.gs[0] = true;
                }
                if (isPointerUp() && isTouching(this.fA[0][0], this.fA[0][1], this.fA[0][2], this.fA[0][3])) {
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    int[] iArr32 = this.fz;
                    iArr32[0] = iArr32[0] + 1;
                    return;
                }
                return;
            }
            int[] iArr33 = this.fz;
            iArr33[0] = iArr33[0] + 1;
            if (this.fz[0] > getLength(dv) - 1) {
                this.fz[0] = 0;
                this.gu = false;
                int i58 = (this.bl != 29 || this.bn == 0) ? 0 : 1;
                if (this.stampStats[this.bl + i58][0] == 0 || this.stampStats[this.bl + i58][0] == 6) {
                    this.aY = this.stampStats[i58 + this.bl][1] + this.aY;
                    if (this.aY >= 99999999) {
                        this.aY = 99999999;
                    }
                } else if (this.stampStats[this.bl + i58][0] == 1) {
                    this.catfood = this.stampStats[i58 + this.bl][1] + this.catfood;
                    if (this.catfood >= 999999) {
                        this.catfood = 999999;
                    }
                } else if (this.stampStats[this.bl + i58][0] >= 2 && this.stampStats[this.bl + i58][0] <= 5) {
                    if (this.stampStats[this.bl + i58][0] != 2) {
                        if (this.stampStats[this.bl + i58][0] == 3) {
                            i = 3;
                        } else if (this.stampStats[this.bl + i58][0] == 4) {
                            i = 4;
                        } else if (this.stampStats[this.bl + i58][0] == 5) {
                            i = 1;
                        }
                    }
                    int[] iArr34 = this.bA;
                    iArr34[i] = this.stampStats[i58 + this.bl][1] + iArr34[i];
                    if (this.bA[i] >= 9999) {
                        this.bA[i] = 9999;
                    }
                } else if (this.stampStats[i58 + this.bl][0] == 7) {
                    this.bn = 1;
                    this.by[1] = 1;
                    this.bC[this.unitBuyStats[17][13]] = 0;
                    this.bE[0] = 1;
                }
                this.bl++;
            }
        }
    }

    void powerUpLoad() {
        int i;
        this.ct = 0;
        for (int i2 = 0; i2 < getLength(this.gp); i2++) {
            this.gp[i2] = false;
        }
        for (int i3 = 0; i3 < 10; i3++) {
            if (this.slotCatIDs[i3] - 2 <= -1) {
                this.slotFormIDs[i3] = 0;
            } else {
                this.slotFormIDs[i3] = this.bw[this.slotCatIDs[i3] - 2];
            }
        }
        this.gp[3] = true;
        //aAd.b().f();
        for (int i4 = 0; i4 < getLength(this.buttonCoordinates1); i4++) {
            for (int i5 = 0; i5 < getLength(this.buttonCoordinates1[i4]); i5++) {
                this.buttonCoordinates1[i4][i5] = 0;
            }
        }
        for (int i6 = 0; i6 < getLength(this.gG); i6++) {
            this.gG[i6] = 0;
        }
        for (int i7 = 0; i7 < getLength(this.gA); i7++) {
            this.gA[i7] = 0;
        }
        this.buttonCoordinates1[0][0] = 4;
        this.buttonCoordinates1[0][1] = 365;
        this.buttonCoordinates1[0][2] = 383;
        this.buttonCoordinates1[0][3] = 89;
        this.buttonCoordinates1[1][0] = (((getWidth() / 2) - 164) + 285) - 10;
        this.buttonCoordinates1[1][1] = 294;
        this.buttonCoordinates1[1][2] = 89;
        this.buttonCoordinates1[1][3] = 89;
        this.buttonCoordinates1[5][0] = 4;
        this.buttonCoordinates1[5][1] = 541;
        this.buttonCoordinates1[5][2] = 95;
        this.buttonCoordinates1[5][3] = 95;
        this.buttonCoordinates1[13][0] = this.excessWidth + 344;
        this.buttonCoordinates1[13][1] = 560;
        this.buttonCoordinates1[13][2] = 247;
        this.buttonCoordinates1[13][3] = 88;
        this.buttonCoordinates1[14][0] = this.excessWidth + 680;
        this.buttonCoordinates1[14][1] = 552;
        this.buttonCoordinates1[14][2] = 88;
        this.buttonCoordinates1[14][3] = 88;
        this.buttonCoordinates1[15][0] = this.excessWidth + 626;
        this.buttonCoordinates1[15][1] = 0;
        this.buttonCoordinates1[15][2] = 88;
        this.buttonCoordinates1[15][3] = 88;
        this.bC[0] = 1;
        for (int i8 = 0; i8 < getLength(this.boxCatIDs); i8++) {
            this.boxCatIDs[i8] = -1;
        }
        if (this.gF[0]) {
            this.gF[1] = true;
            if (this.currentBox[2] + this.currentBox[5] <= -1) {
                this.currentBox[3] = this.gE[(-(this.currentBox[2] + this.currentBox[5])) - 1];
                this.bC[this.gE[(-(this.currentBox[2] + this.currentBox[5])) - 1]] = 1;
            } else if ((this.currentBox[2] + this.currentBox[5]) - (this.boxCounts[1] + 1) >= 0) {
                this.currentBox[3] = this.gE[((this.currentBox[2] + this.currentBox[5]) - this.boxCounts[1]) - 1];
                this.bC[this.gE[((this.currentBox[2] + this.currentBox[5]) - this.boxCounts[1]) - 1]] = 1;
            }
            this.currentBox[5] = 0;
            this.eE[11] = false;
        } else {
            for (int i9 = 0; i9 < getLength(this.gm); i9++) {
                this.gm[i9] = 0;
            }
            this.gm[1] = 297;
            this.fR[0] = 0;
            for (int i10 = 0; i10 < getLength(this.blinkFrame); i10++) {
                this.blinkFrame[i10] = 0;
            }
            if (this.previousScreen == 0) {
                this.blinkFrame[0] = getLength(cu) - 1;
            }
            for (int i11 = 0; i11 < getLength(this.eE); i11++) {
                this.eE[i11] = false;
            }
            this.eE[0] = true;
            for (int i12 = 0; i12 < getLength(this.currentBox); i12++) {
                this.currentBox[i12] = 0;
            }
        }
        for (int i13 = 0; i13 < getLength(this.textTextures); i13++) {
            if (this.textTextures[i13].isLoaded()) {
                this.textTextures[i13].reset();
            }
        }
        for (int i14 = 0; i14 < getLength(this.gameStats1); i14++) {
            this.gameStats1[i14] = 0;
        }
        for (int i15 = 0; i15 < getLength(this.ei); i15++) {
            this.ei[i15] = 0;
        }
        for (int i16 = 0; i16 < getLength(this.bL); i16++) {
            this.bL[i16] = 0;
        }
        for (int i17 = 0; i17 < 26; i17++) {
            if (this.bq[this.unitBuyStats[i17][15]] >= this.unitBuyStats[i17][0]) {
                this.bL[i17] = this.unitBuyStats[i17][13];
            }
        }
        boolean z = true;
        for (int i18 = 0; i18 < 26; i18++) {
            if (this.bL[i18] != 0) {
                z = false;
            }
        }
        if (z) {
            this.bL[0] = 1;
        }
        for (int i19 = 0; i19 < getLength(this.bL); i19++) {
            for (int a = getLength(this.bL) - 1; a > i19; a--) {
                if (this.bL[a] < this.bL[a - 1]) {
                    int i20 = this.bL[a];
                    this.bL[a] = this.bL[a - 1];
                    this.bL[a - 1] = i20;
                }
            }
        }
        int i21 = 0;
        int i22 = -1;
        int i23 = 0;
        for (int i24 = 0; i24 < getLength(this.bL); i24++) {
            if (this.bL[i24] > i22) {
                i22 = this.bL[i24];
                if (this.currentBox[3] != this.bL[i24]) {
                    if (this.previousScreen == 0) {
                        this.gE[i23] = this.bL[i24];
                    }
                    i23++;
                }
                i21++;
            }
        }
        if (this.previousScreen >= 1) {
            int i25 = 0;
            for (int i26 = 0; i26 < getLength(this.currentBox); i26++) {
                this.currentBox[i26] = this.gT[i26];
                i25 = i26 + 1;
            }
            this.gameStats1[0] = this.gT[i25];
        }
        if (this.currentBox[3] >= 1) {
            i21 = 2;
        }
        this.boxScale = 200;
        this.boxCounts[0] = i21;
        this.boxCounts[2] = i21 - 1;
        this.gameStats1[0] = -(this.boxScale * this.boxCounts[0]);
        this.currentBox[0] = this.boxCounts[0];
        this.currentBox[2] = 0;
        this.currentBox[1] = (this.boxScale * 100) + (this.gameStats1[0] / this.boxScale);
        if (this.previousScreen >= 1) {
            int i27 = 0;
            for (int i28 = 0; i28 < getLength(this.currentBox); i28++) {
                this.currentBox[i28] = this.gT[i28];
                i27 = i28 + 1;
            }
            this.gameStats1[0] = this.gT[i27];
        }
        for (int i29 = 0; i29 < 26; i29++) {
            if (this.unitBuyStats[i29][13] == this.currentBox[3] && this.bq[this.unitBuyStats[i29][15]] >= this.unitBuyStats[i29][0] && ((i29 != 17 || this.bn != 0) && (i29 != 16 || this.bD[0] != 0))) {
                int i30 = 0;
                while (true) {
                    if (i30 >= getLength(this.boxCatIDs)) {
                        break;
                    } else if (this.boxCatIDs[i30] == -1) {
                        this.boxCatIDs[i30] = i29;
                        break;
                    } else {
                        i30++;
                    }
                }
            }
        }
        for (int i31 = 0; i31 < getLength(this.boxCatIDs) - 1; i31++) {
            for (int a2 = getLength(this.boxCatIDs) - 1; a2 > i31; a2--) {
                if (this.boxCatIDs[a2] != -1 && this.boxCatIDs[a2 - 1] != -1 && this.unitBuyStats[this.boxCatIDs[a2]][14] < this.unitBuyStats[this.boxCatIDs[a2 - 1]][14]) {
                    int i32 = this.boxCatIDs[a2];
                    this.boxCatIDs[a2] = this.boxCatIDs[a2 - 1];
                    this.boxCatIDs[a2 - 1] = i32;
                }
            }
        }
        if (this.currentBox[3] == 1) {
            this.gB[1] = 1;
            this.textTextures[0].drawText(this.godExplanationText[0], "FONT_SYSTEM_BOLD", 30, 1);
            this.gB[0] = 0;
            this.gA[0] = 1;
            this.boxCounts[1] = 0;
            i = 1;
        } else {
            this.gB[1] = 0;
            i = 0;
        }
        for (int i33 = 0; i33 < 26; i33++) {
            if (this.boxCatIDs[i33] != -1) {
                if (this.bw[this.boxCatIDs[i33]] == 0) {
                    this.textTextures[i].drawText(this.unitExplanationText[this.boxCatIDs[i33]][0][0], "FONT_SYSTEM_BOLD", 30, 1);
                } else if (this.bw[this.boxCatIDs[i33]] == 1) {
                    this.textTextures[i].drawText(this.unitExplanationText[this.boxCatIDs[i33]][1][0], "FONT_SYSTEM_BOLD", 30, 1);
                }
                this.gB[0] = i + 1;
                if (this.currentBox[3] >= 1) {
                    this.gA[0] = i + 1;
                    this.boxCounts[1] = i;
                }
                i++;
            }
        }
        if (this.currentBox[3] == 0) {
            for (int i34 = i; i34 < getLength(this.catExplanationText) + i; i34++) {
                this.textTextures[i34].drawText(this.catExplanationText[i34 - i][0], "FONT_SYSTEM_BOLD", 30, 1);
                this.gA[0] = i34 + 1;
                this.boxCounts[1] = i34;
            }
        }
        int[] iArr = this.gA;
        int[] iArr2 = this.gA;
        int i35 = this.gA[0];
        iArr2[1] = i35;
        iArr[2] = i35;
        for (int i36 = this.gA[2]; i36 < getLength(this.warning1Text) + this.gA[2]; i36++) {
            this.textTextures[i36].drawText(this.warning1Text[i36 - this.gA[2]], "FONT_SYSTEM_BOLD", 30, 1);
            this.gA[3] = i36 + 1;
        }
        if (this.currentBox[3] == 0) {
            if (this.currentBox[2] <= -1 || this.currentBox[2] >= this.boxCounts[1] + 1) {
                if (this.currentBox[3] == 0) {
                    for (int i37 = this.gA[3]; i37 < this.gA[3] + 3; i37++) {
                        this.textTextures[i37].drawText(this.categoryExplanation[0][i37 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else {
                    for (int i38 = this.gA[3]; i38 < this.gA[3] + 3; i38++) {
                        this.textTextures[i38].drawText(this.categoryExplanation[1][i38 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.currentBox[2] >= this.gB[1] && this.currentBox[2] < this.gB[0]) {
                for (int i39 = this.gA[3]; i39 < this.gA[3] + 3; i39++) {
                    if (this.bw[this.currentBox[2]] == 0) {
                        if (this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1] && !this.textTextures[i39].isLoaded()) {
                            this.textTextures[i39].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][0][(i39 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    } else if (this.bw[this.currentBox[2]] == 1 && this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1] && !this.textTextures[i39].isLoaded()) {
                        this.textTextures[i39].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1][(i39 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                    this.gA[4] = i39 + 1;
                }
            } else if (this.currentBox[2] - this.gB[0] >= 0) {
                for (int i40 = this.gA[3]; i40 < this.gA[3] + 3; i40++) {
                    if (!this.textTextures[i40].isLoaded()) {
                        this.textTextures[i40].drawText(this.catExplanationText[this.currentBox[2] - this.gB[0]][(i40 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                    this.gA[4] = i40 + 1;
                }
            }
        } else if (this.currentBox[3] >= 1) {
            if (this.currentBox[2] <= -1 || this.currentBox[2] >= this.boxCounts[1] + 1) {
                if (this.currentBox[3] == 0) {
                    for (int i41 = this.gA[3]; i41 < this.gA[3] + 3; i41++) {
                        this.textTextures[i41].drawText(this.categoryExplanation[0][i41 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else {
                    for (int i42 = this.gA[3]; i42 < this.gA[3] + 3; i42++) {
                        this.textTextures[i42].drawText(this.categoryExplanation[1][i42 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.currentBox[2] < this.gB[1]) {
                for (int i43 = this.gA[3]; i43 < this.gA[3] + 3; i43++) {
                    if (this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1] && !this.textTextures[i43].isLoaded()) {
                        this.textTextures[i43].drawText(this.godExplanationText[(i43 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                    this.gA[4] = i43 + 1;
                }
            } else if (this.currentBox[2] < this.gB[0]) {
                for (int i44 = this.gA[3]; i44 < this.gA[3] + 3; i44++) {
                    if (this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1]) {
                        if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0) {
                            if (!this.textTextures[i44].isLoaded()) {
                                this.textTextures[i44].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][0][(i44 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                            }
                        } else if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 1 && !this.textTextures[i44].isLoaded()) {
                            this.textTextures[i44].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1][(i44 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                    this.gA[4] = i44 + 1;
                }
            }
        }
        if (!this.textTextures[this.gA[4]].isLoaded()) {
            if (this.currentBox[3] == 0) {
                if (this.currentBox[2] < this.gB[0]) {
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[0], "FONT_SYSTEM_BOLD", 30, 1);
                } else if (this.currentBox[2] - this.gB[0] >= 0 && this.currentBox[2] - this.gB[0] <= 2) {
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[1], "FONT_SYSTEM_BOLD", 30, 1);
                } else if (this.currentBox[2] - this.gB[0] >= 3 && this.currentBox[2] - this.gB[0] <= 4) {
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[2], "FONT_SYSTEM_BOLD", 30, 1);
                } else if (this.currentBox[2] - this.gB[0] == 5) {
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[3], "FONT_SYSTEM_BOLD", 30, 1);
                } else {
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[4], "FONT_SYSTEM_BOLD", 30, 1);
                }
            } else if (this.currentBox[2] < this.gB[1]) {
                this.textTextures[this.gA[4]].drawText(this.pageNameText[7], "FONT_SYSTEM_BOLD", 30, 1);
            } else {
                this.textTextures[this.gA[4]].drawText(this.pageNameText[5], "FONT_SYSTEM_BOLD", 30, 1);
            }
        }
        this.gA[5] = this.gA[4] + 1;
        if (!this.textTextures[this.gA[5]].isLoaded()) {
            this.textTextures[this.gA[5]].drawText(this.warning1Text[6], "FONT_SYSTEM_BOLD", 30, 1);
        }
        this.ct = 0;
        for (int i45 = 0; i45 < getLength(this.scrollAmount); i45++) {
            this.scrollAmount[i45] = 0;
        }
        for (int i46 = 0; i46 < getLength(this.fx); i46++) {
            this.fx[i46] = 0;
        }
        for (int i47 = 0; i47 < getLength(this.eK); i47++) {
            this.eK[i47] = 0;
        }
        for (int i48 = 0; i48 < getLength(this.hk); i48++) {
            this.hk[i48] = 0;
        }
        for (int i49 = 0; i49 < getLength(this.fC); i49++) {
            this.fC[i49] = 0;
        }
        for (int i50 = 0; i50 < getLength(this.fy); i50++) {
            this.fy[i50] = 0;
        }
        for (int i51 = 0; i51 < getLength(this.fz); i51++) {
            this.fz[i51] = 0;
        }
        for (int i52 = 0; i52 < getLength(this.gZ); i52++) {
            this.gZ[i52] = 0;
        }
        for (int i53 = 0; i53 < getLength(this.boxSize); i53++) {
            for (int i54 = 0; i54 < getLength(this.boxSize[i53]); i54++) {
                if (i54 == 0) {
                    this.boxSize[i53][i54] = 229;
                } else if (i54 == 1) {
                    this.boxSize[i53][i54] = 184;
                }
            }
        }
        this.boxSize[0][0] = 328;
        this.boxSize[0][1] = 263;
        if (!this.gF[0]) {
            if (this.uiTextures[6].isLoaded()) {
                this.uiTextures[6].reset();
            }
            if (!this.uiTextures[6].isLoaded()) {
                this.uiTextures[6].load(MyUtility.getString(String.format("img%03d.png", 21)), MyUtility.getString(String.format("img%03d.imgcut", 21)));
            }
        }
        if (this.currentBox[3] == 0) {
            if (this.uiTextures[7].isLoaded()) {
                this.uiTextures[7].reset();
            }
            if (!this.uiTextures[7].isLoaded()) {
                this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 22)), MyUtility.getString(String.format("img%03d.imgcut", 22)));
            }
            if (this.uiTextures[8].isLoaded()) {
                this.uiTextures[8].reset();
            }
            if (!this.uiTextures[8].isLoaded()) {
                this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 23)), MyUtility.getString(String.format("img%03d.imgcut", 23)));
            }
        } else if (this.currentBox[3] >= 1) {
            if (this.uiTextures[7].isLoaded()) {
                this.uiTextures[7].reset();
            }
            if (!this.uiTextures[7].isLoaded()) {
                this.uiTextures[7].load(MyUtility.getString(String.format("img%03d.png", 26)), MyUtility.getString(String.format("img%03d.imgcut", 26)));
            }
            if (this.uiTextures[8].isLoaded()) {
                this.uiTextures[8].reset();
            }
            if (!this.uiTextures[8].isLoaded()) {
                this.uiTextures[8].load(MyUtility.getString(String.format("img%03d.png", 27)), MyUtility.getString(String.format("img%03d.imgcut", 27)));
            }
        }
        if (!this.gF[0]) {
            if (this.uiTextures[9].isLoaded()) {
                this.uiTextures[9].reset();
            }
            if (!this.uiTextures[9].isLoaded()) {
                this.uiTextures[9].load(MyUtility.getString(String.format("img%03d.png", 28)), MyUtility.getString(String.format("img%03d.imgcut", 28)));
            }
            if (!this.uiTextures[10].isLoaded()) {
                this.uiTextures[10].reset();
            }
            if (!this.uiTextures[10].isLoaded()) {
                this.uiTextures[10].load(MyUtility.getString(String.format("img%03d.png", 25)), MyUtility.getString(String.format("img%03d.imgcut", 25)));
            }
        }
        for (int i55 = 0; i55 < this.boxCounts[1] + 1; i55++) {
            if (this.uiTextures[i55 + 11].isLoaded()) {
                this.uiTextures[i55 + 11].reset();
            }
            if (i55 < this.gB[1]) {
                if (!this.uiTextures[i55 + 11].isLoaded()) {
                    this.uiTextures[i55 + 11].load(MyUtility.getString(String.format("udi%03d_g.png", 0)), MyUtility.getString(String.format("udi%03d_g.imgcut", 0)));
                }
            } else if (i55 < this.gB[0]) {
                if (!this.uiTextures[i55 + 11].isLoaded()) {
                    if (this.bw[this.boxCatIDs[i55 - this.gB[1]]] == 0) {
                        this.uiTextures[i55 + 11].load(MyUtility.getString(String.format("udi%03d_f.png", this.boxCatIDs[i55 - this.gB[1]])), MyUtility.getString(String.format("udi%03d_f.imgcut", this.boxCatIDs[i55 - this.gB[1]])));
                    } else {
                        this.uiTextures[i55 + 11].load(MyUtility.getString(String.format("udi%03d_c.png", this.boxCatIDs[i55 - this.gB[1]])), MyUtility.getString(String.format("udi%03d_c.imgcut", this.boxCatIDs[i55 - this.gB[1]])));
                    }
                }
            } else if (i55 - this.gB[0] != 0 || this.bx[0] + 1 >= this.bi) {
                if (i55 - this.gB[0] == 0) {
                    if (!this.uiTextures[i55 + 11].isLoaded()) {
                        this.uiTextures[i55 + 11].load(MyUtility.getString(String.format("udi%03d_sg_%s.png", i55 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_sg_%s.imgcut", i55 - this.gB[0], MyUtility.getString("lang"))));
                    }
                } else if (i55 - this.gB[0] != 1 || this.bx[2] + 1 >= 10) {
                    if (i55 - this.gB[0] == 1) {
                        if (!this.uiTextures[i55 + 11].isLoaded()) {
                            this.uiTextures[i55 + 11].load(MyUtility.getString(String.format("udi%03d_sg_%s.png", i55 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_sg_%s.imgcut", i55 - this.gB[0], MyUtility.getString("lang"))));
                        }
                    } else if (this.bx[(i55 - this.gB[0]) + 1] + 1 < this.bi) {
                        if (!this.uiTextures[i55 + 11].isLoaded()) {
                            this.uiTextures[i55 + 11].load(MyUtility.getString(String.format("udi%03d_s_%s.png", i55 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_s_%s.imgcut", i55 - this.gB[0], MyUtility.getString("lang"))));
                        }
                    } else if (!this.uiTextures[i55 + 11].isLoaded()) {
                        this.uiTextures[i55 + 11].load(MyUtility.getString(String.format("udi%03d_sg_%s.png", i55 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_sg_%s.imgcut", i55 - this.gB[0], MyUtility.getString("lang"))));
                    }
                } else if (!this.uiTextures[i55 + 11].isLoaded()) {
                    this.uiTextures[i55 + 11].load(MyUtility.getString(String.format("udi%03d_s_%s.png", i55 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_s_%s.imgcut", i55 - this.gB[0], MyUtility.getString("lang"))));
                }
            } else if (!this.uiTextures[i55 + 11].isLoaded()) {
                this.uiTextures[i55 + 11].load(MyUtility.getString(String.format("udi%03d_s_%s.png", i55 - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_s_%s.imgcut", i55 - this.gB[0], MyUtility.getString("lang"))));
            }
        }
        this.gz = 0;
        this.gF[0] = false;
        this.isScrolling = false;
    }

    boolean powerUpProcess() {
        this.gameStats1[0] += this.scrollAmount[0];
        this.gameStats1[1] -= this.scrollAmount[0];
        this.scrollAmount[0] = (int) (this.scrollAmount[0] * 0.9d);
        if (this.scrollAmount[0] != 0) {
            this.scrollAmount[0] = this.scrollAmount[0];
        }
        if (this.gameStats1[0] >= ((this.boxScale / 2) - this.boxScale) - 20) {
            this.gameStats1[0] = ((this.boxScale / 2) - this.boxScale) - 20;
            this.gameStats1[1] = this.boxScale * 100;
            this.scrollAmount[0] = 0;
        } else if (this.gameStats1[0] < (-(((this.boxScale * ((this.boxCounts[0] + this.boxCounts[1]) + this.boxCounts[2])) + (this.boxScale / 2)) - 20))) {
            this.gameStats1[0] = -(((this.boxScale * ((this.boxCounts[0] + this.boxCounts[1]) + this.boxCounts[2])) + (this.boxScale / 2)) - 20);
            this.scrollAmount[0] = 0;
            this.gameStats1[1] = this.boxScale * 100;
        }

        if (!isPointerDown() || this.eE[0] || this.eE[1] || this.eE[11] || this.eE[13] || this.gF[0] || this.gF[1] || this.gI || this.fx[1] != 0 || this.eb || this.fx[0] != 0) {
            this.isScrolling = false;
            if ((this.scrollAmount[0] >= 0 && this.scrollAmount[0] < 8) || (this.scrollAmount[0] > -8 && this.scrollAmount[0] <= 0)) {
                this.scrollAmount[0] = 0;
                if (this.gameStats1[0] % this.boxScale != 0) {
                    if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
                        this.gameStats1[0] = this.gameStats1[0] - ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4);
                        if ((((this.gameStats1[0] % this.boxScale) + this.boxScale) + 4) / 4 == 0) {
                            this.gameStats1[0] = ((this.gameStats1[0] / this.boxScale) - 1) * this.boxScale;
                        }
                    } else {
                        this.gameStats1[0] = this.gameStats1[0] - (((this.gameStats1[0] % this.boxScale) - 4) / 4);
                        if (((this.gameStats1[0] % this.boxScale) - 4) / 4 == 0) {
                            this.gameStats1[0] = (this.gameStats1[0] / this.boxScale) * this.boxScale;
                        }
                    }
                }
            }
            if (!isPointerUp()) {
                this.eE[9] = false;
            }
        } else {
            if (getCurrentXTouch() - getPreviousXTouch() <= -10 || getCurrentXTouch() - getPreviousXTouch() >= 10 || this.isScrolling) {
                this.isScrolling = true;
            } else {
                this.scrollAmount[0] = 0;
            }
            if (this.isScrolling) {
                this.scrollAmount[0] = getCurrentXTouch() - getPreviousXTouch();
                if (this.scrollAmount[0] != 0 && !this.eE[9]) {
                    this.eE[9] = true;
                    this.ct = 0;
                }
            }
        }
        if (!this.eE[0] && !this.eE[1] && !this.eE[13] && !this.gF[0] && !this.gF[1] && !this.eb && this.fx[0] == 0) {
            if (this.scrollAmount[0] < 0) {
                if (this.currentBox[0] != (-(this.gameStats1[0] / this.boxScale))) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                this.gp[3] = false;
            } else if (this.scrollAmount[0] > 0) {
                if (this.currentBox[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                this.gp[3] = false;
            } else if (this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.gp[3]) {
                aSound.getInstance().play(SoundType.BUTTON_SELECT);
                this.gp[3] = true;
            }
        }
        if (this.currentBox[0] != (-(this.gameStats1[0] / this.boxScale))) {
            this.currentBox[0] = -(this.gameStats1[0] / this.boxScale);
        }
        if (this.currentBox[1] != ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale) {
            this.currentBox[1] = ((this.boxScale * 100) + this.gameStats1[0]) / this.boxScale;
        }
        if ((-this.gameStats1[0]) % this.boxScale >= this.boxScale / 2) {
            if ((this.currentBox[0] + 1) - this.boxCounts[0] != this.currentBox[2]) {
                this.currentBox[2] = (this.currentBox[0] + 1) - this.boxCounts[0];
                if (this.currentBox[2] < 0 || this.currentBox[2] > this.boxCounts[1]) {
                    if (this.currentBox[3] == 0) {
                        for (int i = this.gA[3]; i < this.gA[3] + 3; i++) {
                            this.textTextures[i].drawText(this.categoryExplanation[0][i - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    } else {
                        for (int i2 = this.gA[3]; i2 < this.gA[3] + 3; i2++) {
                            this.textTextures[i2].drawText(this.categoryExplanation[1][i2 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                } else if (this.currentBox[2] < this.gB[1]) {
                    for (int i3 = this.gA[3]; i3 < this.gA[3] + 3; i3++) {
                        this.textTextures[i3].drawText(this.godExplanationText[(i3 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[7], "FONT_SYSTEM_BOLD", 30, 1);
                } else if (this.currentBox[2] < this.gB[0]) {
                    for (int i4 = this.gA[3]; i4 < this.gA[3] + 3; i4++) {
                        if (this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1]) {
                            if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0) {
                                this.textTextures[i4].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][0][(i4 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                            } else if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 1) {
                                this.textTextures[i4].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1][(i4 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                            }
                        }
                    }
                    if (this.currentBox[3] == 0) {
                        this.textTextures[this.gA[4]].drawText(this.pageNameText[0], "FONT_SYSTEM_BOLD", 30, 1);
                    } else if (this.currentBox[3] >= 1) {
                        this.textTextures[this.gA[4]].drawText(this.pageNameText[5], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else {
                    for (int i5 = this.gA[3]; i5 < this.gA[3] + 3; i5++) {
                        this.textTextures[i5].drawText(this.catExplanationText[this.currentBox[2] - this.gB[0]][(i5 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                    if (this.currentBox[2] - this.gB[0] >= 0 && this.currentBox[2] - this.gB[0] <= 2) {
                        this.textTextures[this.gA[4]].drawText(this.pageNameText[1], "FONT_SYSTEM_BOLD", 30, 1);
                    } else if (this.currentBox[2] - this.gB[0] >= 3 && this.currentBox[2] - this.gB[0] <= 4) {
                        this.textTextures[this.gA[4]].drawText(this.pageNameText[2], "FONT_SYSTEM_BOLD", 30, 1);
                    } else if (this.currentBox[2] - this.gB[0] == 5) {
                        this.textTextures[this.gA[4]].drawText(this.pageNameText[3], "FONT_SYSTEM_BOLD", 30, 1);
                    } else {
                        this.textTextures[this.gA[4]].drawText(this.pageNameText[4], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            }
        } else if (this.currentBox[0] - this.boxCounts[0] != this.currentBox[2]) {
            this.currentBox[2] = this.currentBox[0] - this.boxCounts[0];
            if (this.currentBox[2] < 0 || this.currentBox[2] > this.boxCounts[1]) {
                if (this.currentBox[3] == 0) {
                    for (int i6 = this.gA[3]; i6 < this.gA[3] + 3; i6++) {
                        this.textTextures[i6].drawText(this.categoryExplanation[0][i6 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                } else {
                    for (int i7 = this.gA[3]; i7 < this.gA[3] + 3; i7++) {
                        this.textTextures[i7].drawText(this.categoryExplanation[1][i7 - this.gA[3]], "FONT_SYSTEM_BOLD", 30, 1);
                    }
                }
            } else if (this.currentBox[2] < this.gB[1]) {
                for (int i8 = this.gA[3]; i8 < this.gA[3] + 3; i8++) {
                    this.textTextures[i8].drawText(this.godExplanationText[(i8 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                }
                this.textTextures[this.gA[4]].drawText(this.pageNameText[7], "FONT_SYSTEM_BOLD", 30, 1);
            } else if (this.currentBox[2] < this.gB[0]) {
                for (int i9 = this.gA[3]; i9 < this.gA[3] + 3; i9++) {
                    if (this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1]) {
                        if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0) {
                            this.textTextures[i9].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][0][(i9 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                        } else if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 1) {
                            this.textTextures[i9].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1][(i9 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                }
                if (this.currentBox[3] == 0) {
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[0], "FONT_SYSTEM_BOLD", 30, 1);
                } else if (this.currentBox[3] >= 1) {
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[5], "FONT_SYSTEM_BOLD", 30, 1);
                }
            } else {
                for (int i10 = this.gA[3]; i10 < this.gA[3] + 3; i10++) {
                    this.textTextures[i10].drawText(this.catExplanationText[this.currentBox[2] - this.gB[0]][(i10 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                }
                if (this.currentBox[2] - this.gB[0] >= 0 && this.currentBox[2] - this.gB[0] <= 2) {
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[1], "FONT_SYSTEM_BOLD", 30, 1);
                } else if (this.currentBox[2] - this.gB[0] >= 3 && this.currentBox[2] - this.gB[0] <= 4) {
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[2], "FONT_SYSTEM_BOLD", 30, 1);
                } else if (this.currentBox[2] - this.gB[0] == 5) {
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[3], "FONT_SYSTEM_BOLD", 30, 1);
                } else {
                    this.textTextures[this.gA[4]].drawText(this.pageNameText[4], "FONT_SYSTEM_BOLD", 30, 1);
                }
            }
        }
        this.blinkFrame[5] -= 10;
        if (this.blinkFrame[5] <= 0) {
            this.blinkFrame[5] = 0;
        }
        if (!this.eE[0] && !this.eE[1] && !this.eE[13] && !this.eE[9] && !this.gF[0] && !this.gF[1] && !this.eb && !this.gI) {
            if (this.fx[0] >= 1) {
                this.fx[0] += 1;
                if (this.fx[0] > getLength(dv) - 1) {
                    this.fx[0] = 0;
                    if (this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1]) {
                        if (this.currentBox[2] < this.gB[1]) {
                            if (this.aY >= hn) {
                                this.aY -= hn;
                                if (this.bd == 0) {
                                    screenTransition();
                                    for (int i11 = 0; i11 < getLength(this.gG); i11++) {
                                        this.gG[i11] = 0;
                                    }
                                    this.gG[this.currentBox[2]] = 1;
                                    this.blinkFrame[5] = 255;
                                    this.gx = 1;
                                    this.gu = true;
                                    this.gw = 0;
                                    return false;
                                }
                            } else if (this.be >= 1) {
                                screenTransition();
                                this.gu = true;
                                this.gw = 99;
                                return false;
                            }
                        } else if (this.currentBox[2] < this.gB[0]) {
                            if (this.bq[this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][15]] >= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][0]) {
                                if (this.bu[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0) {
                                    if (this.currentBox[3] == 0) {
                                        if (this.aY >= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1]) {
                                            this.aY -= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1];
                                            this.bu[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] = 1;
                                            if (this.bh == 0) {
                                                int i12 = 0;
                                                while (true) {
                                                    if (i12 >= getLength(this.slotCatIDs)) {
                                                        break;
                                                    } else if (this.slotCatIDs[i12] == -1) {
                                                        this.slotCatIDs[i12] = this.boxCatIDs[this.currentBox[2] - this.gB[1]] + 2;
                                                        break;
                                                    } else {
                                                        i12++;
                                                    }
                                                }
                                                int i13 = 0;
                                                while (i13 < getLength(this.slotCatIDs)) {
                                                    if (this.slotCatIDs[i13] != -1) {
                                                        int i14 = 0;
                                                        while (true) {
                                                            if (i14 >= getLength(this.slotCatIDs)) {
                                                                break;
                                                            } else if (this.slotCatIDs[i14] != -1 && i13 != i14 && i13 < i14 && this.slotCatIDs[i13] > this.slotCatIDs[i14]) {
                                                                this.gameStats1[0] = this.slotCatIDs[i14];
                                                                this.slotCatIDs[i14] = this.slotCatIDs[i13];
                                                                this.slotCatIDs[i13] = this.gameStats1[0];
                                                                i13 = 0;
                                                                break;
                                                            } else {
                                                                i14++;
                                                            }
                                                        }
                                                    }
                                                    i13++;
                                                }
                                            }
                                            for (int i15 = 0; i15 < getLength(this.gG); i15++) {
                                                this.gG[i15] = 0;
                                            }
                                            this.gG[this.currentBox[2]] = 1;
                                            this.blinkFrame[5] = 255;
                                            boolean z = false;
                                            for (int i16 = 0; i16 < 9; i16++) {
                                                if (this.bu[i16] == 0) {
                                                    z = true;
                                                }
                                            }
                                            if (!z) {
                                                screenTransition();
                                                this.gu = true;
                                                this.gw = 8;
                                                return false;
                                            }
                                        } else if (this.be >= 1) {
                                            screenTransition();
                                            this.gu = true;
                                            this.gw = 99;
                                            return false;
                                        }
                                    } else if (this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][12] == 0) {
                                        this.aY -= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1];
                                        if (this.bh == 0) {
                                            screenTransition();
                                            this.gu = true;
                                            this.gw = 0;
                                            this.bh = 1;
                                            this.bu[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] = 1;
                                            this.gx = 0;
                                            aSave();
                                            for (int i17 = 0; i17 < getLength(this.gG); i17++) {
                                                this.gG[i17] = 0;
                                            }
                                            this.gG[this.currentBox[2]] = 1;
                                            this.blinkFrame[5] = 255;
                                            return false;
                                        }
                                        this.bu[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] = 1;
                                        aSave();
                                        for (int i18 = 0; i18 < getLength(this.gG); i18++) {
                                            this.gG[i18] = 0;
                                        }
                                        this.gG[this.currentBox[2]] = 1;
                                        this.blinkFrame[5] = 255;
                                    } else if (this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][12] >= 1) {
                                        if (this.catfood >= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1]) {
                                            screenTransition();
                                            this.gu = true;
                                            this.gw = 2;
                                            return false;
                                        }
                                        screenTransition();
                                        this.gu = true;
                                        this.gw = 1;
                                        return false;
                                    }
                                } else if (this.aY >= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) % 10) + 2] * (((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) / 10) + 1)) {
                                    this.aY -= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) % 10) + 2] * (((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) / 10) + 1);
                                    int[] iArr4 = this.baseUpgrades;
                                    int i19 = this.boxCatIDs[this.currentBox[2] - this.gB[1]];
                                    iArr4[i19] = iArr4[i19] + 1;
                                    if (this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1 == 10) {
                                        this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] = 1;
                                        if (this.uiTextures[this.currentBox[2] + 11].isLoaded()) {
                                            this.uiTextures[this.currentBox[2] + 11].reset();
                                        }
                                        if (!this.uiTextures[this.currentBox[2] + 11].isLoaded()) {
                                            if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0) {
                                                this.uiTextures[this.currentBox[2] + 11].load(MyUtility.getString(String.format("udi%03d_f.png", this.boxCatIDs[this.currentBox[2] - this.gB[1]])), MyUtility.getString(String.format("udi%03d_f.imgcut", this.boxCatIDs[this.currentBox[2] - this.gB[1]])));
                                            } else {
                                                this.uiTextures[this.currentBox[2] + 11].load(MyUtility.getString(String.format("udi%03d_c.png", this.boxCatIDs[this.currentBox[2] - this.gB[1]])), MyUtility.getString(String.format("udi%03d_c.imgcut", this.boxCatIDs[this.currentBox[2] - this.gB[1]])));
                                            }
                                        }
                                        this.textTextures[this.currentBox[2]].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1][0], "FONT_SYSTEM_BOLD", 30, 1);
                                        for (int i20 = this.gA[3]; i20 < this.gA[3] + 3; i20++) {
                                            if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 1) {
                                                this.textTextures[i20].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1][(i20 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                                            }
                                        }
                                        for (int i21 = 0; i21 < getLength(this.gG); i21++) {
                                            this.gG[i21] = 0;
                                        }
                                        this.gG[this.currentBox[2]] = 1;
                                        this.blinkFrame[5] = 255;
                                        if (this.bc[1] == 0) {
                                            screenTransition();
                                            this.gu = true;
                                            this.gw = 10;
                                            this.bc[1] = 1;
                                            return false;
                                        }
                                    } else {
                                        for (int i22 = 0; i22 < getLength(this.gG); i22++) {
                                            this.gG[i22] = 0;
                                        }
                                        this.gG[this.currentBox[2]] = 1;
                                        this.blinkFrame[5] = 255;
                                    }
                                } else if (this.be >= 1) {
                                    screenTransition();
                                    this.gu = true;
                                    this.gw = 99;
                                    return false;
                                }
                            }
                        } else if (this.currentBox[2] - this.gB[0] == 0) {
                            if (this.aY >= ac[0][(this.bx[0] + 1) % 10] * (((this.bx[0] + 1) / 10) + 1)) {
                                this.aY -= ac[0][(this.bx[0] + 1) % 10] * (((this.bx[0] + 1) / 10) + 1);
                                int[] iArr5 = this.bx;
                                iArr5[0] = iArr5[0] + 1;
                                int[] iArr6 = this.bx;
                                iArr6[1] = iArr6[1] + 1;
                                if (this.bx[0] + 1 >= this.bi) {
                                    if (this.uiTextures[this.currentBox[2] + 11].isLoaded()) {
                                        this.uiTextures[this.currentBox[2] + 11].reset();
                                    }
                                    if (!this.uiTextures[this.currentBox[2] + 11].isLoaded()) {
                                        this.uiTextures[this.currentBox[2] + 11].load(MyUtility.getString(String.format("udi%03d_sg_%s.png", this.currentBox[2] - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_sg_%s.imgcut", this.currentBox[2] - this.gB[0], MyUtility.getString("lang"))));
                                    }
                                }
                                for (int i23 = 0; i23 < getLength(this.gG); i23++) {
                                    this.gG[i23] = 0;
                                }
                                this.gG[this.currentBox[2]] = 1;
                                this.blinkFrame[5] = 255;
                            } else if (this.be >= 1) {
                                screenTransition();
                                this.gu = true;
                                this.gw = 99;
                                return false;
                            }
                        } else if (this.currentBox[2] - this.gB[0] >= 1) {
                            if (this.currentBox[2] - this.gB[0] == 1) {
                                if (this.bx[2] + 1 < 10) {
                                    if (this.aY >= ac[this.currentBox[2] - this.gB[0]][(this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) % 10] * (((this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) / 10) + 1)) {
                                        this.aY -= ac[this.currentBox[2] - this.gB[0]][(this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) % 10] * (((this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) / 10) + 1);
                                        int[] iArr7 = this.bx;
                                        int i24 = (this.currentBox[2] - this.gB[0]) + 1;
                                        iArr7[i24] = iArr7[i24] + 1;
                                        if (this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1 >= 10) {
                                            if (this.uiTextures[this.currentBox[2] + 11].isLoaded()) {
                                                this.uiTextures[this.currentBox[2] + 11].reset();
                                            }
                                            if (!this.uiTextures[this.currentBox[2] + 11].isLoaded()) {
                                                this.uiTextures[this.currentBox[2] + 11].load(MyUtility.getString(String.format("udi%03d_sg_%s.png", this.currentBox[2] - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_sg_%s.imgcut", this.currentBox[2] - this.gB[0], MyUtility.getString("lang"))));
                                            }
                                        }
                                        for (int i25 = 0; i25 < getLength(this.gG); i25++) {
                                            this.gG[i25] = 0;
                                        }
                                        this.gG[this.currentBox[2]] = 1;
                                        this.blinkFrame[5] = 255;
                                    } else if (this.be >= 1) {
                                        screenTransition();
                                        this.gu = true;
                                        this.gw = 99;
                                        return false;
                                    }
                                }
                            } else if (this.aY >= ac[this.currentBox[2] - this.gB[0]][(this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) % 10] * (((this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) / 10) + 1)) {
                                this.aY -= ac[this.currentBox[2] - this.gB[0]][(this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) % 10] * (((this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) / 10) + 1);
                                int[] iArr8 = this.bx;
                                int i26 = (this.currentBox[2] - this.gB[0]) + 1;
                                iArr8[i26] = iArr8[i26] + 1;
                                if (this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1 >= this.bi) {
                                    if (this.uiTextures[this.currentBox[2] + 11].isLoaded()) {
                                        this.uiTextures[this.currentBox[2] + 11].reset();
                                    }
                                    if (!this.uiTextures[this.currentBox[2] + 11].isLoaded()) {
                                        this.uiTextures[this.currentBox[2] + 11].load(MyUtility.getString(String.format("udi%03d_sg_%s.png", this.currentBox[2] - this.gB[0], MyUtility.getString("lang"))), MyUtility.getString(String.format("udi%03d_sg_%s.imgcut", this.currentBox[2] - this.gB[0], MyUtility.getString("lang"))));
                                    }
                                }
                                int i27 = 0;
                                for (int i28 = 0; i28 < 10; i28++) {
                                    i27 += (cB[10] * this.bO[i28][10]) / 100;
                                }
                                if ((this.currentBox[2] - this.gB[0]) + 1 == 10) {
                                    this.currentEnergy += 10;
                                    if (this.currentEnergy >= ad[10] + (this.bx[10] * 10) + i27) {
                                        this.currentEnergy = i27 + ad[10] + (this.bx[10] * 10);
                                    }
                                }
                                for (int i29 = 0; i29 < getLength(this.gG); i29++) {
                                    this.gG[i29] = 0;
                                }
                                this.gG[this.currentBox[2]] = 1;
                                this.blinkFrame[5] = 255;
                            } else if (this.be >= 1) {
                                screenTransition();
                                this.gu = true;
                                this.gw = 99;
                                return false;
                            }
                        }
                    }
                }
            } else if (this.fx[1] >= 1) {
                int[] iArr9 = this.fx;
                iArr9[1] = iArr9[1] + 1;
                if (this.fx[1] > getLength(dv) - 1) {
                    this.fx[1] = 0;
                    this.gI = true;
                }
            } else if (this.fx[2] >= 1) {
                int[] iArr10 = this.fx;
                iArr10[2] = iArr10[2] + 1;
                if (this.fx[2] > getLength(dv) - 1) {
                    this.fx[2] = 0;
                    if (this.currentBox[2] + this.currentBox[5] <= -1 || this.currentBox[2] + this.currentBox[5] >= this.boxCounts[1] + 1) {
                        this.gF[0] = true;
                    }
                }
            } else if (this.fx[5] >= 1) {
                int[] iArr11 = this.fx;
                iArr11[5] = iArr11[5] + 1;
                this.eE[10] = true;
                if (this.fx[5] > getLength(dv) - 1) {
                    this.fx[5] = 0;
                    this.eE[1] = true;
                }
            } else if (this.fx[13] >= 1) {
                int[] iArr12 = this.fx;
                iArr12[13] = iArr12[13] + 1;
                if (this.fx[13] > getLength(dv) - 1) {
                    this.fx[13] = 0;
                    if (this.be >= 1) {
                        this.eE[13] = true;
                    }
                }
            } else if (this.fx[14] >= 1) {
                int[] iArr13 = this.fx;
                iArr13[14] = iArr13[14] + 1;
                if (this.fx[14] > getLength(dv) - 1) {
                    this.fx[14] = 0;
                    if (this.bB[8] == 0) {
                        screenTransition();
                        this.bB[8] = 1;
                        this.gU = true;
                        for (int i30 = 0; i30 < getLength(this.gV); i30++) {
                            this.gV[i30] = 0;
                        }
                        aSound.getInstance().setVolume(50);
                        return false;
                    } else if (this.catfood >= 900000) {
                        screenTransition();
                        this.gu = true;
                        this.gw = 10000;
                        return false;
                    } else {
                        screenTransition();
                        this.menuType = 0;
                        this.j = true;
                        return false;
                    }
                }
            } else if (this.fx[15] >= 1) {
                int[] iArr14 = this.fx;
                iArr14[15] = iArr14[15] + 1;
                if (this.fx[15] > getLength(dv) - 1) {
                    this.fx[15] = 0;
                    if (this.be >= 1) {
                        this.eE[13] = true;
                    }
                }
            } else {
                if ((this.currentBox[2] > -1 && this.currentBox[2] < this.boxCounts[1] + 1) || !isPointerDown() || !isTouching(((((getWidth() / 2) - (this.boxSize[this.currentBox[0]][0] / 2)) + (this.boxScale * this.currentBox[0])) + this.gameStats1[0]) - (328 - this.boxSize[this.currentBox[0]][0]), 347 - this.boxSize[this.currentBox[0]][1], this.boxSize[this.currentBox[0]][0], this.boxSize[this.currentBox[0]][1])) {
                    this.gp[2] = false;
                } else if (!this.gp[2]) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    this.gp[2] = true;
                }
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                    this.gp[0] = false;
                } else if ((this.gp[0] || (this.currentBox[2] > -1 && this.currentBox[2] < this.boxCounts[1] + 1)) && !this.gp[0] && this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1] && this.currentBox[2] >= this.gB[1]) {
                    if (this.currentBox[2] < this.gB[0]) {
                        if (this.bq[this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][15]] >= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][0] && this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1 < this.bi) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gp[0] = true;
                        }
                    } else if (this.currentBox[2] - this.gB[0] == 0) {
                        if (this.bx[0] + 1 < this.bi) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gp[0] = true;
                        }
                    } else if (this.currentBox[2] - this.gB[0] == 1) {
                        if (this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1 < 10) {
                            aSound.getInstance().play(SoundType.BUTTON_SELECT);
                            this.gp[0] = true;
                        }
                    } else if (this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1 < this.bi) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[0] = true;
                    }
                }
                if (this.bq[0] >= 48) {
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3])) {
                        this.gp[1] = false;
                    } else if (!this.gp[1] && this.currentBox[2] >= this.gB[1] && this.currentBox[2] < this.gB[0] && this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1] && this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1 >= 10 && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0) {
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                        this.gp[1] = true;
                    }
                }
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                    this.gp[5] = false;
                } else if (!this.eE[9] && !this.gp[5]) {
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    this.gp[5] = true;
                }
                if (this.fx[2] == 0 && this.currentBox[0] - 2 >= 0 && this.currentBox[2] <= 0 && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[9] && isPointerUp() && isTouching(((((getWidth() / 2) - (this.boxSize[this.currentBox[0] - 1][0] / 2)) + (this.boxScale * (this.currentBox[0] - 1))) + this.gameStats1[0]) - ((328 - this.boxSize[this.currentBox[0] - 1][0]) + ((328 - this.boxSize[(this.currentBox[0] - 1) + 1][0]) / 2)), 347 - this.boxSize[this.currentBox[0] - 1][1], this.boxSize[this.currentBox[0] - 1][0], this.boxSize[this.currentBox[0] - 1][1])) {
                    int[] iArr15 = this.fx;
                    iArr15[2] = iArr15[2] + 1;
                    this.currentBox[5] = -1;
                    this.eE[11] = true;
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                }
                if (this.fx[2] == 0 && this.currentBox[0] - 2 <= this.boxCounts[1] && this.currentBox[2] >= this.boxCounts[1] && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[9] && isPointerUp() && isTouching(((getWidth() / 2) - (this.boxSize[this.currentBox[0] + 1][0] / 2)) + (this.boxScale * (this.currentBox[0] + 1)) + this.gameStats1[0] + (328 - this.boxSize[this.currentBox[0] + 1][0]), 347 - this.boxSize[this.currentBox[0] + 1][1], this.boxSize[this.currentBox[0] + 1][0], this.boxSize[this.currentBox[0] + 1][1])) {
                    int[] iArr16 = this.fx;
                    iArr16[2] = iArr16[2] + 1;
                    this.currentBox[5] = 1;
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    this.eE[11] = true;
                }
                if (this.fx[2] == 0 && ((this.currentBox[2] <= -1 || this.currentBox[2] >= this.boxCounts[1] + 1) && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[9] && isPointerUp() && isTouching(((((getWidth() / 2) - (this.boxSize[this.currentBox[0]][0] / 2)) + (this.boxScale * this.currentBox[0])) + this.gameStats1[0]) - (328 - this.boxSize[this.currentBox[0]][0]), 347 - this.boxSize[this.currentBox[0]][1], this.boxSize[this.currentBox[0]][0], this.boxSize[this.currentBox[0]][1]))) {
                    int[] iArr17 = this.fx;
                    iArr17[2] = iArr17[2] + 1;
                    this.currentBox[5] = 0;
                    aSound.getInstance().play(SoundType.BUTTON_PRESS);
                    this.eE[11] = true;
                } else if (!this.eE[11] && isPointerUp() && isTouching(this.buttonCoordinates1[0][0], this.buttonCoordinates1[0][1], this.buttonCoordinates1[0][2], this.buttonCoordinates1[0][3])) {
                    if (this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[9] && this.currentBox[2] > -1 && this.currentBox[2] < this.boxCounts[1] + 1) {
                        if (this.currentBox[2] < this.gB[1]) {
                            if (this.bd == 0) {
                                if (this.aY >= hn) {
                                    aSound.getInstance().play(SoundType.UPGRADE);
                                } else {
                                    aSound.getInstance().play(SoundType.CANT_PRESS);
                                    this.ct = 50;
                                }
                                int[] iArr18 = this.fx;
                                iArr18[0] = iArr18[0] + 1;
                            }
                        } else if (this.currentBox[2] < this.gB[0]) {
                            if (this.bq[this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][15]] >= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][0]) {
                                if (this.bu[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0) {
                                    if (this.currentBox[3] == 0) {
                                        if (this.aY >= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1]) {
                                            aSound.getInstance().play(SoundType.UPGRADE);
                                        } else {
                                            aSound.getInstance().play(SoundType.CANT_PRESS);
                                            this.ct = 50;
                                        }
                                    } else if (this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][12] == 0) {
                                        if (this.aY >= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1]) {
                                            aSound.getInstance().play(SoundType.UPGRADE);
                                        } else {
                                            aSound.getInstance().play(SoundType.CANT_PRESS);
                                            this.ct = 50;
                                        }
                                    } else if (this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][12] >= 1) {
                                        if (this.catfood >= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1]) {
                                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                        } else {
                                            aSound.getInstance().play(SoundType.BUTTON_PRESS);
                                        }
                                    }
                                    int[] iArr19 = this.fx;
                                    iArr19[0] = iArr19[0] + 1;
                                } else if (this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1 < this.bi) {
                                    if (this.aY >= this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) % 10) + 2] * (((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) / 10) + 1)) {
                                        aSound.getInstance().play(SoundType.UPGRADE);
                                    } else {
                                        aSound.getInstance().play(SoundType.CANT_PRESS);
                                        this.ct = 50;
                                    }
                                    int[] iArr20 = this.fx;
                                    iArr20[0] = iArr20[0] + 1;
                                }
                            }
                        } else if (this.currentBox[2] - this.gB[0] == 0) {
                            if (this.bx[0] + 1 < this.bi) {
                                if (this.aY >= ac[0][(this.bx[0] + 1) % 10] * (((this.bx[0] + 1) / 10) + 1)) {
                                    aSound.getInstance().play(SoundType.UPGRADE);
                                } else {
                                    aSound.getInstance().play(SoundType.CANT_PRESS);
                                    this.ct = 50;
                                }
                                int[] iArr21 = this.fx;
                                iArr21[0] = iArr21[0] + 1;
                            }
                        } else if (this.currentBox[2] - this.gB[0] >= 1) {
                            if (this.currentBox[2] - this.gB[0] == 1) {
                                if (this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1 < 10) {
                                    if (this.aY >= ac[this.currentBox[2] - this.gB[0]][(this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) % 10] * (((this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) / 10) + 1)) {
                                        aSound.getInstance().play(SoundType.UPGRADE);
                                    } else {
                                        aSound.getInstance().play(SoundType.CANT_PRESS);
                                        this.ct = 50;
                                    }
                                    int[] iArr22 = this.fx;
                                    iArr22[0] = iArr22[0] + 1;
                                }
                            } else if (this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1 < this.bi) {
                                if (this.aY >= ac[this.currentBox[2] - this.gB[0]][(this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) % 10] * (((this.bx[(this.currentBox[2] - this.gB[0]) + 1] + 1) / 10) + 1)) {
                                    aSound.getInstance().play(SoundType.UPGRADE);
                                } else {
                                    aSound.getInstance().play(SoundType.CANT_PRESS);
                                    this.ct = 50;
                                }
                                int[] iArr23 = this.fx;
                                iArr23[0] = iArr23[0] + 1;
                            }
                        }
                    }
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[1][0], this.buttonCoordinates1[1][1], this.buttonCoordinates1[1][2], this.buttonCoordinates1[1][3])) {
                    if (this.bq[0] >= 48 && this.gameStats1[0] % this.boxScale == 0 && this.scrollAmount[0] == 0 && !this.eE[9] && this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1] && this.currentBox[2] >= this.gB[1] && this.currentBox[2] < this.gB[0] && this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1 >= 10) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr24 = this.fx;
                        iArr24[1] = iArr24[1] + 1;
                    }
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
                    if (!this.eE[9]) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr25 = this.fx;
                        iArr25[5] = iArr25[5] + 1;
                        this.eE[10] = true;
                    }
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[13][0], this.buttonCoordinates1[13][1], this.buttonCoordinates1[13][2], this.buttonCoordinates1[13][3])) {
                    if (this.be >= 1) {
                        int[] iArr26 = this.fx;
                        iArr26[13] = iArr26[13] + 1;
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        this.gR = 0;
                        this.gA[0] = 0;
                    }
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3])) {
                    if (this.bf >= 1) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr27 = this.fx;
                        iArr27[14] = iArr27[14] + 1;
                    }
                } else if (isPointerUp() && isTouching(this.buttonCoordinates1[15][0], this.buttonCoordinates1[15][1], this.buttonCoordinates1[15][2], this.buttonCoordinates1[15][3]) && !this.dV) {
                    if (this.be >= 1) {
                        aSound.getInstance().play(SoundType.BUTTON_PRESS);
                        int[] iArr28 = this.fx;
                        iArr28[15] = iArr28[15] + 1;
                        this.gA[0] = 0;
                        this.gR = 1;
                    }
                } else if (isBackPressed() && !this.eE[9]) {
                    this.eE[10] = true;
                    this.eE[1] = true;
                }
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[13][0], this.buttonCoordinates1[13][1], this.buttonCoordinates1[13][2], this.buttonCoordinates1[13][3]) || this.be < 1) {
                    this.gp[13] = false;
                } else if (!this.gp[13]) {
                    this.gp[13] = true;
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                if (!isPointerDown() || !isTouching(this.buttonCoordinates1[14][0], this.buttonCoordinates1[14][1], this.buttonCoordinates1[14][2], this.buttonCoordinates1[14][3]) || this.bf < 1) {
                    this.gp[14] = false;
                } else if (!this.gp[14]) {
                    this.gp[14] = true;
                    aSound.getInstance().play(SoundType.BUTTON_SELECT);
                }
                if (this.be >= 1) {
                    if (!isPointerDown() || !isTouching(this.buttonCoordinates1[15][0], this.buttonCoordinates1[15][1], this.buttonCoordinates1[15][2], this.buttonCoordinates1[15][3]) || this.bf < 1) {
                        this.gp[15] = false;
                    } else if (!this.gp[15]) {
                        this.gp[15] = true;
                        aSound.getInstance().play(SoundType.BUTTON_SELECT);
                    }
                }
            }
        }
        if (this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1]) {
            if (this.currentBox[2] < this.gB[1]) {
                if (this.bd == 0) {
                    this.gz = hn;
                }
            } else if (this.currentBox[2] < this.gB[0]) {
                if (this.bq[this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][15]] < this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][0]) {
                    this.gz = 0;
                } else if (this.bu[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0) {
                    this.gz = this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1];
                } else {
                    this.gz = this.unitBuyStats[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) % 10) + 2] * (((this.baseUpgrades[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] + 1) / 10) + 1);
                }
            } else if ((this.currentBox[2] - this.gB[1]) - this.gB[0] == 0) {
                this.gz = ac[0][(this.bx[0] + 1) % 10] * (((this.bx[0] + 1) / 10) + 1);
            } else if ((this.currentBox[2] - this.gB[1]) - this.gB[0] >= 1) {
                this.gz = ac[(this.currentBox[2] - this.gB[1]) - this.gB[0]][(this.bx[((this.currentBox[2] - this.gB[1]) - this.gB[0]) + 1] + 1) % 10] * (((this.bx[((this.currentBox[2] - this.gB[1]) - this.gB[0]) + 1] + 1) / 10) + 1);
            }
        }
        if (this.gI) {
            this.gH++;
            if (this.gH > getLength(cC) - 1) {
                this.gH = 0;
                this.gI = false;
            }
            if (cC[this.gH] == 100 && this.currentBox[2] >= 0 && this.currentBox[2] <= this.boxCounts[1]) {
                if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0) {
                    this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] = 1;
                    this.textTextures[this.currentBox[2]].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1][0], "FONT_SYSTEM_BOLD", 30, 1);
                    for (int i31 = this.gA[3]; i31 < this.gA[3] + 3; i31++) {
                        if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 1) {
                            this.textTextures[i31].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][1][(i31 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                    for (int i32 = 0; i32 < 10; i32++) {
                        if (this.slotCatIDs[i32] == this.boxCatIDs[this.currentBox[2] - this.gB[1]] + 2) {
                            this.slotFormIDs[i32] = 1;
                        }
                    }
                } else if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 1) {
                    this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] = 0;
                    this.textTextures[this.currentBox[2]].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][0][0], "FONT_SYSTEM_BOLD", 30, 1);
                    for (int i33 = this.gA[3]; i33 < this.gA[3] + 3; i33++) {
                        if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0) {
                            this.textTextures[i33].drawText(this.unitExplanationText[this.boxCatIDs[this.currentBox[2] - this.gB[1]]][0][(i33 - this.gA[3]) + 1], "FONT_SYSTEM_BOLD", 30, 1);
                        }
                    }
                    for (int i34 = 0; i34 < 10; i34++) {
                        if (this.slotCatIDs[i34] == this.boxCatIDs[this.currentBox[2] - this.gB[1]] + 2) {
                            this.slotFormIDs[i34] = 0;
                        }
                    }
                }
                if (this.uiTextures[this.currentBox[2] + 11].isLoaded()) {
                    this.uiTextures[this.currentBox[2] + 11].reset();
                }
                if (this.uiTextures[this.currentBox[2] + 11].isLoaded()) {
                    this.uiTextures[this.currentBox[2] + 11].reset();
                }
                if (!this.uiTextures[this.currentBox[2] + 11].isLoaded()) {
                    if (this.bw[this.boxCatIDs[this.currentBox[2] - this.gB[1]]] == 0) {
                        this.uiTextures[this.currentBox[2] + 11].load(MyUtility.getString(String.format("udi%03d_f.png", this.boxCatIDs[this.currentBox[2] - this.gB[1]])), MyUtility.getString(String.format("udi%03d_f.imgcut", this.boxCatIDs[this.currentBox[2] - this.gB[1]])));
                    } else {
                        this.uiTextures[this.currentBox[2] + 11].load(MyUtility.getString(String.format("udi%03d_c.png", this.boxCatIDs[this.currentBox[2] - this.gB[1]])), MyUtility.getString(String.format("udi%03d_c.imgcut", this.boxCatIDs[this.currentBox[2] - this.gB[1]])));
                    }
                }
            }
        }
        if (this.eE[0]) {
            int[] iArr29 = this.blinkFrame;
            iArr29[2] = iArr29[2] + 1;
            this.gm[0] = (this.gm[0] * 2) + 1;
            if (this.gm[0] >= 297) {
                this.gm[0] = 297;
                this.gm[1] = this.gm[1] / 2;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = getWidth();
                if (this.gm[1] <= 0) {
                    this.eE[0] = false;
                    this.blinkFrame[2] = 0;
                    this.previousScreen = 0;
                }
            } else {
                this.fP = fM[this.blinkFrame[2]];
            }
        } else if (this.eE[1]) {
            int[] iArr30 = this.blinkFrame;
            iArr30[2] = iArr30[2] + 1;
            this.gm[1] = (this.gm[1] * 2) + 1;
            if (this.gm[1] >= 297) {
                this.gm[1] = 297;
                this.gm[0] = this.gm[0] / 2;
            }
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.blinkFrame[2] = getLength(fM) - 1;
                this.fP = 0;
                if (this.gm[0] <= 0) {
                    this.blinkFrame[2] = 0;
                    screenTransition();
                    this.setScreenType(ScreenType.CAT_BASE);
                    this.screenLoadState = -1;
                    this.eE[1] = false;
                    return false;
                }
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
        } else if (this.gF[0]) {
            int[] iArr31 = this.blinkFrame;
            iArr31[6] = iArr31[6] + 1;
            if (this.blinkFrame[6] > getLength(fM) - 1) {
                this.fP = 0;
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[6]];
            }
            if (this.blinkFrame[6] > getLength(fM)) {
                this.blinkFrame[6] = 0;
                screenTransition();
                this.setScreenType(ScreenType.POWER_UP);
                this.screenLoadState = -1;
                return false;
            }
        } else if (this.gF[1]) {
            int[] iArr32 = this.blinkFrame;
            iArr32[6] = iArr32[6] + 1;
            if (this.blinkFrame[6] > getLength(fM) - 1) {
                this.blinkFrame[6] = getLength(fM) - 1;
                this.fP = getWidth();
                this.blinkFrame[6] = 0;
                this.gF[1] = false;
            } else {
                this.fP = fM[this.blinkFrame[6]];
            }
        }
        if (this.eE[13]) {
            int[] iArr33 = this.blinkFrame;
            iArr33[2] = iArr33[2] + 1;
            if (this.blinkFrame[2] > getLength(fM) - 1) {
                this.fP = 0;
            } else {
                this.fP = fM[(getLength(fM) - 1) - this.blinkFrame[2]];
            }
            if (this.blinkFrame[2] > getLength(fM)) {
                this.fP = 0;
                this.blinkFrame[2] = 0;
                screenTransition();
                this.setScreenType(ScreenType.ITEM_SHOP);
                this.screenLoadState = -1;
                this.previousScreen = 2;
                int i35 = 0;
                for (int i36 = 0; i36 < getLength(this.currentBox); i36++) {
                    this.gT[i36] = this.currentBox[i36];
                    i35 = i36 + 1;
                }
                this.gT[i35] = this.gameStats1[0];
                return false;
            }
        }
        this.blinkFrame[0] -= 1;
        if (this.blinkFrame[0] <= 0) {
            this.blinkFrame[0] = 0;
        }
        int[] iArr34 = this.blinkFrame;
        iArr34[3] = iArr34[3] + 1;
        int[] iArr35 = this.blinkFrame;
        iArr35[4] = iArr35[4] + 1;
        this.ct--;
        if (this.ct <= 0) {
            this.ct = 0;
        }
        for (int i37 = 0; i37 < getLength(this.boxSize); i37++) {
            for (int i38 = 0; i38 < getLength(this.boxSize[i37]); i38++) {
                if (i38 == 0) {
                    if (i37 == this.currentBox[0]) {
                        this.boxSize[i37][i38] = (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 99) / 100) + 328;
                        if (this.gameStats1[0] > 0) {
                            this.boxSize[i37][i38] = 328 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 99) / 100);
                        }
                    } else if (i37 == this.currentBox[0] + 1) {
                        this.boxSize[i37][i38] = 229 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 99) / 100);
                    } else {
                        this.boxSize[i37][i38] = 229;
                    }
                    if (this.boxSize[i37][i38] >= 328) {
                        this.boxSize[i37][i38] = 328;
                    } else if (this.boxSize[i37][i38] <= 229) {
                        this.boxSize[i37][i38] = 229;
                    }
                } else if (i38 == 1) {
                    if (i37 == this.currentBox[0]) {
                        this.boxSize[i37][i38] = (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 79) / 100) + 263;
                        if (this.gameStats1[0] > 0) {
                            this.boxSize[i37][i38] = 263 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 79) / 100);
                        }
                    } else if (i37 == this.currentBox[0] + 1) {
                        this.boxSize[i37][i38] = 184 - (((((this.gameStats1[0] % this.boxScale) * 100) / this.boxScale) * 79) / 100);
                    } else {
                        this.boxSize[i37][i38] = 184;
                    }
                    if (this.boxSize[i37][i38] >= 263) {
                        this.boxSize[i37][i38] = 263;
                    } else if (this.boxSize[i37][i38] <= 184) {
                        this.boxSize[i37][i38] = 184;
                    }
                }
            }
        }
        if (this.eE[0] || this.eE[1] || this.eE[13] || this.gF[0] || this.gF[1] || this.eb || this.gI || this.eE[9]) {
            if (this.fx[5] == 0 && !this.eE[1]) {
                this.eE[10] = false;
            }
        } else if ((isPointerDown() || isPointerUp()) && isTouching(this.buttonCoordinates1[5][0], this.buttonCoordinates1[5][1], this.buttonCoordinates1[5][2], this.buttonCoordinates1[5][3])) {
            this.eE[10] = true;
        } else if (this.fx[5] == 0 && !this.eE[1]) {
            this.eE[10] = false;
        }
        return true;
    }
}
